{"version":3,"sources":["TreeView/SearchableTreePlugin.js","../../../../src/createDataInstance/createInstancePlugin.js","../../../../src/hooks/usePrevious.js"],"names":["transformRecords","records","instance","list","document","querySelector","getInstance","props","searchQuery","scrollTop","filter","record","selfMatch","childMatch","transformRecord","getItemLabel","toLowerCase","indexOf","currRecord","parentNode","markParentsAsChildMatch","order","itemRenderer","value","itemProps","showHighlight","autoEscape","highlightClassName","searchWords","textToHighlight","SearchableTreePlugin","createInstancePlugin","prevSearchQuery","usePrevious","shouldWalkChildren","getDecoratorsFromHooks","hooks","decorators","nextDecorators","Object","decorator","Array","name","ref","useRef","useEffect"],"mappings":"iGAAA,mHAWA,SAASA,EAAiBC,EAASC,GACjC,MAAMC,EAAOC,SAASC,cAAc,6BAIpC,OADIH,EAASI,cADXC,MAASC,aAIPL,GAAQA,EAAKM,YAAWN,EAAKM,UAAY,GACtCR,EAAQS,OACZC,GAAWA,EAAOC,WAAaD,EAAOE,aAJhBZ,EAQ3B,SAASa,EAAgBH,EAAQT,GAAW,MAAD,EAIrCA,EAASI,cAFFE,EAF8B,EAEvCD,MAASC,YACTO,EAHuC,EAGvCA,aAYF,OATEP,IAG2C,IAF3CO,EAAaJ,GACVK,cACAC,QAAQT,EAAYQ,iBA7BML,KAC/B,IAAIO,EAAaP,EACjB,KAAOO,EAAWC,YAChBD,EAAWC,WAAWN,YAAa,EACnCK,EAAaA,EAAWC,YA2BxBC,CAAwBT,GAExBA,EAAOC,WAAY,GAEdD,EAhBTX,EAAiBqB,MAAQ,EAkBzBP,EAAgBO,MAAQ,EACxB,MAAMC,EAAe,CAACC,EAAOC,EAAWtB,KAAc,MAAD,EAG/CA,EAASI,cADXC,MAASC,EAFwC,EAExCA,YAFwC,IAE3BiB,cAExB,YAJmD,WAI5BjB,EAErB,kBAAC,IAAD,CACEkB,YAAU,EACVC,mBAAmB,sBACnBC,YAAa,CAACpB,GACdqB,gBAAiBN,IANsBA,GAU7CD,EAAaD,MAAQ,EACd,MAAMS,EAAuBC,YAClC,kBACA,CACE7B,SAAWA,IAAc,MAEZM,EACPN,EADFK,MAASC,YAIX,MAAO,CACLwB,gBAFsBC,YAAYzB,KAKtC0B,mBAAoB,CAACvB,EAAQT,MAGvBA,EAASI,cADXC,MAASC,YAIbG,OAAQG,EACRb,QAASD,EACTsB,kB,iRC9EJ,SAASa,EAAuBC,EAAOC,GACrC,IAAMC,E,yWAAiB,CAAH,GAApB,GAUA,OARAC,wBAA2B,SAAAC,GACrBC,cAAcJ,EAAlB,IACEC,2BAAgCD,EAAhCC,KAAuDF,EAAvDE,KAEAA,KAA4BF,EAA5BE,MAIJ,E,IAGa,SAA8BI,EAAMN,GACjD,OAAO,SAAAC,GAAU,OAAIF,EAAuBC,EAA3B,M,gDCbnB,SAAqBb,GACnB,IAAMoB,EAAMC,mBAMZ,OAJAC,qBAAU,WACRF,cACC,CAFHE,IAIOF,EAAP","file":"static/js/58.656bd4c0.chunk.js","sourcesContent":["import createInstancePlugin from '@elliemae/ds-shared/createDataInstance/createInstancePlugin';\nimport Highlighter from 'react-highlight-words';\nimport React from 'react';\nimport usePrevious from '@elliemae/ds-utilities/hooks/usePrevious';\nconst markParentsAsChildMatch = (record) => {\n  let currRecord = record;\n  while (currRecord.parentNode) {\n    currRecord.parentNode.childMatch = true;\n    currRecord = currRecord.parentNode;\n  }\n};\nfunction transformRecords(records, instance) {\n  const list = document.querySelector('[data-testid=\"tree-list\"]');\n  const {\n    props: { searchQuery },\n  } = instance.getInstance();\n  if (!searchQuery) return records;\n  // Scroll the list to the top once the search is triggered\n  if (list && list.scrollTop) list.scrollTop = 0;\n  return records.filter(\n    (record) => record.selfMatch || record.childMatch,\n  );\n}\ntransformRecords.order = 0;\nfunction transformRecord(record, instance) {\n  const {\n    props: { searchQuery },\n    getItemLabel,\n  } = instance.getInstance();\n  if (\n    searchQuery &&\n    getItemLabel(record)\n      .toLowerCase()\n      .indexOf(searchQuery.toLowerCase()) !== -1\n  ) {\n    markParentsAsChildMatch(record);\n    // eslint-disable-next-line no-param-reassign\n    record.selfMatch = true;\n  }\n  return record;\n}\ntransformRecord.order = 0;\nconst itemRenderer = (value, itemProps, instance) => {\n  const {\n    props: { searchQuery, showHighlight = true },\n  } = instance.getInstance();\n  if (!showHighlight || !searchQuery) return value;\n  return (\n    <Highlighter\n      autoEscape\n      highlightClassName=\"tree-text-highlight\"\n      searchWords={[searchQuery]}\n      textToHighlight={value}\n    />\n  );\n};\nitemRenderer.order = 0;\nexport const SearchableTreePlugin = createInstancePlugin(\n  'searchable-tree',\n  {\n    instance: (instance) => {\n      const {\n        props: { searchQuery },\n      } = instance;\n      // eslint-disable-next-line react-hooks/rules-of-hooks\n      const prevSearchQuery = usePrevious(searchQuery);\n      return {\n        prevSearchQuery,\n      };\n    },\n    shouldWalkChildren: (record, instance) => {\n      const {\n        props: { searchQuery },\n      } = instance.getInstance();\n      return !!searchQuery;\n    },\n    record: transformRecord,\n    records: transformRecords,\n    itemRenderer,\n  },\n);\n","function getDecoratorsFromHooks(hooks, decorators) {\n  const nextDecorators = { ...decorators };\n\n  Object.keys(hooks).forEach(decorator => {\n    if (Array.isArray(decorators[decorator])) {\n      nextDecorators[decorator] = [...decorators[decorator], hooks[decorator]];\n    } else {\n      nextDecorators[decorator] = hooks[decorator];\n    }\n  });\n\n  return nextDecorators;\n}\n\nexport default function createInstancePlugin(name, hooks) {\n  return decorators => getDecoratorsFromHooks(hooks, decorators);\n}\n","import { useEffect, useRef } from 'react';\n\nfunction usePrevious(value) {\n  const ref = useRef();\n\n  useEffect(() => {\n    ref.current = value;\n  }, [value]);\n\n  return ref.current;\n}\n\nexport default usePrevious;\n"],"sourceRoot":""}
{"version":3,"sources":["../../../src/CloseCircle.js","../../../../src/Tooltip/TooltipType.js","../../../../src/Tooltip/DSTooltip.js","../../../src/constants.js","../../../../../src/form/Input/InputAddonWrapper.js","../../../../../src/form/Input/showEllipsis.js","../../../../../src/form/Input/InputImpl.js","../../../../../src/form/Input/DSInput.js"],"names":["createIcon","paths","height","width","TooltipType","TooltipContainer","aggregatedClasses","TooltipText","DSTooltip","containerProps","innerRef","placement","PopperPositions","TOP","title","delayClose","delayOpen","interactionType","PopperInteractions","HOVER","triggerComponent","className","isOpen","undefined","onOpen","springAnimationComponent","tooltipType","showArrow","zIndex","otherTooltipProps","tooltipBlockName","convertPropToCssClassName","Content","blockName","contentComponent","getComponentFromProps","PropTypes","current","any","InputWrapper","InputAddon","left","right","variant","hasError","error","InputAddonWrapper","components","this","renderAddonComponent","Array","comp","classProps","component","key","index","rightComponents","leftComponents","children","InputComponent","React","readOnly","disabled","rightAddon","getRightAddon","leftAddon","getLeftAddon","Component","showEllipsis","value","String","Input","clearable","WrapperForTooltipInput","InputCustomWrapper","ClearableButton","getValidComponents","noop","InputImpl","onChange","max","e","onBlur","min","target","active","onFocus","showTooltip","client","window","onClear","ref","focus","buttonType","data-testid","icon","onClick","handleClear","role","id","isShowElipsisActive","autoFocus","name","maxLength","minLength","placeholder","leftComponent","rightComponent","disableTooltip","onKeyDown","onKeyUp","onPaste","required","type","customInputType","onMouseLeave","onMouseOut","style","tabIndex","rest","filter","inputProps","omit","autoComplete","onMouseOver","props","Error","fluidWidth","otherProps","aria-label"],"mappings":"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","file":"static/js/1.5d04a657.chunk.js","sourcesContent":["/* eslint-disable */\nimport createIcon from './utils/createIcon';\n\nexport default createIcon({\n  paths: [\n    'M15 10.5c0 3.038-2.462 5.5-5.5 5.5S4 13.538 4 10.5 6.462 5 9.5 5 15 7.462 15 10.5zm-2.672-2.121l-.707-.707L9.5 9.793 7.379 7.672l-.707.707L8.793 10.5l-2.121 2.121.707.707L9.5 11.207l2.121 2.121.707-.707-2.121-2.121 2.121-2.121z',\n  ],\n  height: 20,\n  width: 20,\n});\n","export const TooltipType = {\n  TOOLTIP: 'tooltip',\n  TOOLBAR: 'toolbar',\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  aggregatedClasses,\n  convertPropToCssClassName,\n} from '@elliemae/ds-classnames';\nimport DSPopper, {\n  PopperPositions,\n  PopperInteractions,\n} from '@elliemae/ds-basic/Popper';\nimport getComponentFromProps from '@elliemae/ds-utilities/getComponentFromProps';\nimport {\n  DEFAULT_DELAY_OPEN,\n  DEFAULT_DELAY_CLOSE,\n} from '@elliemae/ds-shared/constants';\nimport { TooltipType } from './TooltipType';\nimport { interactions } from '../Popper/interaction';\nimport { positions } from '../Popper/positions';\n\nconst blockName = 'tooltip';\n\nconst TooltipContainer = aggregatedClasses('div')(blockName);\nconst TooltipText = aggregatedClasses('span')(blockName, 'text');\n\nconst DSTooltip = ({\n  containerProps = {},\n  innerRef,\n  placement = PopperPositions.TOP,\n  title = '',\n  delayClose = DEFAULT_DELAY_CLOSE,\n  delayOpen = DEFAULT_DELAY_OPEN,\n  interactionType = PopperInteractions.HOVER,\n  triggerComponent = null,\n  className = '',\n  isOpen = undefined,\n  onOpen = () => null,\n  springAnimationComponent = undefined,\n  tooltipType = TooltipType.TOOLTIP,\n  showArrow = true,\n  zIndex,\n  ...otherTooltipProps\n}) => {\n  const { cssClassName: tooltipBlockName } = convertPropToCssClassName(\n    blockName,\n  );\n\n  let Content = title;\n  if (typeof title === 'string') {\n    Content = <TooltipText>{title}</TooltipText>;\n  }\n\n  return (\n    <DSPopper\n      blockName={tooltipBlockName}\n      contentComponent={\n        <TooltipContainer\n          {...containerProps}\n          {...otherTooltipProps}\n          className={`tooltip-container--${tooltipType} ${className}`}\n          innerRef={innerRef}\n        >\n          {Content}\n        </TooltipContainer>\n      }\n      delayClose={delayClose}\n      delayOpen={delayOpen}\n      interactionType={interactionType}\n      isOpen={isOpen}\n      onOpen={onOpen}\n      placement={placement}\n      showArrow={tooltipType === TooltipType.TOOLTIP ? showArrow : false}\n      springAnimationComponent={springAnimationComponent}\n      triggerComponent={getComponentFromProps(triggerComponent)}\n      zIndex={zIndex}\n    />\n  );\n};\n\nDSTooltip.propTypes = {\n  containerProps: PropTypes.shape({}),\n  /** Tooltip position */\n  placement: PropTypes.oneOf(positions),\n  /** Tooltip content */\n  title: PropTypes.oneOfType([PropTypes.string, PropTypes.element]),\n  /** Delay to close the tooltip */\n  delayClose: PropTypes.string,\n  /** Delay to open the tooltip */\n  delayOpen: PropTypes.string,\n  /** A type indicating how to open/close the tooltip */\n  interactionType: PropTypes.oneOf(interactions),\n  /** The component that will trigger the open/close interaction */\n  triggerComponent: PropTypes.element,\n  /** Whether the tooltip is visible or not */\n  isOpen: PropTypes.bool,\n  /** Handler when the tooltip opens */\n  onOpen: PropTypes.func,\n  /** Spring animation component */\n  springAnimationComponent: PropTypes.element,\n  /** Whether to show an arrow or not */\n  showArrow: PropTypes.bool,\n  className: PropTypes.string,\n  tooltipType: PropTypes.string,\n  zIndex: PropTypes.number,\n  innerRef: PropTypes.oneOfType([\n    PropTypes.func,\n    PropTypes.shape({ current: PropTypes.any }),\n  ]),\n};\n\nexport { TooltipType, TooltipContainer, TooltipText };\nexport default DSTooltip;\n","export const DEFAULT_DELAY_OPEN = 200;\nexport const DEFAULT_DELAY_CLOSE = 300;\nexport const sizeOptions = ['small', 'medium', 'large', 'x-large'];\n","/* eslint-disable react/display-name */\nimport React, { Component } from 'react';\nimport { aggregatedClasses } from '@elliemae/ds-classnames';\n\nconst blockName = 'input-addon-wrapper';\n\nconst InputWrapper = aggregatedClasses('div')(blockName);\nconst InputAddon = aggregatedClasses('span')(\n  blockName,\n  'addon',\n  ({ left, right, variant, hasError }) => ({\n    left,\n    right,\n    error: hasError,\n    [variant]: variant,\n  }),\n);\n\nexport default class InputAddonWrapper extends Component {\n  constructor(props) {\n    super(props);\n    this.renderAddonComponent = this.renderAddonComponent.bind(this);\n  }\n  static defaultProps = {\n    rightComponents: [],\n    leftComponents: [],\n    containerProps: {},\n  };\n\n  getLeftAddon(components) {\n    return this.renderAddonComponent(true, components);\n  }\n\n  getRightAddon(components) {\n    return this.renderAddonComponent(false, components);\n  }\n\n  renderAddonComponent(left = true, components) {\n    if (!components) return null;\n    if (Array.isArray(components)) {\n      if (!components.filter(comp => comp).length) return null;\n    }\n    const { containerProps, hasError } = this.props;\n    const classProps = left ? { left: true } : { right: true };\n\n    return (\n      <InputAddon classProps={classProps} hasError={hasError} {...containerProps}>\n        {components.map(\n          (component, index) =>\n            component &&\n            React.cloneElement(component, { ...component.props, key: index }),\n        )}\n      </InputAddon>\n    );\n  }\n\n  render() {\n    const {\n      className,\n      innerRef,\n      rightComponents,\n      leftComponents,\n      children,\n      variant,\n      containerProps,\n    } = this.props;\n\n    const InputComponent = React.Children.only(children);\n\n    const { hasError, readOnly, disabled } = InputComponent.props;\n\n    const rightAddon = this.getRightAddon([...rightComponents]);\n    const leftAddon = this.getLeftAddon([...leftComponents]);\n    return (\n      <InputWrapper\n        className={className}\n        classProps={{\n          hasError,\n          readOnly,\n          disabled,\n          variant,\n        }}\n        innerRef={innerRef}\n        {...containerProps}\n      >\n        {leftAddon}\n        {InputComponent}\n        {rightAddon}\n      </InputWrapper>\n    );\n  }\n}\n","export function showEllipsis(width, value) {\n  return String(value).length * 8 > width;\n}\n","/* eslint-disable complexity */\n/* eslint-disable max-lines */\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { omit } from 'lodash';\nimport { aggregatedClasses } from '@elliemae/ds-classnames';\nimport CloseCircle from '@elliemae/ds-icons/CloseCircle';\nimport DSButton from '@elliemae/ds-basic/Button';\nimport DSTooltip from '@elliemae/ds-basic/Tooltip';\nimport InputAddonWrapper from './InputAddonWrapper';\nimport { showEllipsis } from './showEllipsis';\n\nconst blockName = 'input';\nconst Input = aggregatedClasses('input')(\n  blockName,\n  null,\n  ({ clearable, value }) => ({\n    clearable,\n    value,\n  }),\n);\nconst WrapperForTooltipInput = aggregatedClasses('div')(\n  blockName,\n  'tooltip-ref',\n);\nconst InputCustomWrapper = aggregatedClasses('div')(\n  blockName,\n  null,\n  ({ clearable, value }) => ({\n    clearable,\n    value,\n  }),\n);\nconst ClearableButton = aggregatedClasses(DSButton)(blockName, 'clearable');\n\nconst getValidComponents = (component) => component;\n\nconst noop = () => null;\nclass InputImpl extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      width: -1,\n      active: false,\n      showTooltip: false,\n    };\n    this.ref = React.createRef();\n    this.refTooltip = React.createRef();\n  }\n\n  componentDidMount() {\n    this.setWidth();\n    window.addEventListener('resize', this.setWidth);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('resize', this.setWidth);\n  }\n\n  handleOnChange = (e) => {\n    const { onChange, max } = this.props;\n    const { value } = e.target;\n    if (max && value > max) return;\n    onChange(e);\n  };\n\n  handleBlur = (e) => {\n    const { onBlur, onChange, min } = this.props;\n    const { value } = e.target;\n    if (min && value < min && value !== '') {\n      onChange({\n        target: {\n          value: min.toString(),\n        },\n      });\n    }\n    onBlur(e);\n    this.setState({\n      active: false,\n    });\n  };\n\n  handleFocus = (e) => {\n    const { onFocus } = this.props;\n    onFocus(e);\n    this.setState({\n      active: true,\n    });\n  };\n\n  handleMouseEnter = () => {\n    if (!this.state.showTooltip) {\n      this.setState({\n        showTooltip: true,\n      });\n    }\n  };\n\n  handleMouseLeave = () => {\n    if (this.state.showTooltip) {\n      this.setState({\n        showTooltip: false,\n      });\n    }\n  };\n\n  setWidth = () => {\n    const client = this.refTooltip.current.getBoundingClientRect();\n    this.setState({\n      width: client.width,\n    });\n  };\n\n  handleClear() {\n    const { onClear, onChange, clearable } = this.props;\n    if (clearable && onClear) {\n      onClear();\n    } else {\n      onChange({ target: { value: '' } });\n    }\n\n    if ((this.ref || {}).current) this.ref.current.focus();\n  }\n\n  renderClearableComponent() {\n    const { clearable, value, disabled } = this.props;\n    if (disabled) return null;\n    return clearable && value ? (\n      <ClearableButton\n        buttonType=\"text\"\n        data-testid=\"ds-input_clearable-btn\"\n        disabled={disabled}\n        icon={<CloseCircle />}\n        onClick={this.handleClear}\n      />\n    ) : null;\n  }\n\n  render() {\n    const {\n      role,\n      id,\n      isShowElipsisActive,\n      autoFocus,\n      className,\n      name,\n      innerRef,\n      maxLength,\n      minLength,\n      placeholder,\n      leftComponent,\n      rightComponent,\n      disableTooltip,\n      readOnly,\n      disabled,\n      value,\n      onClick,\n      onChange,\n      onKeyDown,\n      onKeyUp,\n      onFocus,\n      onBlur,\n      onPaste,\n      required,\n      type,\n      customInputType,\n      min,\n      max,\n      clearable,\n      onMouseLeave,\n      onMouseOut,\n      style,\n      containerProps,\n      tabIndex,\n      hasError,\n      ...rest\n    } = this.props;\n    const { width, active, showTooltip } = this.state;\n    const rightComponents = [\n      this.renderClearableComponent(),\n      rightComponent,\n    ].filter(getValidComponents);\n    const leftComponents = [leftComponent].filter(getValidComponents);\n\n    const inputProps = {\n      'aria-label': rest['aria-label'],\n      'aria-placeholder': placeholder,\n      'aria-required': required,\n      'aria-multiline': false,\n      'aria-autocomplete': 'none',\n      'data-testid': rest['data-testid'],\n      role,\n      id,\n      ref: this.ref,\n      className,\n      autoFocus,\n      disabled: disabled || readOnly,\n      innerRef,\n      maxLength,\n      minLength,\n      name,\n      onBlur,\n      onChange,\n      onClick,\n      onFocus,\n      onKeyDown,\n      onKeyUp,\n      onPaste,\n      onMouseLeave,\n      disableTooltip,\n      onMouseOut,\n      placeholder,\n      required,\n      type,\n      value,\n      min,\n      max,\n      style,\n      tabIndex,\n      ...containerProps,\n    };\n\n    let InputComponent = (\n      <WrapperForTooltipInput ref={this.refTooltip} style={{ width: '100%' }}>\n        {!customInputType ? (\n          <Input\n            {...omit(inputProps, ['disableTooltip'])}\n            autoComplete=\"off\"\n            clearable={`${clearable}`}\n            onChange={this.handleOnChange}\n            onBlur={this.handleBlur}\n            onFocus={this.handleFocus}\n            // using mouseOver instead of mouseEnter (doesn't trigger on disabled inputs)\n            // https://github.com/facebook/react/issues/4251\n            onMouseOver={this.handleMouseEnter}\n            // using mouseOut instead of mouseLeave (doesn't trigger on disabled inputs)\n            // https://github.com/facebook/react/issues/4251\n            onMouseOut={this.handleMouseLeave}\n            value={value}\n          />\n        ) : (\n          <InputCustomWrapper\n            className={className}\n            {...containerProps}\n            clearable={clearable}\n            value={value}\n          >\n            {customInputType({\n              ...inputProps,\n            })}\n          </InputCustomWrapper>\n        )}\n      </WrapperForTooltipInput>\n    );\n    if (isShowElipsisActive) {\n      InputComponent = (\n        <DSTooltip\n          isOpen={\n            disableTooltip &&\n            showEllipsis(width, value) &&\n            !active &&\n            showTooltip &&\n            width\n          }\n          title={String(value)}\n          zIndex={11}\n          triggerComponent={\n            <WrapperForTooltipInput style={{ width: '100%' }}>\n              {InputComponent}\n            </WrapperForTooltipInput>\n          }\n        />\n      );\n    }\n\n    const renderInput =\n      rightComponents.length || leftComponents.length || clearable ? (\n        <InputAddonWrapper\n          className={className}\n          leftComponents={leftComponents}\n          rightComponents={rightComponents}\n          hasError={hasError}\n          {...containerProps}\n        >\n          {InputComponent}\n        </InputAddonWrapper>\n      ) : (\n        InputComponent\n      );\n\n    return renderInput;\n  }\n}\n\nInputImpl.defaultProps = {\n  onBlur: noop,\n  onFocus: noop,\n};\n\nInputImpl.propTypes = {\n  className: PropTypes.string,\n  customInputType: PropTypes.func,\n  id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  isShowElipsisActive: PropTypes.bool,\n  max: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  min: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  name: PropTypes.string,\n  onBlur: PropTypes.func,\n  onChange: PropTypes.func,\n  onClick: PropTypes.func,\n  onFocus: PropTypes.func,\n  onKeyDown: PropTypes.func,\n  onKeyUp: PropTypes.func,\n  onMouseLeave: PropTypes.func,\n  onMouseOut: PropTypes.func,\n  onPaste: PropTypes.func,\n  onClear: PropTypes.func,\n  placeholder: PropTypes.string,\n  required: PropTypes.bool,\n  role: PropTypes.string,\n  innerRef: PropTypes.oneOfType([\n    PropTypes.func,\n    PropTypes.shape({ current: PropTypes.any }),\n  ]),\n  maxLength: PropTypes.number,\n  minLength: PropTypes.number,\n  leftComponent: PropTypes.element,\n  rightComponent: PropTypes.element,\n  disableTooltip: PropTypes.bool,\n  readOnly: PropTypes.bool,\n  disabled: PropTypes.bool,\n  autoFocus: PropTypes.bool,\n  type: PropTypes.string,\n  clearable: PropTypes.bool,\n  containerProps: PropTypes.object,\n  // eslint-disable-next-line react/forbid-prop-types\n  style: PropTypes.object,\n  tabIndex: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  // eslint-disable-next-line jsdoc/require-returns\n  /**\n   * Should be of type string if using ellipsis tooltip [isShowElipsisActive] prop\n   *\n   * @param props\n   * @param propName\n   * @param componentName\n   */\n  // eslint-disable-next-line consistent-return\n  value(props, propName, componentName) {\n    // eslint-disable-line consistent-return\n    if (!!props.isShowElipsisActive && typeof props[propName] !== 'string') {\n      return new Error(\n        `Invalid prop \\`${propName}\\` of type \\`${typeof props[\n          propName\n        ]}\\` supplied to` +\n          ` \\`${componentName}\\`. Prop \\`value\\` should be of type \\`string\\` if prop \\`isShowElipsisActive\\` is set to \\`true\\`.` +\n          ' Either set `isShowElipsisActive` to `false`, or properly format your `value` prop to `string`.',\n      );\n    }\n  },\n};\n\nexport default InputImpl;\n","import React from 'react';\nimport InputImpl from './InputImpl';\nimport InputAddonWrapper from './InputAddonWrapper';\n\nconst DSInput = ({\n  containerProps = {},\n  id,\n  autoFocus = false,\n  disabled = false,\n  className = '',\n  clearable = false,\n  name = '',\n  maxLength = 255,\n  minLength = 0,\n  fluidWidth = false,\n  disableTooltip = true,\n  placeholder,\n  value = '',\n  hasError = false,\n  readOnly = false,\n  innerRef = null,\n  type = 'text',\n  min = undefined,\n  max = undefined,\n  leftComponent = null,\n  rightComponent = null,\n  required = false,\n  customInputType = null,\n  variant,\n  isShowElipsisActive = true,\n  ...otherProps\n}) => (\n  <InputImpl\n    {...otherProps}\n    aria-label={otherProps['aria-label']}\n    autoFocus={autoFocus}\n    className={`${className} ${disabled ? 'input-disabled' : ''}`}\n    clearable={clearable}\n    containerProps={containerProps}\n    customInputType={customInputType}\n    data-testid={otherProps['data-testid'] || 'ds-input_main-component'}\n    disabled={disabled}\n    disableTooltip={disableTooltip}\n    fluidWidth={fluidWidth}\n    hasError={hasError}\n    id={id}\n    innerRef={innerRef}\n    isShowElipsisActive={isShowElipsisActive}\n    leftComponent={leftComponent}\n    max={max}\n    maxLength={maxLength}\n    min={min}\n    minLength={minLength}\n    name={name}\n    placeholder={placeholder}\n    readOnly={readOnly}\n    required={required}\n    rightComponent={rightComponent}\n    type={type}\n    value={value}\n    variant={variant}\n  />\n);\n\nexport { InputAddonWrapper };\n\nexport default DSInput;\n"],"sourceRoot":""}
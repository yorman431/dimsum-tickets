{"version":3,"sources":["SearchBox/PUI-3638.js","../../../../../src/form/TextBox/DSTextBox.js","../../../src/Search.js","../../../../../src/form/SearchBox/withSearchable.js","../../../../../src/form/SearchBox/SearchBoxImpl.js","../../../../../src/form/SearchBox/DSSearchBox.js"],"names":["clearable","value","placeholder","DSTextBox","containerProps","autoFocus","disabled","maxLength","minLength","fluidWidth","hasError","readOnly","innerRef","type","min","max","leftComponent","rightComponent","required","variant","otherProps","aria-label","role","props","PropTypes","describe","DSTextBoxWithSchema","createIcon","paths","height","width","WrappedComponent","Searchable","debounce","React","this","onKeyUp","searchOnEnter","key","e","onSearch","property","clearOnSearch","setState","query","target","onChange","rest","buttonRef","prevPropValue","nextProps","string","SearchBoxImpl","className","disableButton","showIcon","style","onBlur","buttonType","icon","iconSize","onClick","borderColor","borderLeft","bool","withSearchable","DSSearchBox","searchBoxProps","SearchBoxWithSchema"],"mappings":"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","file":"static/js/54.bc2954ea.chunk.js","sourcesContent":["import React from 'react';\nimport DSTextBox from '@elliemae/ds-basic/form/TextBox';\nimport DSSearchBox from '@elliemae/ds-basic/form/SearchBox';\n\nexport default () => {\n  return (\n    <div>\n      <DSTextBox clearable value=\"Textbox with clearable\" />\n      <DSSearchBox placeholder=\"Search without clearable\" />\n      <DSSearchBox\n        placeholder=\"Search with clearable (doesn't work)\"\n        clearable\n      />\n    </div>\n  );\n};\n","import React from 'react';\nimport { PropTypes, describe } from 'react-desc';\nimport DSInput from '../Input';\n\nconst DSTextBox = ({\n  containerProps = {},\n  autoFocus = false,\n  disabled = false,\n  maxLength = 255,\n  minLength = 0,\n  fluidWidth = false,\n  placeholder,\n  value = '',\n  hasError = false,\n  readOnly = false,\n  innerRef = null,\n  type = 'text',\n  min = undefined,\n  max = undefined,\n  clearable = false,\n  leftComponent = null,\n  rightComponent = null,\n  required = false,\n  variant,\n  ...otherProps\n}) => (\n  <DSInput\n    {...otherProps}\n    aria-label={otherProps['aria-label'] || 'Text Box'}\n    autoFocus={autoFocus}\n    clearable={clearable}\n    containerProps={containerProps}\n    disabled={disabled}\n    fluidWidth={fluidWidth}\n    hasError={hasError}\n    innerRef={innerRef}\n    leftComponent={leftComponent}\n    max={max}\n    maxLength={maxLength}\n    min={min}\n    minLength={minLength}\n    placeholder={placeholder}\n    readOnly={readOnly}\n    required={required}\n    rightComponent={rightComponent}\n    role=\"textbox\"\n    type={type}\n    value={value}\n    variant={variant}\n  />\n);\n\nconst props = {\n  /** inject props at textbox wrapper */\n  containerProps: PropTypes.shape({}).description(\n    'inject props at textbox wrapper',\n  ),\n  /**\n   * Whether the text box uses auto focus or not\n   */\n  autoFocus: PropTypes.bool.description(\n    'Whether the text box uses auto focus or not',\n  ),\n  /**\n   * Whether the text box is disabled or not\n   */\n  disabled: PropTypes.bool.description(\n    'Whether the text box is disabled or not',\n  ),\n  /**\n   * Max length for the text box\n   */\n  maxLength: PropTypes.number.description('Max length for the text box'),\n  /**\n   * Min length for the text box\n   */\n  minLength: PropTypes.number.description('Min length for the text box'),\n  /**\n   * Make the content of the text box fit the container or not\n   */\n  fluidWidth: PropTypes.bool.description(\n    'Make the content of the text box fit the container or not',\n  ),\n  /**\n   * Placeholder for the text box\n   */\n  placeholder: PropTypes.string.description('Placeholder for the text box'),\n  /**\n   * Default value once the component is initialized\n   */\n  value: PropTypes.string.description(\n    'Default value once the component is initialized',\n  ),\n  /**\n   * Whether the text box has error or not\n   */\n  hasError: PropTypes.bool.description('Whether the text box has error or not'),\n  /**\n   * Whether the text box is read only or not\n   */\n  readOnly: PropTypes.bool.description(\n    'Whether the text box is read only or not',\n  ),\n  /** html min prop for input */\n  min: PropTypes.number.description('html min prop for input'),\n  /** html max prop for input */\n  max: PropTypes.number.description('html max prop for input'),\n  /**\n   * Whether the text box is clearable or not\n   */\n  clearable: PropTypes.bool.description(\n    'Whether the text box is clearable or not',\n  ),\n  /**\n   * Component to be added at the left side of the text box\n   */\n  leftComponent: PropTypes.element.description(\n    'Component to be added at the left side of the text box',\n  ),\n  /**\n   * Component to be added at the right side of the text box\n   */\n  rightComponent: PropTypes.element.description(\n    'Component to be added at the right side of the text box',\n  ),\n  /**\n   * Whether the text box is required or not\n   */\n  required: PropTypes.bool.description(\n    'Whether the text box is required or not',\n  ),\n  /**\n   * [\n   *  'variant-default',\n   *  'variant-focus',\n   *  'variant-active',\n   *  'variant-disabled',\n   * ]\n   */\n  variant: PropTypes.string.description(\n    \"variant-default','variant-focus','variant-active','variant-disabled'\",\n  ),\n  /** html input type */\n  type: PropTypes.string.description('html input type'),\n  /** Internal ref */\n  innerRef: PropTypes.oneOfType([PropTypes.func, PropTypes.object]).description(\n    'internal ref',\n  ),\n};\n\nDSTextBox.propTypes = props;\n\nconst DSTextBoxWithSchema = describe(DSTextBox);\n\nDSTextBoxWithSchema.propTypes = props;\n\nexport default DSTextBox;\nexport { DSTextBoxWithSchema };\n","/* eslint-disable */\nimport createIcon from './utils/createIcon';\n\nexport default createIcon({\n  paths: [\n    'M18.869 19.162l-5.943-6.484c1.339-1.401 2.075-3.233 2.075-5.178 0-2.003-.78-3.887-2.197-5.303S9.504 0 7.501 0 3.614.78 2.198 2.197.001 5.497.001 7.5s.78 3.887 2.197 5.303S5.498 15 7.501 15c1.726 0 3.362-.579 4.688-1.645l5.943 6.483a.497.497 0 0 0 .369.162.4997.4997 0 0 0 .369-.837l-.001-.001zM1 7.5C1 3.916 3.916 1 7.5 1S14 3.916 14 7.5 11.084 14 7.5 14 1 11.084 1 7.5z',\n  ],\n  height: 20,\n  width: 20,\n});\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { debounce } from '@elliemae/ds-utilities/utils';\n\nconst withSearchable = (WrappedComponent) => {\n  class Searchable extends Component {\n    debouncedSearch = debounce(this.handleSearch, 200);\n\n    constructor(props) {\n      super(props);\n      this.state = {\n        value: props.value,\n      };\n      this.handleSearch = this.handleSearch.bind(this);\n      this.handleKeyUp = this.handleKeyUp.bind(this);\n      this.handleChange = this.handleChange.bind(this);\n      this.buttonRef = React.createRef();\n    }\n\n    static getDerivedStateFromProps(nextProps, { prevPropValue }) {\n      if (nextProps.value !== prevPropValue) {\n        return {\n          value: nextProps.value,\n          prevPropValue: nextProps.value,\n        };\n      }\n      return null;\n    }\n\n    handleKeyUp(e) {\n      const { onKeyUp, searchOnEnter } = this.props;\n      const { key } = e;\n      if (searchOnEnter && key === 'Enter') {\n        this.handleSearch();\n      }\n      onKeyUp(e);\n    }\n\n    handleSearch() {\n      const { onSearch, property, clearOnSearch, searchOnEnter } = this.props;\n      const { value } = this.state;\n\n      if (clearOnSearch) this.setState({ value: '' });\n      if (searchOnEnter && !value) return;\n      onSearch({\n        query: { [property]: value },\n        property,\n        value,\n      });\n    }\n\n    handleChange({ target }) {\n      const { value } = target;\n      const { searchOnEnter, onChange } = this.props;\n      onChange(value);\n      this.setState({ value }, () => {\n        if (!searchOnEnter) this.debouncedSearch();\n      });\n    }\n\n    render() {\n      const { value } = this.state;\n      const { containerProps, ...rest } = this.props;\n\n      return (\n        <WrappedComponent\n          {...rest}\n          buttonRef={this.buttonRef}\n          containerProps={containerProps}\n          onChange={this.handleChange}\n          onKeyUp={this.handleKeyUp}\n          onSearch={this.handleSearch}\n          value={value}\n        />\n      );\n    }\n  }\n\n  Searchable.defaultProps = {\n    onChange: () => null,\n    onSearch: () => null,\n    onKeyUp: () => null,\n    property: 'all',\n    searchOnEnter: true,\n    clearOnSearch: false,\n    containerProps: {},\n  };\n\n  Searchable.propTypes = {\n    containerProps: PropTypes.shape({}),\n    onChange: PropTypes.func,\n    onSearch: PropTypes.func,\n    onKeyUp: PropTypes.func,\n    property: PropTypes.string,\n    searchOnEnter: PropTypes.bool,\n    clearOnSearch: PropTypes.bool,\n    value: PropTypes.string,\n  };\n\n  return Searchable;\n};\n\nexport default withSearchable;\n","/* eslint-disable react/no-unused-state */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Search from '@elliemae/ds-icons/Search';\nimport DSButton from '../../Button';\nimport DSTextBox from '../TextBox';\nimport withSearchable from './withSearchable';\n\nconst SearchBoxImpl = ({\n  containerProps,\n  placeholder,\n  className,\n  disabled,\n  disableButton,\n  innerRef,\n  showIcon,\n  style,\n  onChange,\n  onKeyUp,\n  onSearch,\n  onBlur,\n  readOnly,\n  value,\n  clearable,\n}) => (\n  <DSTextBox\n    className={className}\n    clearable={clearable}\n    containerProps={containerProps}\n    disabled={disabled}\n    innerRef={innerRef}\n    onChange={onChange}\n    onKeyUp={onKeyUp}\n    onBlur={onBlur}\n    placeholder={placeholder}\n    readOnly={readOnly}\n    rightComponent={\n      showIcon && (\n        <DSButton\n          disabled={disabled || disableButton}\n          buttonType=\"text\"\n          icon={<Search />}\n          iconSize=\"s\"\n          onClick={onSearch}\n          type=\"secondary\"\n          style={{ borderColor: '#A9B1BE', borderLeft: 'none' }}\n        />\n      )\n    }\n    style={style}\n    value={value}\n  />\n);\n\nSearchBoxImpl.propTypes = {\n  containerProps: PropTypes.shape({}),\n  className: PropTypes.string,\n  innerRef: PropTypes.any,\n  style: PropTypes.objectOf(PropTypes.string),\n  placeholder: PropTypes.string,\n  onKeyUp: PropTypes.func,\n  onSearch: PropTypes.func,\n  onChange: PropTypes.func,\n  onBlur: PropTypes.func,\n  value: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.number,\n    PropTypes.object,\n  ]),\n  showIcon: PropTypes.bool,\n  disabled: PropTypes.bool,\n  disableButton: PropTypes.bool,\n  readOnly: PropTypes.bool,\n  clearable: PropTypes.bool,\n};\n\nexport default withSearchable(SearchBoxImpl);\n","import React from 'react';\nimport { describe, PropTypes } from 'react-desc';\nimport SearchBoxImpl from './SearchBoxImpl';\n\nconst DSSearchBox = ({\n  containerProps = {},\n  innerRef = undefined,\n  className = '',\n  disabled = false,\n  disableButton = false,\n  style = {},\n  property = 'all',\n  placeholder = 'Search all', // todo: i18nize this\n  searchOnEnter = true,\n  clearOnSearch = false,\n  onKeyUp = () => null,\n  onSearch = () => null,\n  onChange = () => null,\n  onBlur = () => null,\n  readOnly = false,\n  value = undefined,\n  showIcon = true,\n}) => (\n  <SearchBoxImpl\n    className={className}\n    clearOnSearch={clearOnSearch}\n    containerProps={containerProps}\n    disabled={disabled}\n    disableButton={disableButton}\n    innerRef={innerRef}\n    onKeyUp={onKeyUp}\n    onSearch={onSearch}\n    onChange={onChange}\n    onBlur={onBlur}\n    placeholder={placeholder}\n    property={property}\n    readOnly={readOnly}\n    searchOnEnter={searchOnEnter}\n    showIcon={showIcon}\n    style={style}\n    value={value}\n  />\n);\n\nconst searchBoxProps = {\n  containerProps: PropTypes.object.description(\n    'Set of Properties attached to the main container',\n  ),\n  className: PropTypes.string.description('html class attribute'),\n  innerRef: PropTypes.object.description('ref to the components container'),\n  style: PropTypes.object.description('Set style to the search box'),\n  property: PropTypes.string\n    .description('search property')\n    .defaultValue('property'),\n  placeholder: PropTypes.string\n    .description('Placeholder for the search box')\n    .defaultValue('Search All'),\n  searchOnEnter: PropTypes.bool\n    .description('Whether to trigger the search once the enter is pressed')\n    .defaultValue(true),\n  clearOnSearch: PropTypes.bool\n    .description('Whether to clear the input on search')\n    .defaultValue(false),\n  onKeyUp: PropTypes.func.description(\n    'function triggered once in the search box a keyboard key is released',\n  ),\n  onSearch: PropTypes.func.description(\n    'function triggered once the search icon is clicked',\n  ),\n  onChange: PropTypes.func.description('function that is triggered on change'),\n  onBlur: PropTypes.func.description('Function that is triggered on blur'),\n  value: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.number,\n    PropTypes.object,\n  ]).description('searchbox input value'),\n  showIcon: PropTypes.bool\n    .description('Whether to show an icon or not')\n    .defaultValue(true),\n  disabled: PropTypes.bool\n    .description('Disables the search input and button')\n    .defaultValue(false),\n  disableButton: PropTypes.bool\n    .description('Disables the search button')\n    .defaultValue(false),\n  readOnly: PropTypes.bool\n    .description('whether the input is read only or not')\n    .defaultValue(false),\n};\n\nDSSearchBox.propTypes = searchBoxProps;\n\nconst SearchBoxWithSchema = describe(DSSearchBox);\nSearchBoxWithSchema.propTypes = searchBoxProps;\n\nexport { SearchBoxWithSchema };\nexport default DSSearchBox;\n"],"sourceRoot":""}
{"version":3,"sources":["utils/randomTreeNodes.js","TreeView/customHooks/useTreeInitialSelectionState.js","TreeView/AutoScroll/MultiSelect.js"],"names":["randomEntity","parentID","id","uuidv4","isGroup","random","children","randomEntities","undefined","name","type","parent","count","Array","fill","map","randomEntityNoChildren","randomEntitiesNoChildren","randomEntityMoreGroup","randomEntitiesMoreGroups","useTreeInitialSelectionState","allTreeItems","items","useState","selectionHash","setSelectionHash","useEffect","initialState","selectedItems","isArray","length","reduce","acc","item","evalParent","hash","parentId","parents","nodes","onItemClick","console","log","Overview","data","ref","useRef","toggleExpandAll","current","actions","expandAll","fluid","instanceRef","groupIcon","isMultiSelect","itemIcon","selection","plugins","SelectablePluginTree"],"mappings":"uGAAA,sVAGaA,EAAe,SAACC,GAC3B,IAAMC,EAAKC,cACLC,EAAUC,iBAAO,EAAG,GAAK,EACzBC,EAAWF,EACbG,EAAeF,iBAAO,EAAG,GAAIH,QAC7BM,EACJ,MAAO,CACLN,KACAO,KAAK,GAAD,OAAKJ,iBAAO,EAAG,GAAK,EAAI,WAAa,WAArC,YAAmDH,GACvDQ,KAAMN,EAAU,QAAU,SAC1BO,OAAQV,EACRK,aAGSC,EAAiB,SAACK,EAAOX,GAAR,OAC5B,IAAIY,MAAMD,GAAOE,KAAK,GAAGC,KAAI,WAC3B,OAAOf,EAAaC,OAIXe,EAAyB,WACpC,IAAMd,EAAKC,cACLC,EAAUC,iBAAO,EAAG,GAAK,EAC3BC,EAAWF,EACXG,EAAeF,iBAAO,EAAG,GAAIH,QAC7BM,EAEJ,OADIH,iBAAO,EAAG,GAAK,IAAGC,EAAW,IAC1B,CACLJ,KACAO,KAAK,GAAD,OAAKJ,iBAAO,EAAG,GAAK,EAAI,WAAa,WAArC,YAAmDH,GACvDQ,KAAMN,EAAU,QAAU,SAC1BE,WACAF,YAISa,EAA2B,SAACL,GAAD,OACtC,IAAIC,MAAMD,GAAOE,KAAK,GAAGC,KAAI,WAC3B,OAAOC,QAIEE,EAAwB,WACnC,IAAMhB,EAAKC,cACLC,EAAUC,iBAAO,EAAG,GAAK,EAC3BC,EAAWF,EACXG,EAAeF,iBAAO,EAAG,GAAIH,QAC7BM,EAEJ,OADIH,iBAAO,EAAG,GAAK,IAAGC,EAAW,IAC1B,CACLJ,KACAO,KAAK,GAAD,OAAKJ,iBAAO,EAAG,GAAK,EAAI,WAAa,WAArC,YAAmDH,GACvDQ,KAAMN,EAAU,QAAU,SAC1BE,WACAF,YAISe,EAA2B,SAACP,GAAD,OACtC,IAAIC,MAAMD,GAAOE,KAAK,GAAGC,KAAI,WAC3B,OAAOG,S,wICrDEE,EAA+B,SAC1CC,GAEI,IADJC,EACG,uDADK,GACL,EACuCC,mBAAS,IADhD,mBACIC,EADJ,KACmBC,EADnB,KA0BH,OAvBAC,qBAAU,WACR,IAAIC,EAAe,GACbC,EAAgBf,MAAMgB,QAAQP,GAASA,EAAQ,CAACA,GAClDM,EAAcE,SAChBH,EAAeC,EAAcG,QAC3B,SAACC,EAAKC,GAEJ,OADAD,EAAIV,MAAJ,2BAAiBU,EAAIV,OAArB,IAA4B,CAACW,EAAK/B,KAAK,IACnC+B,EAAKtB,SAAWqB,EAAIV,MAAMW,EAAKtB,QAC1BuB,qBAAW,CAChBC,KAAMd,EACNO,gBACAI,MACAI,SAAUH,EAAKtB,SAGZqB,IAET,CAAEV,MAAO,GAAIe,QAAS,MAG1BZ,EAAiBE,EAAaL,SAC7B,CAACD,EAAcC,IAEXE,I,2HCzBHc,EAAQ/B,yBAAe,IAEvBgC,EAAc,SAACN,GACnBO,QAAQC,IAAI,IAAKR,IAyCJS,UAtCE,WAAO,IAAD,EACNnB,mBAASe,GAAjBK,EADc,oBAEfnB,EAAgBJ,uCAA6BkB,EAAO,CACxDA,EAAM,MAEFM,EAAMC,iBAAO,MAYnB,OAJAnB,qBAAU,YANQ,WAChB,IAAMoB,EAAkBF,EAAIG,QAAQC,QAAQF,gBAC5CN,QAAQC,IAAI,MAAOG,EAAIG,SACnBD,GAAiBA,IAIrBG,KACC,IAGD,kBAAC,IAAD,CACEN,KAAMA,EACNO,OAAK,EACLC,YAAaP,EACbQ,UAAW,kBAAC,IAAD,MACXC,eAAa,EACbC,SAAU,kBAAC,IAAD,MACVC,UAAW/B,EAGXe,YAAaA,EACbiB,QAAS,CAACC","file":"static/js/62.c22efb99.chunk.js","sourcesContent":["import { random } from 'lodash';\nimport { v4 as uuidv4 } from 'uuid';\n\nexport const randomEntity = (parentID) => {\n  const id = uuidv4();\n  const isGroup = random(0, 4) < 1;\n  const children = isGroup\n    ? randomEntities(random(0, 5), id)\n    : undefined;\n  return {\n    id,\n    name: `${random(0, 1) > 0 ? 'John Doe' : 'Jon Snow'} ${id}`,\n    type: isGroup ? 'group' : 'single',\n    parent: parentID,\n    children,\n  };\n};\nexport const randomEntities = (count, parentID) =>\n  new Array(count).fill(0).map(() => {\n    return randomEntity(parentID);\n  });\n\n/** With increased chances of getting no children group */\nexport const randomEntityNoChildren = () => {\n  const id = uuidv4();\n  const isGroup = random(0, 4) < 2;\n  let children = isGroup\n    ? randomEntities(random(0, 2), id)\n    : undefined;\n  if (random(0, 4) < 2) children = [];\n  return {\n    id,\n    name: `${random(0, 1) > 0 ? 'John Doe' : 'Jon Snow'} ${id}`,\n    type: isGroup ? 'group' : 'single',\n    children,\n    isGroup,\n  };\n};\n/** With increased chances of getting no children groups */\nexport const randomEntitiesNoChildren = (count) =>\n  new Array(count).fill(0).map(() => {\n    return randomEntityNoChildren();\n  });\n\n/** With increased chances of getting a group */\nexport const randomEntityMoreGroup = () => {\n  const id = uuidv4();\n  const isGroup = random(0, 4) < 3;\n  let children = isGroup\n    ? randomEntities(random(0, 2), id)\n    : undefined;\n  if (random(0, 4) < 2) children = [];\n  return {\n    id,\n    name: `${random(0, 1) > 0 ? 'John Doe' : 'Jon Snow'} ${id}`,\n    type: isGroup ? 'group' : 'single',\n    children,\n    isGroup,\n  };\n};\n/** With increased chances of getting more groups */\nexport const randomEntitiesMoreGroups = (count) =>\n  new Array(count).fill(0).map(() => {\n    return randomEntityMoreGroup();\n  });\n","import { useEffect, useState } from 'react';\nimport { evalParent } from '../../utils/tree.util';\n\n/**\n * Sets the initial selection state\n *\n * @param {object} allTreeItems hash object with all tree elements\n * @param {Array} items The initially selected items. Could be an array for multiSelect or a single object\n * @returns {object} The selections hash object, each key (id) representing a selected tree element\n */\nexport const useTreeInitialSelectionState = (\n  allTreeItems,\n  items = [],\n) => {\n  const [selectionHash, setSelectionHash] = useState({});\n\n  useEffect(() => {\n    let initialState = {};\n    const selectedItems = Array.isArray(items) ? items : [items];\n    if (selectedItems.length) {\n      initialState = selectedItems.reduce(\n        (acc, item) => {\n          acc.items = { ...acc.items, [item.id]: true };\n          if (item.parent && !acc.items[item.parent]) {\n            return evalParent({\n              hash: allTreeItems,\n              selectedItems,\n              acc,\n              parentId: item.parent,\n            });\n          }\n          return acc;\n        },\n        { items: [], parents: [] },\n      );\n    }\n    setSelectionHash(initialState.items);\n  }, [allTreeItems, items]);\n\n  return selectionHash;\n};\n","import React, { useState, useRef, useEffect } from 'react';\nimport {\n  TreeView,\n  SelectablePluginTree,\n  // TreeDndPlugin,\n  // TreeToolbarPlugin\n} from '@elliemae/ds-treeview';\nimport Folder from '@elliemae/ds-icons/Folder';\nimport FilePdf from '@elliemae/ds-icons/FilePdf';\nimport { useTreeInitialSelectionState } from '../customHooks/useTreeInitialSelectionState';\nimport { randomEntities } from '../../utils/randomTreeNodes';\n// import { TooltipTextProvider } from \"@elliemae/ds-basic/TruncatedTooltipText\";\n// import renderToolbar from \"./renderToolbar\";\n\nconst nodes = randomEntities(50);\n\nconst onItemClick = (item) => {\n  console.log(111, item);\n};\n\nconst Overview = () => {\n  const [data] = useState(nodes);\n  const selectionHash = useTreeInitialSelectionState(nodes, [\n    nodes[40],\n  ]);\n  const ref = useRef(null);\n\n  const expandAll = () => {\n    const toggleExpandAll = ref.current.actions.toggleExpandAll;\n    console.log('REF', ref.current);\n    if (toggleExpandAll) toggleExpandAll();\n  };\n\n  useEffect(() => {\n    expandAll();\n  }, []);\n\n  return (\n    <TreeView\n      data={data}\n      fluid\n      instanceRef={ref}\n      groupIcon={<Folder />}\n      isMultiSelect\n      itemIcon={<FilePdf />}\n      selection={selectionHash}\n      // labelRenderer={value => value}\n      // onOrderChange={setData}\n      onItemClick={onItemClick}\n      plugins={[SelectablePluginTree]}\n      // renderToolbar={renderToolbar}\n      // showChildrenAmount\n      // sortable\n      // width={400}\n    />\n  );\n};\n\nexport default Overview;\n"],"sourceRoot":""}
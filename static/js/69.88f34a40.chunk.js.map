{"version":3,"sources":["DataGrid/customHooks/useInputSearch.js","DataGrid/customHooks/useFilters.js"],"names":["useInputSearch","initialSearchText","filters","setFilters","inputProps","onSearch","searchOnKeyUp","useState","updateSearch","setUpdateSearch","searchInputValue","setSearchInputValue","reRenderSearch","value","clearSearch","handleSearch","useCallback","key","trim","onKeyUp","target","searchProps","shouldUpdateSearch","useFilters","data","baseFilter","label","group","operator","val","unionBy","disabled","length","onRemoveFilter","_","filter","f","some","onClearFilters","renderFilterToolbar","buttonType","labelText","onClick"],"mappings":"qLAaaA,EAAiB,SAAC,GAOxB,IAAD,IANJC,yBAMI,MANgB,GAMhB,MALJC,eAKI,MALM,GAKN,EAJJC,EAII,EAJJA,WAII,IAHJC,kBAGI,MAHS,GAGT,EAFJC,EAEI,EAFJA,SAEI,IADJC,qBACI,WACoCC,mBAAS,GAD7C,mBACGC,EADH,KACiBC,EADjB,OAE4CF,mBAC9CN,GAHE,mBAEGS,EAFH,KAEqBC,EAFrB,KAKEC,EAAiB,kBAAMH,GAAgB,SAACI,GAAD,OAAWA,EAAQ,MAC1DC,EAAc,kBAAMH,EAAoBV,IACxCc,EAAeC,uBACnB,YAAqB,IAAlBH,EAAiB,EAAjBA,MAAOI,EAAU,EAAVA,IACHJ,EAAMK,QAIXb,EAASQ,GACLP,EAAeK,EAAoBE,GAClCC,KALS,cAARG,GAAqBd,EAAWD,KAOxC,CAACM,IAEGW,EAAUH,uBACd,YAAiC,IAApBH,EAAmB,EAA7BO,OAAUP,MAASI,EAAU,EAAVA,IACpB,GAAY,UAARA,EAAiBL,SAChB,IAAKN,EAAe,OACzBS,EAAa,CAAEF,QAAOI,UAExB,CAACF,IAGH,MAAO,CACLM,YAAY,2BACPjB,GADM,IAETe,UACAd,SAAUU,EACVF,MAAOH,IAETY,mBAAoBd,EACpBA,aAAcI,EACdE,iB,gJCpDSS,EAAa,SACxBC,GAEI,IADJC,EACG,uDADU,CAAEC,MAAO,OAAQC,MAAO,OAAQC,SAAU,YACpD,EAC2BrB,mBAAS,IADpC,mBACIL,EADJ,KACaC,EADb,KAEGE,EAAW,SAACwB,GAChB,IAAMhB,EAAuB,kBAARgB,EAAmBA,EAAMA,EAAIhB,MAClDV,EAAW2B,kBAAQ5B,EAAS,CAAC,2BAAKuB,GAAN,IAAkBZ,WAAU,WAJvD,EAMgDb,yBAAe,CAChEE,UACAC,aACAE,WACAD,WAAY,CAAE2B,UAAWP,EAAKQ,UAJxBX,EANL,EAMKA,YAAaP,EANlB,EAMkBA,YAAaN,EAN/B,EAM+BA,aAM5ByB,EAAiBjB,uBACrB,SAACkB,EAAGL,GACF1B,EAAWD,EAAQiC,QAAO,SAACC,GAAD,OAAOA,EAAEvB,QAAUgB,MACzC3B,EAAQmC,MAAK,SAACD,GAAD,OAAOA,EAAEvB,QAAUQ,EAAYR,UAC9CC,IAEFN,MAEF,CAACM,EAAaZ,EAASmB,EAAYR,MAAOL,IAEtC8B,EAAiBtB,uBAAY,WACjCb,EAAW,IACXW,IACAN,MACC,CAACM,EAAaN,IACX+B,EAAsBvB,uBAC1B,kBACE,kBAAC,IAAD,CACEwB,WAAW,OACXC,UAAU,QACVC,QAASJ,MAGb,CAACA,IAEH,MAAO,CACLpC,UACA+B,iBACAK,iBACAC,sBACAlC","file":"static/js/69.88f34a40.chunk.js","sourcesContent":["/* eslint-disable react-hooks/exhaustive-deps */\nimport { useState, useCallback } from 'react';\n\n/**\n * Provides reusable search functionality\n *\n * @param data.initialSearchText\n * @param data.filters\n * @param data.setFilters\n * @param data.inputProps\n * @param data.onSearch\n * @param data.searchOnKeyUp\n */\nexport const useInputSearch = ({\n  initialSearchText = '',\n  filters = [],\n  setFilters,\n  inputProps = {},\n  onSearch,\n  searchOnKeyUp = false,\n}) => {\n  const [updateSearch, setUpdateSearch] = useState(0); // Allows to update filters in real time\n  const [searchInputValue, setSearchInputValue] = useState(\n    initialSearchText,\n  );\n  const reRenderSearch = () => setUpdateSearch((value) => value + 1);\n  const clearSearch = () => setSearchInputValue(initialSearchText);\n  const handleSearch = useCallback(\n    ({ value, key }) => {\n      if (!value.trim()) {\n        if (key === 'Backspace') setFilters(filters);\n        return;\n      }\n      onSearch(value);\n      if (searchOnKeyUp) setSearchInputValue(value);\n      else clearSearch();\n    },\n    [updateSearch],\n  );\n  const onKeyUp = useCallback(\n    ({ target: { value }, key }) => {\n      if (key === 'Enter') reRenderSearch();\n      else if (!searchOnKeyUp) return;\n      handleSearch({ value, key });\n    },\n    [handleSearch],\n  );\n\n  return {\n    searchProps: {\n      ...inputProps,\n      onKeyUp,\n      onSearch: handleSearch,\n      value: searchInputValue,\n    },\n    shouldUpdateSearch: updateSearch,\n    updateSearch: reRenderSearch,\n    clearSearch,\n  };\n};\n","import React, { useState, useCallback } from 'react';\nimport { unionBy } from 'lodash';\nimport DSButton from '@elliemae/ds-basic/Button';\nimport { useInputSearch } from './useInputSearch';\n\nexport const useFilters = (\n  data,\n  baseFilter = { label: 'Name', group: 'name', operator: 'contains' },\n) => {\n  const [filters, setFilters] = useState([]);\n  const onSearch = (val) => {\n    const value = typeof val === 'string' ? val : val.value; // dimsum's API is inconsistent\n    setFilters(unionBy(filters, [{ ...baseFilter, value }], 'value'));\n  };\n  const { searchProps, clearSearch, updateSearch } = useInputSearch({\n    filters,\n    setFilters,\n    onSearch,\n    inputProps: { disabled: !data.length },\n  });\n  const onRemoveFilter = useCallback(\n    (_, val) => {\n      setFilters(filters.filter((f) => f.value !== val));\n      if (filters.some((f) => f.value === searchProps.value)) {\n        clearSearch();\n      }\n      updateSearch();\n    },\n    [clearSearch, filters, searchProps.value, updateSearch],\n  );\n  const onClearFilters = useCallback(() => {\n    setFilters([]);\n    clearSearch();\n    updateSearch();\n  }, [clearSearch, updateSearch]);\n  const renderFilterToolbar = useCallback(\n    () => (\n      <DSButton\n        buttonType=\"text\"\n        labelText=\"CLEAR\"\n        onClick={onClearFilters}\n      />\n    ),\n    [onClearFilters],\n  );\n  return {\n    filters,\n    onRemoveFilter,\n    onClearFilters,\n    renderFilterToolbar,\n    onSearch,\n  };\n};\n"],"sourceRoot":""}
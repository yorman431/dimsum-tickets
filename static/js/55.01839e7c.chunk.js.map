{"version":3,"sources":["../../../../src/hooks/useExecutionTimer.tsx","../../../src/usePopoverProviderState.tsx","../../../../src/components/types.tsx","../../../src/LoanProducts.tsx","../../../../src/components/blocks.tsx","../../../src/DSCardNavigation.tsx","NavigationCard/NGENY-23695.js","../../../src/MoreOptionsVert.tsx","../../../src/TooltipTextProvider.tsx","../../../src/DSTruncatedTooltipText.tsx"],"names":["startFn","cleanFn","delayTime","startTimer","useRef","closeTimer","args","clearTimeout","setTimeout","initialState","reference","visible","value","options","delay","triggerRef","useState","tooltipState","setTooltipState","useExecutionTimer","state","showTooltip","hideTooltip","handleHideTooltip","useEffect","window","throttle","show","e","target","hide","CardNavigationTypes","BORROWER","FINANCIAL","LOAN","REGULATORY","CardNavigationTypesValues","Object","createIcon","paths","height","width","blockName","CardNavigationBoxWrapper","aggregatedClasses","CardNavigationIcon","type","CardNavigationContent","borderBottom","CardNavigationContentTitleWrapper","CardNavigationCentralContent","CardNavigationContentTitle","CardNavigationContentDescription","CardNavigationActions","CardNavigationAction","DSCardNavigation","containerProps","title","description","Icon","actions","rest","role","tabIndex","classProps","size","data-testid","icon","aria-label","otherProps","key","buttonType","BUTTON_TYPE","BUTTON_SIZE","L","LoanProducts","props","PropTypes","onClick","func","describe","DSCardNavigationWithSchema","Basic","style","display","flexDirection","flexWrap","map","margin","toUpperCase","console","log","TruncatedTooltipContext","React","Provider","TooltipTextProvider","children","tooltipDelay","placement","tooltipOptions","usePopoverProviderState","zIndex","setZIndex","useMemo","boundaries","showArrow","content","referenceEl","pointerEvents","Text","styled","DSTruncatedTooltipText","otherTextProps","tooltipContext","useContext","handlers","onMouseEnter","onMouseLeave","truncatedTooltipTextProps","tooltipPlacement","positions","undefined","TruncatedTooltipTextWithSchema"],"mappings":"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","file":"static/js/55.01839e7c.chunk.js","sourcesContent":["import { useRef } from 'react';\n\nexport default function useExecutionDelay(startFn, cleanFn, delayTime) {\n  const startTimer = useRef();\n  const closeTimer = useRef();\n\n  const startFunction = (...args) => {\n    clearTimeout(closeTimer.current);\n    startTimer.current = setTimeout(() => startFn(...args), delayTime);\n  };\n\n  const cleanFunction = (...args) => {\n    clearTimeout(startTimer.current);\n    closeTimer.current = setTimeout(() => cleanFn(...args), 30);\n  };\n  return [startFunction, cleanFunction];\n}\n","import { useState, useEffect, useRef } from 'react';\nimport { throttle } from 'lodash';\nimport { useExecutionTimer } from '@elliemae/ds-utilities/hooks';\n\nfunction usePopoverProviderState({\n  initialState = {\n    reference: null,\n    visible: false,\n    value: '',\n    options: {},\n  },\n  delay,\n}) {\n  const triggerRef = useRef();\n  const [tooltipState, setTooltipState] = useState(initialState);\n\n  const show = (state) => {\n    setTooltipState((prevState) => ({\n      ...prevState,\n      ...state,\n      visible: true,\n    }));\n  };\n  const hide = (state) => {\n    setTooltipState((prevState) => ({\n      ...prevState,\n      ...state,\n      visible: false,\n    }));\n  };\n\n  const [showTooltip, hideTooltip] = useExecutionTimer(show, hide, delay);\n\n  const handleShowTooltip = (state, e) => {\n    triggerRef.current = e.target;\n    showTooltip({ ...state, reference: e.target });\n  };\n\n  const handleHideTooltip = (state) => {\n    hideTooltip(state);\n  };\n\n  useEffect(() => {\n    window.addEventListener('scroll', throttle(handleHideTooltip, 300), true);\n    window.addEventListener('click', handleHideTooltip, true);\n    return () => {\n      window.removeEventListener(\n        'scroll',\n        throttle(handleHideTooltip, 300),\n        true,\n      );\n      window.addEventListener('click', handleHideTooltip, true);\n    };\n  }, [tooltipState.reference]);\n\n  return {\n    show: handleShowTooltip,\n    hide: handleHideTooltip,\n    state: tooltipState,\n  };\n}\n\nexport default usePopoverProviderState;\n","export const CardNavigationTypes = {\n  BORROWER: 'borrower',\n  FINANCIAL: 'financial',\n  LOAN: 'loan',\n  REGULATORY: 'regulatory',\n};\n\nexport const CardNavigationTypesValues = Object.values(CardNavigationTypes);\n","/* eslint-disable */\nimport createIcon from './utils/createIcon';\n\nexport default createIcon({\n  paths: [\n    'M18 1c.552 0 1 .448 1 1V7.892c0 .46-.187.877-.49 1.178L9 18.59c-.255.257-.609.416-1 .416s-.745-.159-1-.416L1.41 13c-.257-.255-.416-.609-.416-1s.159-.745.416-1l9.52-9.52c.3-.297.712-.48 1.168-.48H18zm0-1H12.106c-.736 0-1.403.298-1.886.78L.71 10.3c-.434.436-.702 1.037-.702 1.7s.268 1.264.702 1.7l5.6 5.6c.436.434 1.037.702 1.7.702s1.264-.268 1.7-.702l9.52-9.52c.476-.482.77-1.145.77-1.876V2c0-1.105-.895-2-2-2zm-3 4c.552 0 1 .448 1 1s-.448 1-1 1-1-.448-1-1 .448-1 1-1zm0-1c-1.105 0-2 .895-2 2s.895 2 2 2 2-.895 2-2-.895-2-2-2z',\n  ],\n  height: 20,\n  width: 20,\n});\n","import { aggregatedClasses } from '@elliemae/ds-classnames';\n\nconst blockName = 'card-navigation';\n\nexport const CardNavigationBoxWrapper = aggregatedClasses('div')(\n  blockName,\n  'wrapper',\n);\n\nexport const CardNavigationIcon = aggregatedClasses('div')(\n  blockName,\n  'icon',\n  ({ type }) => ({\n    [type]: type,\n  }),\n);\n\nexport const CardNavigationContent = aggregatedClasses('div')(\n  blockName,\n  'content',\n  ({ borderBottom, type }) => ({\n    'border-bottom': borderBottom,\n    [type]: type,\n  }),\n);\n\nexport const CardNavigationContentTitleWrapper = aggregatedClasses('div')(\n  blockName,\n  'title-wrapper',\n);\nexport const CardNavigationCentralContent = aggregatedClasses('div')(\n  blockName,\n  'central-content',\n);\nexport const CardNavigationContentTitle = aggregatedClasses('div')(\n  blockName,\n  'title',\n);\nexport const CardNavigationContentDescription = aggregatedClasses('div')(\n  blockName,\n  'description',\n);\nexport const CardNavigationActions = aggregatedClasses('div')(\n  blockName,\n  'actions',\n);\nexport const CardNavigationAction = aggregatedClasses('div')(\n  blockName,\n  'action',\n);\n","import React from 'react';\nimport { PropTypes, describe } from 'react-desc';\nimport DSTruncatedTooltipText, {\n  TooltipTextProvider,\n} from '@elliemae/ds-basic/TruncatedTooltipText';\nimport LoanProducts from '@elliemae/ds-icons/LoanProducts';\nimport MoreOptionsVert from '@elliemae/ds-icons/MoreOptionsVert';\nimport DSButton, { BUTTON_SIZE, BUTTON_TYPE } from '@elliemae/ds-basic/Button';\nimport {\n  CardNavigationBoxWrapper,\n  CardNavigationIcon,\n  CardNavigationContent,\n  CardNavigationContentTitle,\n  CardNavigationContentDescription,\n  CardNavigationContentTitleWrapper,\n  CardNavigationActions,\n  CardNavigationAction,\n  CardNavigationCentralContent,\n} from './components/blocks';\nimport {\n  CardNavigationTypes,\n  CardNavigationTypesValues,\n} from './components/types';\n\nconst DSCardNavigation = ({\n  containerProps = {},\n  title = '',\n  description = '',\n  type,\n  Icon,\n  actions = [],\n  ...rest\n}) => (\n  <TooltipTextProvider>\n    <CardNavigationBoxWrapper\n      role=\"button\"\n      tabIndex={0}\n      {...rest}\n      {...containerProps}\n    >\n      <CardNavigationIcon classProps={{ type }}>\n        <Icon size=\"l\" />\n      </CardNavigationIcon>\n      <CardNavigationCentralContent>\n        <CardNavigationContent>\n          <CardNavigationContentTitleWrapper>\n            <CardNavigationContentTitle>\n              <DSTruncatedTooltipText value={title} />\n            </CardNavigationContentTitle>\n            <CardNavigationContentDescription>\n              <DSTruncatedTooltipText\n                value={description}\n                data-testid=\"ds-card-navigation--description\"\n              />\n            </CardNavigationContentDescription>\n          </CardNavigationContentTitleWrapper>\n        </CardNavigationContent>\n        {actions.length > 0 && (\n          <CardNavigationActions>\n            {actions.map(\n              (\n                {\n                  icon = <MoreOptionsVert aria-label=\"More options\" />,\n                  ...otherProps\n                },\n                key,\n              ) => (\n                <CardNavigationAction key={key}>\n                  <DSButton\n                    icon={icon}\n                    {...otherProps}\n                    buttonType={BUTTON_TYPE.TEXT}\n                    size={BUTTON_SIZE.L}\n                  />\n                </CardNavigationAction>\n              ),\n            )}\n          </CardNavigationActions>\n        )}\n      </CardNavigationCentralContent>\n    </CardNavigationBoxWrapper>\n  </TooltipTextProvider>\n);\n\nDSCardNavigation.defaultProps = {\n  type: CardNavigationTypes.BORROWER,\n  Icon: LoanProducts,\n};\n\nconst props = {\n  /** props to inject to card navigation wrapper */\n  containerProps: PropTypes.object.description(\n    'props to inject to card navigation wrapper',\n  ),\n  /** card navigation title */\n  title: PropTypes.string.description('card navigation title'),\n  /** card navigation main icon */\n  Icon: PropTypes.node.description('card navigation main icon'),\n  /** card navigation description */\n  description: PropTypes.string.description('card navigation description'),\n  /** card navigation type */\n  type: PropTypes.oneOf(CardNavigationTypesValues).description(\n    'card navigation type',\n  ),\n  /** card navigation actions array */\n  actions: PropTypes.arrayOf(\n    PropTypes.shape({\n      icon: PropTypes.element,\n      onClick: PropTypes.func,\n    }),\n  ).description('card navigation actions array'),\n};\n\nDSCardNavigation.propTypes = props;\n\nconst DSCardNavigationWithSchema = describe(DSCardNavigation);\nDSCardNavigationWithSchema.propTypes = props;\n\nexport {\n  CardNavigationTypes,\n  CardNavigationTypesValues,\n  DSCardNavigationWithSchema,\n};\n\nexport default DSCardNavigation;\n","/* eslint-disable max-lines */\nimport React from 'react';\nimport DSCardNavigation, {\n  CardNavigationTypesValues,\n  CardNavigationTypes,\n} from '@elliemae/ds-card-navigation';\nimport './style.css';\nimport Delete from '@elliemae/ds-icons/Delete';\n\nexport default function Basic() {\n\n\n  return (\n    <div style={{ display: 'flex', flexDirection: 'row', flexWrap: 'wrap' }}>\n      {CardNavigationTypesValues.map((type, key) => (\n        <DSCardNavigation\n          // eslint-disable-next-line react/no-array-index-key\n          key={key}\n          description=\"Card description\"\n          style={{ margin: '2rem' }}\n          title={`Card Title ${type.toUpperCase()}`}\n          type={type}\n        />\n      ))}\n      <DSCardNavigation\n        actions={[\n          {\n            onClick: console.log,\n          },\n        ]}\n        description=\"Card description\"\n        style={{ margin: '2rem' }}\n        title=\"Monthly Income and Combined Housing Expense\"\n        type={CardNavigationTypes.BORROWER}\n      />\n    </div>\n  );\n}\n","/* eslint-disable */\nimport createIcon from './utils/createIcon';\n\nexport default createIcon({\n  paths: [\n    'M9.496 12c-.828 0-1.5-.672-1.5-1.5S8.668 9 9.496 9s1.5.672 1.5 1.5-.672 1.5-1.5 1.5zM9.496 7c-.828 0-1.5-.672-1.5-1.5S8.668 4 9.496 4s1.5.672 1.5 1.5-.672 1.5-1.5 1.5zM9.496 17c-.828 0-1.5-.672-1.5-1.5s.672-1.5 1.5-1.5 1.5.672 1.5 1.5-.672 1.5-1.5 1.5z',\n  ],\n  height: 20,\n  width: 20,\n});\n","/* eslint-disable react/prop-types */\nimport React, { useMemo, useState } from 'react';\nimport DSPopover, { usePopoverProviderState } from '@elliemae/ds-popover';\n\nconst TruncatedTooltipContext = React.createContext();\n\nconst { Provider } = TruncatedTooltipContext;\n\nfunction TooltipTextProvider({\n  children,\n  tooltipDelay = 200,\n  placement = 'top',\n  ...tooltipOptions\n}) {\n  const {\n    show: showTooltip,\n    hide: hideTooltip,\n    state: tooltipState,\n  } = usePopoverProviderState({ delay: tooltipDelay });\n  const [zIndex, setZIndex] = useState(110);\n\n  const value = useMemo(\n    () => ({\n      showTooltip,\n      hideTooltip,\n      setZIndex,\n    }),\n    [],\n  );\n\n  return (\n    <Provider value={value}>\n      {children}\n      {tooltipState.visible ? (\n        <DSPopover\n          boundaries=\"window\"\n          placement={placement}\n          showArrow\n          {...tooltipOptions}\n          {...(tooltipState.options || {})}\n          content={tooltipState.value}\n          referenceEl={tooltipState.reference}\n          style={{ pointerEvents: 'none', zIndex }}\n          visible={tooltipState.visible}\n        />\n      ) : null}\n    </Provider>\n  );\n}\n\nTooltipTextProvider.propTypes = {};\nTooltipTextProvider.defaultProps = {};\n\nexport { TooltipTextProvider, TruncatedTooltipContext };\nexport default TooltipTextProvider;\n","import React, { useContext, useEffect } from 'react';\nimport { describe, PropTypes } from 'react-desc';\nimport styled from 'styled-components';\nimport { PopperPositions as positions } from '@elliemae/ds-popper';\nimport { TruncatedTooltipContext } from './TooltipTextProvider';\n\nconst isEllipsisActive = ({ offsetWidth, scrollWidth }) =>\n  offsetWidth < scrollWidth;\n\n// reduce the possibility of error showing the tooltip (text-overflow: ellipsis) https://jira.elliemae.io/browse/PUI-1755\nconst Text = styled.span`\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  overflow: hidden;\n  display: inline-block;\n  max-width: 100%;\n`;\n\nconst DSTruncatedTooltipText = ({\n  containerProps = {},\n  value = '',\n  zIndex = 110, // https://jira.elliemae.io/browse/PUI-1755\n  ...otherTextProps\n}) => {\n  const tooltipContext = useContext(TruncatedTooltipContext);\n  useEffect(() => {\n    if (zIndex && tooltipContext) tooltipContext.setZIndex(zIndex);\n  }, [zIndex]);\n\n  if (!tooltipContext) return value;\n\n  const { showTooltip, hideTooltip } = tooltipContext;\n\n  const handleMouseEnter = (e) => {\n    const { target } = e;\n    if (target && isEllipsisActive(target, target.getBoundingClientRect())) {\n      showTooltip(\n        {\n          value,\n          reference: target,\n        },\n        e,\n      );\n    }\n  };\n\n  const handleMouseLeave = (e) => {\n    hideTooltip({ reference: e.target });\n  };\n\n  const handlers = showTooltip\n    ? { onMouseEnter: handleMouseEnter, onMouseLeave: handleMouseLeave }\n    : {};\n  return (\n    <Text {...containerProps} {...otherTextProps} {...handlers}>\n      {value}\n    </Text>\n  );\n};\n\nDSTruncatedTooltipText.defaultProps = {\n  value: '',\n  zIndex: 110,\n};\n\nconst truncatedTooltipTextProps = {\n  containerProps: PropTypes.object.description(\n    'Set of Properties attached to the main container',\n  ),\n  value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).description(\n    'Text that when truncated will trigger the tooltip interaction',\n  ),\n  tooltipPlacement: PropTypes.oneOf([\n    positions.AUTO_START,\n    positions.AUTO_END,\n    positions.AUTO,\n    positions.TOP_START,\n    positions.TOP,\n    positions.TOP_END,\n    positions.RIGHT_START,\n    positions.RIGHT,\n    positions.RIGHT_END,\n    positions.BOTTOM_START,\n    positions.BOTTOM,\n    positions.BOTTOM_END,\n    positions.LEFT_START,\n    positions.LEFT,\n    positions.LEFT_END,\n  ]).description('Position of the tooltip'),\n  tooltipDelay: PropTypes.number.description('Delay to show the tooltip'),\n  zIndex: PropTypes.number\n    .description('override default zIndex')\n    .defaultValue(110),\n};\n\nDSTruncatedTooltipText.defaultProps = {\n  containerProps: {},\n  value: '',\n  tooltipPlacement: undefined,\n  tooltipDelay: undefined,\n};\n\nDSTruncatedTooltipText.propTypes = truncatedTooltipTextProps;\n\nconst TruncatedTooltipTextWithSchema = describe(DSTruncatedTooltipText);\nTruncatedTooltipTextWithSchema.propTypes = truncatedTooltipTextProps;\n\nexport { DSTruncatedTooltipText, TruncatedTooltipTextWithSchema };\nexport default DSTruncatedTooltipText;\n"],"sourceRoot":""}
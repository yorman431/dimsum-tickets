{"version":3,"sources":["utils/randomData.js"],"names":["groups","randomEntity","monthly","random","toFixed","id","uuidv4","group","name","owner","salary","overtime","bonuses","commission","other","text","inFolderE","randomEntities","count","Array","fill","map","randomGroupedEntities","entities","g","children","filter","entity","length"],"mappings":"iGAAA,6KAGMA,EAAS,CAAC,QAAS,QAAS,OAAQ,QAE7BC,EAAe,WAC1B,IAAMC,EAAUC,iBAAO,KAAM,MAAM,GAAMC,QAAQ,GAC3CC,EAAKC,cACLC,EAAQP,EAAOG,iBAAO,EAAG,IAC/B,MAAO,CACLE,KACAG,KAAK,GAAD,OAAKL,iBAAO,EAAG,GAAK,EAAI,WAAa,WAArC,YAAmDE,GACvDI,MAAO,CAAC,WAAY,cAAe,QAAQN,iBAAO,EAAG,IACrDO,QAAmB,GAAVR,GAAcE,QAAQ,GAC/BF,UACAS,SAAUR,iBAAO,GAAI,KAAK,GAAMC,QAAQ,GACxCQ,QAAST,iBAAO,GAAI,KAAK,GAAMC,QAAQ,GACvCS,WAAYV,iBAAO,GAAI,MAAO,GAAMC,QAAQ,GAC5CU,MAAOX,iBAAO,GAAI,KAAM,GAAMC,QAAQ,GACtCW,KAAM,6BACNC,UAAWb,iBAAO,EAAG,GAAK,EAC1BI,UAGSU,EAAiB,SAACC,GAAD,OAC5B,IAAIC,MAAMD,GAAOE,KAAK,GAAGC,KAAI,WAC3B,OAAOpB,QAEEqB,EAAwB,SAACJ,GACpC,IAAMK,EAAWN,EAAeC,GAChC,OAAOlB,EACJqB,KAAI,SAACG,GAAD,MAAQ,CACXjB,MAAOiB,EACPC,SAAUF,EAASG,QAAO,SAACC,GAAD,OAAYA,EAAOpB,QAAUiB,SAExDE,QAAO,SAACF,GAAD,OAAOA,EAAEC,SAASG","file":"static/js/93.d9a59b1d.chunk.js","sourcesContent":["import { random } from 'lodash';\nimport { v4 as uuidv4 } from 'uuid';\n\nconst groups = ['North', 'South', 'East', 'West'];\n\nexport const randomEntity = () => {\n  const monthly = random(1500, 3500, true).toFixed(2);\n  const id = uuidv4();\n  const group = groups[random(0, 3)];\n  return {\n    id,\n    name: `${random(0, 1) > 0 ? 'John Doe' : 'Jon Snow'} ${id}`,\n    owner: ['Borrower', 'Co-Borrower', 'Both'][random(0, 2)],\n    salary: (monthly * 12).toFixed(2),\n    monthly,\n    overtime: random(20, 800, true).toFixed(2),\n    bonuses: random(20, 500, true).toFixed(2),\n    commission: random(20, 25000, true).toFixed(2),\n    other: random(20, 1000, true).toFixed(2),\n    text: 'Some random very long text',\n    inFolderE: random(0, 1) > 0,\n    group,\n  };\n};\nexport const randomEntities = (count) =>\n  new Array(count).fill(0).map(() => {\n    return randomEntity();\n  });\nexport const randomGroupedEntities = (count) => {\n  const entities = randomEntities(count);\n  return groups\n    .map((g) => ({\n      group: g,\n      children: entities.filter((entity) => entity.group === g),\n    }))\n    .filter((g) => g.children.length);\n};\n"],"sourceRoot":""}
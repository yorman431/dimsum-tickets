{"version":3,"sources":["../../../src/form/LargeInputText/DSLargeInputText.js","FormItemLayout/LargeInputText.js"],"names":["CounterArea","aggregatedClasses","DSLargeInputText","containerProps","autoFocus","className","disabled","name","id","maxLength","minLength","placeholder","onClick","onChange","onFocus","onBlur","onKeyUp","onKeyDown","onPaste","value","hasError","required","readOnly","resize","innerRef","ariaLabel","ariaAutocomplete","role","characterLimitCounter","rows","errorLimit","tabIndex","limitError","useMemo","String","convertPropToCssClassName","cssClassName","classNameElement","classNameBlock","ref","aria-autocomplete","aria-label","aria-multiline","aria-placeholder","aria-required","data-testid","e","style","classProps","inputProps","PropTypes","describe","useState","setValue","handleChange","target","height","DSFormItemLayout","feedbackMessage","inputComponent","labelText"],"mappings":"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","file":"static/js/79.3015e766.chunk.js","sourcesContent":["/* eslint-disable max-lines */\n/* eslint-disable jsx-a11y/no-autofocus, react/prop-types */\nimport React, { useMemo } from 'react';\nimport { PropTypes, describe } from 'react-desc';\nimport {\n  convertPropToCssClassName,\n  aggregatedClasses,\n} from '@elliemae/ds-classnames';\n\nconst CounterArea = aggregatedClasses('div')(\n  'counter',\n  'textarea',\n  ({ limitError }) => ({\n    'limit-error': limitError,\n  }),\n);\n\nconst DSLargeInputText = ({\n  containerProps = {},\n  autoFocus = false,\n  className = '',\n  disabled = false,\n  name = '',\n  id = null,\n  maxLength = null,\n  minLength = 0,\n  placeholder = '',\n  onClick = () => null,\n  onChange = () => null,\n  onFocus = () => null,\n  onBlur = () => null,\n  onKeyUp = () => null,\n  onKeyDown = () => null,\n  onPaste = () => null,\n  value = '',\n  hasError = false,\n  required = false,\n  readOnly = false,\n  resize = 'vertical',\n  innerRef = null,\n  ariaLabel = 'Enter text',\n  ariaAutocomplete = 'none',\n  role = 'textbox',\n  characterLimitCounter = 0,\n  rows = 3,\n  errorLimit = 'Please limit your entry to',\n  tabIndex = '',\n}) => {\n  const limitError = useMemo(\n    () =>\n      characterLimitCounter < String(value).length && characterLimitCounter > 0,\n    [characterLimitCounter, value],\n  );\n  const {\n    cssClassName,\n    classNameElement,\n    classNameBlock,\n  } = convertPropToCssClassName('form-element-textarea', 'text', {\n    hasError: limitError || hasError,\n    readOnly,\n    disabled,\n  });\n  // auto size when user types\n  const handleKeyUp = (e) => {\n    // const { target } = e\n    onKeyUp(e);\n    // if (e.key !== 'Enter') return\n    // target.style.cssText = 'height:auto; padding:0'\n    // target.style.cssText = `height: ${target.scrollHeight}px`\n  };\n  return (\n    <>\n      <div {...containerProps} className={`${cssClassName} ${className}`}>\n        <div className={classNameBlock('wrapper')}>\n          <textarea\n            ref={innerRef}\n            aria-autocomplete={ariaAutocomplete}\n            aria-label={ariaLabel}\n            aria-multiline\n            aria-placeholder={placeholder}\n            aria-required={required}\n            autoFocus={autoFocus}\n            className={classNameElement('textarea')}\n            data-testid=\"ds-large-input_main-component\"\n            disabled={disabled}\n            id={id}\n            maxLength={maxLength}\n            minLength={minLength}\n            name={name}\n            onBlur={onBlur}\n            onChange={onChange}\n            onClick={onClick}\n            onFocus={onFocus}\n            onKeyDown={onKeyDown}\n            onKeyUp={handleKeyUp}\n            onPaste={onPaste}\n            placeholder={placeholder}\n            role={role}\n            rows={String(rows)}\n            style={{\n              resize,\n            }}\n            value={value}\n            tabIndex={tabIndex}\n          />\n        </div>\n      </div>\n      {characterLimitCounter > 0 && (\n        <CounterArea classProps={{ limitError }} data-testid=\"counter-area\">\n          {`${\n            limitError\n              ? `${errorLimit} ${characterLimitCounter} characters.   `\n              : ''\n          }${String(value).length} / ${characterLimitCounter}`}\n        </CounterArea>\n      )}\n    </>\n  );\n};\n\nconst inputProps = {\n  /** Injected props to wrapper element of component */\n  containerProps: PropTypes.object.description(\n    'Injected props to wrapper element of component',\n  ),\n  /**\n   * Whether uses auto focus or not\n   */\n  autoFocus: PropTypes.bool.description('Whether uses auto focus or not'),\n  /** CSS class */\n  className: PropTypes.string.description('CSS class'),\n  /**\n   * Whether is disabled or not\n   */\n  disabled: PropTypes.bool.description('Whether is disabled or not'),\n  /** HTML form name property */\n  name: PropTypes.string.description('HTML form name property'),\n  /** HTML id */\n  id: PropTypes.number.description('HTML id'),\n  /**\n   * Max length for text to be entered\n   */\n  maxLength: PropTypes.number.description('Max length for text to be entered'),\n  /**\n   * Min length for text to be entered\n   */\n  minLength: PropTypes.number.description('Min length for text to be entered'),\n  /**\n   * Placeholder for the text\n   */\n  placeholder: PropTypes.string.description('Placeholder for the text'),\n  /**\n   * Allows a function that is triggered once the input text is clicked\n   */\n  onClick: PropTypes.func.description(\n    'Allows a function that is triggered once the input text is clicked',\n  ),\n  /**\n   * Allows a function that is triggered once the input text changes\n   */\n  onChange: PropTypes.func.description(\n    'Allows a function that is triggered once the input text changes',\n  ),\n  /**\n   * Allows a function that is triggered once the input text is focused\n   */\n  onFocus: PropTypes.func.description(\n    'Allows a function that is triggered once the input text is focused',\n  ),\n  /**\n   * Allows a function that is triggered once the input text loses focus\n   */\n  onBlur: PropTypes.func.description(\n    'Allows a function that is triggered once the input text loses focus',\n  ),\n  /**\n   * Allows a function that is triggered once in the input a keyboard key is released\n   */\n  onKeyUp: PropTypes.func.description(\n    'Allows a function that is triggered once in the input a keyboard key is released',\n  ),\n  /**\n   * Allows a function that is triggered once a key is being pressed\n   */\n  onKeyDown: PropTypes.func.description(\n    'Allows a function that is triggered once a key is being pressed',\n  ),\n  /**\n   * Allows a function that is triggered once the input text is pasted\n   */\n  onPaste: PropTypes.func.description(\n    'Allows a function that is triggered once the input text is pasted',\n  ),\n  /**\n   * Default value once the component is initialized\n   */\n  value: PropTypes.string.description(\n    'Default value once the component is initialized',\n  ),\n  /**\n   * Whether the input text has error or not\n   */\n  hasError: PropTypes.bool.description(\n    'Whether the input text has error or not',\n  ),\n  /**\n   * Whether the input text is required or not\n   */\n  required: PropTypes.bool.description(\n    'Whether the input text is required or not',\n  ),\n  /**\n   * Whether the input text is read only or not\n   */\n  readOnly: PropTypes.bool.description(\n    'Whether the input text is read only or not',\n  ),\n  /**\n   * Whether the input text style is vertical or not\n   */\n  resize: PropTypes.string.description(\n    'Whether the input text style is vertical or not',\n  ),\n  /** ref forwarded to component */\n  innerRef: PropTypes.func.description('ref forwarded to component'),\n  /** a11y aria label */\n  ariaLabel: PropTypes.string.description('a11y aria label'),\n  ariaAutocomplete: PropTypes.string.description(''),\n  /**\n   * Type of input. Ex: textbox\n   */\n  role: PropTypes.string.description('Type of input. Ex: textbox'),\n  /**\n   * it will show a counter/limit if the value is greater than 0\n   */\n  characterLimitCounter: PropTypes.number.description(\n    'it will show a counter/limit if the value is greater than 0',\n  ),\n  /**\n   * Tab index html property.\n   */\n  tabIndex: PropTypes.string.description('Tab index html property.'),\n};\n\nDSLargeInputText.propTypes = inputProps;\n\nconst DSLargeInputTextWithSchema = describe(DSLargeInputText).description(\n  'A large input',\n);\nDSLargeInputText.propTypes = inputProps;\n\nexport { DSLargeInputTextWithSchema };\n\nexport default DSLargeInputText;\n","import React, { useState } from 'react';\nimport DSLargeInputText from '@elliemae/ds-basic/dslargeinputtext';\nimport DSFormItemLayout from '@elliemae/ds-basic/form/FormItem';\n\nexport default () => {\n  const [value, setValue] = useState();\n  const handleChange = ({ target: { value } }) => setValue(value);\n  return (\n    <div>\n      <DSLargeInputText\n        characterLimitCounter={20}\n        containerProps={{ id: 'my-custom-id' }}\n        maxLength={500}\n        onChange={handleChange}\n        rows={6}\n        value={value}\n      />\n      <div style={{ height: '2rem' }} />\n      <DSFormItemLayout\n        containerProps={{ id: 'my-custom-id' }}\n        feedbackMessage=\"Some feedback from de user...\"\n        inputComponent={DSLargeInputText}\n        labelText=\"Label text\"\n        onChange={handleChange}\n        placeholder=\"Hint Text\"\n        value={value}\n      />\n    </div>\n  );\n};\n"],"sourceRoot":""}
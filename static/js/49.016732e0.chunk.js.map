{"version":3,"sources":["TreeView/PUI-2579.js","../../../../../src/form/TextBox/DSTextBox.js","../../../src/Search.js","../../../../../src/form/SearchBox/withSearchable.js","../../../src/utils.js","../../../../src/Toolbar/decorateToolbarChildren.js","../../../../../src/form/ExpandableInput/ExpandableInputImpl.js","../../../../../src/form/ExpandableInput/DSExpandableInput.js","../../../../../src/form/SearchBox/SearchBoxToggle.js","../../../../src/Toolbar/DSToolbar.js","../../../../../src/plugins/searchable/SearchableTreePlugin.js"],"names":["node","id","name","type","parent","children","Searchable","useState","data","setData","instanceRef","useRef","searchQuery","setSearchQuery","style","width","height","withDepth","clearable","containerProps","onSearch","value","placeholder","searchOnEnter","margin","orientation","fluid","groupIcon","isMultiSelect","itemIcon","onOrderChange","onToggleExpand","item","current","actions","toggleExpand","expandAllChildren","plugins","SelectablePluginTree","SearchableTreePlugin","showChildrenAmount","sortable","DSTextBox","autoFocus","disabled","maxLength","minLength","fluidWidth","hasError","readOnly","innerRef","min","max","leftComponent","rightComponent","required","variant","otherProps","aria-label","role","props","PropTypes","describe","DSTextBoxWithSchema","createIcon","paths","WrappedComponent","debounce","React","this","onKeyUp","key","e","property","clearOnSearch","setState","query","target","onChange","rest","buttonRef","prevPropValue","nextProps","string","isFunction","param","isInternetExplorer","window","ua","msie","navigator","extraProps","component","cloneElement","className","ExpandableInput","opened","InputWrapper","ExpandableInputImpl","isOpen","prevProps","input","focus","triggerComponent","onOpen","onClose","onBlur","InputComponent","classProps","rightComponents","onClick","Component","SearchBoxContainer","aggregatedClasses","SearchBoxToggle","prevValue","executeIfValue","handleSearch","expandableEl","contains","buttonType","icon","showIcon","withSearchable","ToolbarContainer","alignment","size","DSToolbar","autoFocusOnMount","containerRef","getContainer","keyBindings","Tab","mergeRefs","decorateToolbarChildren","toolbarProps","ToolbarWithSchema"],"mappings":"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","file":"static/js/49.016732e0.chunk.js","sourcesContent":["import React, { useRef, useState } from \"react\";\nimport {\n  TreeView,\n  SelectablePluginTree,\n  SearchableTreePlugin\n} from \"@elliemae/ds-treeview\";\nimport Folder from \"@elliemae/ds-icons/Folder\";\nimport FilePdf from \"@elliemae/ds-icons/FilePdf\";\n// import DSButton from '@elliemae/ds-basic/Button'\n// import { ToolbarGroup } from \"@elliemae/ds-basic\";\nimport { SearchBoxToggle } from \"@elliemae/ds-basic/form/SearchBox\";\nimport DSToolbar from \"@elliemae/ds-basic/Toolbar\";\nimport DSSeparator from \"@elliemae/ds-basic/Separator\";\n\nconst node = {\n  id: \"fd28f6e5-d055-4ed8-b3f1-a4c2473876a4\",\n  name: \"BridgeServices_RegressionSuite_QA (2)\",\n  type: \"taskgroup\",\n  parent: undefined,\n  children: [\n    {\n      id: \"4548a528-a0b2-4ee5-8fb3-94628e3320a6\",\n      name: \"Test123 (1)\",\n      type: \"task\",\n      parent: \"fd28f6e5-d055-4ed8-b3f1-a4c2473876a4\",\n      children: []\n    },\n    {\n      id: \"0ba3e4bb-bce5-4c3c-aafc-2f79670ac3b6\",\n      name: \"Test (1)\",\n      type: \"task\",\n      parent: \"fd28f6e5-d055-4ed8-b3f1-a4c2473876a4\",\n      children: []\n    }\n  ]\n};\n\nconst Searchable = () => {\n  const [data, setData] = useState(node.children);\n  const instanceRef = useRef(null);\n  const [searchQuery, setSearchQuery] = useState(\"\");\n\n  return (\n    <>\n      <div style={{ width: 270, height: \"100%\" }}>\n        <DSToolbar withDepth={false}>\n          {/* <DSButton\n            buttonType='secondary'\n            labelText='Toggle Expand'\n            onClick={() => instanceRef.current.actions.toggleExpandAll()}\n          /> */}\n          <SearchBoxToggle\n            clearable\n            containerProps={{ \"data-testid\": \"tree-searchbox\" }}\n            onSearch={({ value }) => setSearchQuery(value)}\n            placeholder=\"Search all\"\n            searchOnEnter={false}\n            value={searchQuery}\n          />\n        </DSToolbar>\n        <DSSeparator margin=\"none\" orientation=\"horizontal\" type=\"non-form\" />\n        <TreeView\n          data={data}\n          fluid\n          groupIcon={<Folder />}\n          instanceRef={instanceRef}\n          isMultiSelect\n          itemIcon={<FilePdf />}\n          onOrderChange={setData}\n          onToggleExpand={item => {\n            instanceRef.current.actions.toggleExpand(item, {\n              expandAllChildren: true\n            });\n          }}\n          plugins={[SelectablePluginTree, SearchableTreePlugin]}\n          searchQuery={searchQuery}\n          showChildrenAmount\n          sortable\n        />\n      </div>\n    </>\n  );\n};\n\nexport default Searchable;\n","import React from 'react';\nimport { PropTypes, describe } from 'react-desc';\nimport DSInput from '../Input';\n\nconst DSTextBox = ({\n  containerProps = {},\n  autoFocus = false,\n  disabled = false,\n  maxLength = 255,\n  minLength = 0,\n  fluidWidth = false,\n  placeholder,\n  value = '',\n  hasError = false,\n  readOnly = false,\n  innerRef = null,\n  type = 'text',\n  min = undefined,\n  max = undefined,\n  clearable = false,\n  leftComponent = null,\n  rightComponent = null,\n  required = false,\n  variant,\n  ...otherProps\n}) => (\n  <DSInput\n    {...otherProps}\n    aria-label={otherProps['aria-label'] || 'Text Box'}\n    autoFocus={autoFocus}\n    clearable={clearable}\n    containerProps={containerProps}\n    disabled={disabled}\n    fluidWidth={fluidWidth}\n    hasError={hasError}\n    innerRef={innerRef}\n    leftComponent={leftComponent}\n    max={max}\n    maxLength={maxLength}\n    min={min}\n    minLength={minLength}\n    placeholder={placeholder}\n    readOnly={readOnly}\n    required={required}\n    rightComponent={rightComponent}\n    role=\"textbox\"\n    type={type}\n    value={value}\n    variant={variant}\n  />\n);\n\nconst props = {\n  /** inject props at textbox wrapper */\n  containerProps: PropTypes.shape({}).description(\n    'inject props at textbox wrapper',\n  ),\n  /**\n   * Whether the text box uses auto focus or not\n   */\n  autoFocus: PropTypes.bool.description(\n    'Whether the text box uses auto focus or not',\n  ),\n  /**\n   * Whether the text box is disabled or not\n   */\n  disabled: PropTypes.bool.description(\n    'Whether the text box is disabled or not',\n  ),\n  /**\n   * Max length for the text box\n   */\n  maxLength: PropTypes.number.description('Max length for the text box'),\n  /**\n   * Min length for the text box\n   */\n  minLength: PropTypes.number.description('Min length for the text box'),\n  /**\n   * Make the content of the text box fit the container or not\n   */\n  fluidWidth: PropTypes.bool.description(\n    'Make the content of the text box fit the container or not',\n  ),\n  /**\n   * Placeholder for the text box\n   */\n  placeholder: PropTypes.string.description('Placeholder for the text box'),\n  /**\n   * Default value once the component is initialized\n   */\n  value: PropTypes.string.description(\n    'Default value once the component is initialized',\n  ),\n  /**\n   * Whether the text box has error or not\n   */\n  hasError: PropTypes.bool.description('Whether the text box has error or not'),\n  /**\n   * Whether the text box is read only or not\n   */\n  readOnly: PropTypes.bool.description(\n    'Whether the text box is read only or not',\n  ),\n  /** html min prop for input */\n  min: PropTypes.number.description('html min prop for input'),\n  /** html max prop for input */\n  max: PropTypes.number.description('html max prop for input'),\n  /**\n   * Whether the text box is clearable or not\n   */\n  clearable: PropTypes.bool.description(\n    'Whether the text box is clearable or not',\n  ),\n  /**\n   * Component to be added at the left side of the text box\n   */\n  leftComponent: PropTypes.element.description(\n    'Component to be added at the left side of the text box',\n  ),\n  /**\n   * Component to be added at the right side of the text box\n   */\n  rightComponent: PropTypes.element.description(\n    'Component to be added at the right side of the text box',\n  ),\n  /**\n   * Whether the text box is required or not\n   */\n  required: PropTypes.bool.description(\n    'Whether the text box is required or not',\n  ),\n  /**\n   * [\n   *  'variant-default',\n   *  'variant-focus',\n   *  'variant-active',\n   *  'variant-disabled',\n   * ]\n   */\n  variant: PropTypes.string.description(\n    \"variant-default','variant-focus','variant-active','variant-disabled'\",\n  ),\n  /** html input type */\n  type: PropTypes.string.description('html input type'),\n  /** Internal ref */\n  innerRef: PropTypes.oneOfType([PropTypes.func, PropTypes.object]).description(\n    'internal ref',\n  ),\n};\n\nDSTextBox.propTypes = props;\n\nconst DSTextBoxWithSchema = describe(DSTextBox);\n\nDSTextBoxWithSchema.propTypes = props;\n\nexport default DSTextBox;\nexport { DSTextBoxWithSchema };\n","/* eslint-disable */\nimport createIcon from './utils/createIcon';\n\nexport default createIcon({\n  paths: [\n    'M18.869 19.162l-5.943-6.484c1.339-1.401 2.075-3.233 2.075-5.178 0-2.003-.78-3.887-2.197-5.303S9.504 0 7.501 0 3.614.78 2.198 2.197.001 5.497.001 7.5s.78 3.887 2.197 5.303S5.498 15 7.501 15c1.726 0 3.362-.579 4.688-1.645l5.943 6.483a.497.497 0 0 0 .369.162.4997.4997 0 0 0 .369-.837l-.001-.001zM1 7.5C1 3.916 3.916 1 7.5 1S14 3.916 14 7.5 11.084 14 7.5 14 1 11.084 1 7.5z',\n  ],\n  height: 20,\n  width: 20,\n});\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { debounce } from '@elliemae/ds-utilities/utils';\n\nconst withSearchable = (WrappedComponent) => {\n  class Searchable extends Component {\n    debouncedSearch = debounce(this.handleSearch, 200);\n\n    constructor(props) {\n      super(props);\n      this.state = {\n        value: props.value,\n      };\n      this.handleSearch = this.handleSearch.bind(this);\n      this.handleKeyUp = this.handleKeyUp.bind(this);\n      this.handleChange = this.handleChange.bind(this);\n      this.buttonRef = React.createRef();\n    }\n\n    static getDerivedStateFromProps(nextProps, { prevPropValue }) {\n      if (nextProps.value !== prevPropValue) {\n        return {\n          value: nextProps.value,\n          prevPropValue: nextProps.value,\n        };\n      }\n      return null;\n    }\n\n    handleKeyUp(e) {\n      const { onKeyUp, searchOnEnter } = this.props;\n      const { key } = e;\n      if (searchOnEnter && key === 'Enter') {\n        this.handleSearch();\n      }\n      onKeyUp(e);\n    }\n\n    handleSearch() {\n      const { onSearch, property, clearOnSearch, searchOnEnter } = this.props;\n      const { value } = this.state;\n\n      if (clearOnSearch) this.setState({ value: '' });\n      if (searchOnEnter && !value) return;\n      onSearch({\n        query: { [property]: value },\n        property,\n        value,\n      });\n    }\n\n    handleChange({ target }) {\n      const { value } = target;\n      const { searchOnEnter, onChange } = this.props;\n      onChange(value);\n      this.setState({ value }, () => {\n        if (!searchOnEnter) this.debouncedSearch();\n      });\n    }\n\n    render() {\n      const { value } = this.state;\n      const { containerProps, ...rest } = this.props;\n\n      return (\n        <WrappedComponent\n          {...rest}\n          buttonRef={this.buttonRef}\n          containerProps={containerProps}\n          onChange={this.handleChange}\n          onKeyUp={this.handleKeyUp}\n          onSearch={this.handleSearch}\n          value={value}\n        />\n      );\n    }\n  }\n\n  Searchable.defaultProps = {\n    onChange: () => null,\n    onSearch: () => null,\n    onKeyUp: () => null,\n    property: 'all',\n    searchOnEnter: true,\n    clearOnSearch: false,\n    containerProps: {},\n  };\n\n  Searchable.propTypes = {\n    containerProps: PropTypes.shape({}),\n    onChange: PropTypes.func,\n    onSearch: PropTypes.func,\n    onKeyUp: PropTypes.func,\n    property: PropTypes.string,\n    searchOnEnter: PropTypes.bool,\n    clearOnSearch: PropTypes.bool,\n    value: PropTypes.string,\n  };\n\n  return Searchable;\n};\n\nexport default withSearchable;\n","/* eslint-disable no-cond-assign */\nexport const objectType = (obj) =>\n  Object.prototype.toString.call(obj).slice(8, -1);\nexport const isDefined = (param) => typeof param !== 'undefined';\nexport const isUndefined = (param) => typeof param === 'undefined';\nexport const isFunction = (param) => typeof param === 'function';\nexport const isNumber = param => typeof param === 'number' && !isNaN(param); // eslint-disable-line\nexport const isString = (str) => objectType(str) === 'String';\nexport const isArray = (arr) => objectType(arr) === 'Array';\n\nexport const closest = (target, selector) => {\n  // closest(e.target, '.field')\n  while (target) {\n    // eslint-disable-line\n    if (target.matches && target.matches(selector)) return target;\n    if (target.msMatchesSelector && target.msMatchesSelector(selector))\n      return target;\n    // eslint-disable-next-line no-param-reassign\n    target = target.parentNode;\n  }\n  return null;\n};\n\nexport const getOffsetRect = (elem) => {\n  // (1)\n  const box = elem.getBoundingClientRect();\n\n  const { body, documentElement } = document;\n\n  // (2)\n  const scrollTop =\n    window.pageYOffset || documentElement.scrollTop || body.scrollTop;\n  const scrollLeft =\n    window.pageXOffset || documentElement.scrollLeft || body.scrollLeft;\n\n  // (3)\n  const clientTop = documentElement.clientTop || body.clientTop || 0;\n  const clientLeft = documentElement.clientLeft || body.clientLeft || 0;\n\n  // (4)\n  const top = box.top + scrollTop - clientTop;\n  const left = box.left + scrollLeft - clientLeft;\n\n  return { top: Math.round(top), left: Math.round(left) };\n};\n\nexport const getTotalScroll = (elem) => {\n  let top = 0;\n  let left = 0;\n\n  // eslint-disable-next-line no-param-reassign\n  while ((elem = elem.parentNode)) {\n    top += elem.scrollTop || 0;\n    left += elem.scrollLeft || 0;\n  }\n\n  return { top, left };\n};\n\nexport const getTransformProps = (x, y) => ({\n  transform: `translate(${x}px, ${y}px)`,\n});\n\nexport const listWithChildren = (list, childrenProp) =>\n  list.map((item) => ({\n    ...item,\n    [childrenProp]: item[childrenProp]\n      ? listWithChildren(item[childrenProp], childrenProp)\n      : [],\n  }));\n\nexport const getAllNonEmptyNodesIds = (items, childrenProp) => {\n  let childrenIds = [];\n  const ids = items\n    .filter((item) => item[childrenProp].length)\n    .map((item) => {\n      childrenIds = childrenIds.concat(\n        getAllNonEmptyNodesIds(item[childrenProp], childrenProp),\n      );\n      return item.id;\n    });\n\n  return ids.concat(childrenIds);\n};\n\nexport const isInternetExplorer = () => {\n  const ua = window.navigator.userAgent;\n  const msie = ua.indexOf('MSIE ');\n  // If Internet Explorer, return version number\n  if (msie > 0 || !!navigator.userAgent.match(/Trident.*rv:11\\./)) {\n    return true;\n  }\n  return false;\n};\n","import React, { cloneElement } from 'react';\n\nexport default (children, extraProps = {}) =>\n  React.Children.map(\n    children,\n    component =>\n      component\n        ? cloneElement(component, {\n            ...extraProps,\n            ...component.props,\n            className: `${component.props.className} toolbar-item`,\n          })\n        : component,\n    null,\n  );\n","import React, { Component, cloneElement } from 'react';\nimport { aggregatedClasses } from '@elliemae/ds-classnames';\nimport { isFunction } from '@elliemae/ds-shared/utils';\nimport { InputAddonWrapper } from '../Input';\n\nconst blockName = 'expandable-input';\n\nconst ExpandableInput = aggregatedClasses('div')(\n  blockName,\n  null,\n  ({ isOpen }) => ({ opened: isOpen }),\n);\nconst InputWrapper = aggregatedClasses(InputAddonWrapper)(\n  blockName,\n  'wrapper',\n  ({ isOpen }) => ({ opened: isOpen }),\n);\n\nexport default class ExpandableInputImpl extends Component {\n  componentDidUpdate(prevProps) {\n    const { isOpen } = this.props;\n    if (isOpen && isOpen !== prevProps.isOpen) this.input.focus();\n  }\n\n  render() {\n    const {\n      innerRef,\n      triggerComponent,\n      children,\n      width,\n      isOpen,\n      onOpen,\n      onClose,\n      onBlur,\n      containerProps,\n    } = this.props;\n    const InputComponent = React.Children.only(children);\n    const handleTriggerClick = e => {\n      if (isFunction(triggerComponent.onClick)) triggerComponent.onClick(e);\n      if (isOpen) {\n        onClose();\n      } else {\n        onOpen();\n      }\n    };\n\n    return (\n      <ExpandableInput\n        {...containerProps}\n        classProps={{ isOpen }}\n        innerRef={innerRef}\n        style={{ width: isOpen && width }}\n      >\n        <InputWrapper\n          rightComponents={[\n            cloneElement(triggerComponent, {\n              key: 'handler',\n              onClick: handleTriggerClick,\n            }),\n          ]}\n        >\n          {cloneElement(InputComponent, {\n            className: 'expandable-input__input',\n            innerRef: node => (this.input = node),\n            onBlur,\n          })}\n        </InputWrapper>\n      </ExpandableInput>\n    );\n  }\n}\n","import React from 'react';\nimport ExpandableInputImpl from './ExpandableInputImpl';\n\nconst DSExpandableInput = ({\n  containerProps = {},\n  innerRef,\n  className = '',\n  style = {},\n  triggerComponent = undefined,\n  children,\n  isOpen = false,\n  onOpen = () => null,\n  onClose = () => null,\n  onBlur = () => null,\n  width = undefined,\n}) => (\n  <ExpandableInputImpl\n    className={className}\n    containerProps={containerProps}\n    innerRef={innerRef}\n    isOpen={isOpen}\n    onBlur={onBlur}\n    onClose={onClose}\n    onOpen={onOpen}\n    style={style}\n    triggerComponent={triggerComponent}\n    width={width}\n  >\n    {children}\n  </ExpandableInputImpl>\n);\n\nexport default DSExpandableInput;\n","import React, { Component } from 'react';\nimport { debounce } from '@elliemae/ds-utilities/utils';\nimport SearchIcon from '@elliemae/ds-icons/Search';\nimport { aggregatedClasses } from '@elliemae/ds-classnames';\nimport DSTextBox from '../TextBox';\nimport DSButton from '../../Button';\nimport DSExpandableInput from '../ExpandableInput';\nimport withSearchable from './withSearchable';\n\nconst blockName = 'searchbox-toggle';\nconst SearchBoxContainer = aggregatedClasses('div')(blockName);\n\nclass SearchBoxToggle extends Component {\n  hideInput = debounce(this.handleHideInput, 100);\n\n  showInput = debounce(this.handleShowInput, 100);\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      isOpen: false,\n    };\n\n    this.hideInput = this.hideInput.bind(this);\n    this.showInput = this.showInput.bind(this);\n    this.handleHideInput = this.handleHideInput.bind(this);\n    this.handleShowInput = this.handleShowInput.bind(this);\n  }\n\n  componentDidUpdate(prevProps) {\n    const { clearOnSearch, value } = this.props;\n    const { value: prevValue } = prevProps;\n    if (\n      clearOnSearch &&\n      value !== prevValue &&\n      !value &&\n      prevValue &&\n      prevValue.length !== 1\n    ) {\n      this.handleHideInput(false);\n    }\n  }\n\n  handleSearch() {\n    const { onSearch, clearOnSearch } = this.props;\n    onSearch();\n    if (clearOnSearch) this.setState({ isOpen: false });\n  }\n\n  handleHideInput(executeIfValue = true) {\n    const { value } = this.props;\n    if (value) {\n      if (executeIfValue) this.handleSearch();\n    } else {\n      this.setState({ isOpen: false });\n    }\n  }\n\n  handleBlur(e) {\n    if (this.expandableEl.contains(e.target)) return;\n    this.hideInput(false);\n  }\n\n  handleShowInput() {\n    this.setState({ isOpen: true });\n  }\n\n  render() {\n    const {\n      onChange,\n      onKeyUp,\n      value,\n      placeholder,\n      clearable,\n      className,\n      buttonRef,\n      containerProps,\n      width = 300,\n    } = this.props;\n    const { isOpen } = this.state;\n    return (\n      <SearchBoxContainer>\n        <DSExpandableInput\n          containerProps={containerProps}\n          innerRef={node => (this.expandableEl = node)}\n          isOpen={isOpen}\n          onBlur={this.handleBlur}\n          onClose={this.hideInput}\n          onOpen={this.showInput}\n          triggerComponent={\n            <DSButton\n              key=\"handler\"\n              buttonType=\"text\"\n              icon={<SearchIcon />}\n              innerRef={buttonRef}\n            />\n          }\n          width={width}\n        >\n          <DSTextBox\n            className={`expandable-input__input ${className}`}\n            clearable={clearable}\n            onChange={onChange}\n            onKeyUp={onKeyUp}\n            placeholder={placeholder}\n            showIcon={false}\n            value={value}\n          />\n        </DSExpandableInput>\n      </SearchBoxContainer>\n    );\n  }\n}\n\nexport default withSearchable(SearchBoxToggle);\n","import React, { useRef } from 'react';\nimport { describe, PropTypes } from 'react-desc';\nimport { aggregatedClasses } from '@elliemae/ds-classnames';\nimport FocusGroupProvider from '@elliemae/ds-shared/FocusGroup/FocusGroupManager';\nimport { mergeRefs } from '@elliemae/ds-utilities/system';\nimport decorateToolbarChildren from './decorateToolbarChildren';\nimport Item from './ToolbarItem';\nimport ToolbarGroup from './ToolbarGroup';\nimport Divider from './ToolbarDivider';\n\nconst blockName = 'toolbar';\n\nconst ToolbarContainer = aggregatedClasses('div')(\n  blockName,\n  null,\n  ({ withDepth, alignment, size }) => ({\n    'without-depth': !withDepth,\n    [alignment]: !!alignment,\n    [size]: size,\n  }),\n);\n\nconst DSToolbar = ({\n  containerProps = {},\n  innerRef,\n  withDepth = true,\n  alignment = 'right', // left || right\n  autoFocusOnMount = true,\n  children = [],\n  size = 'normal',\n  ...otherProps\n}) => {\n  const containerRef = useRef(null);\n  return (\n    <FocusGroupProvider\n      autoFocusOnMount={autoFocusOnMount}\n      getContainer={() => containerRef.current}\n      keyBindings={{\n        Tab: 'next',\n      }}\n      orientation=\"horizontal\"\n    >\n      <ToolbarContainer\n        {...containerProps}\n        {...otherProps}\n        classProps={{ withDepth, alignment, size }}\n        innerRef={mergeRefs(innerRef, containerRef)}\n      >\n        {decorateToolbarChildren(children)}\n      </ToolbarContainer>\n    </FocusGroupProvider>\n  );\n};\n\nconst toolbarProps = {\n  containerProps: PropTypes.object.description(\n    'Set of Properties attached to the main container',\n  ),\n  withDepth: PropTypes.bool\n    .description('Shows a shadow rear the toolbar')\n    .defaultValue(true),\n  alignment: PropTypes.oneOf(['right', 'left'])\n    .description('Aligns the toolbar to the left or right')\n    .defaultValue('right'),\n  size: PropTypes.oneOf(['normal', 'compact'])\n    .description('Toolbar size')\n    .defaultValue('normal'),\n  autoFocusOnMount: PropTypes.bool\n    .description('Wheter to focus the component when it mounts or not')\n    .defaultValue(true),\n  children: PropTypes.oneOfType([\n    PropTypes.array,\n    PropTypes.func,\n    PropTypes.node,\n  ]).description('Toolbar items').isRequired,\n  innerRef: PropTypes.object.description(\n    'Ref to the Toolbar container element',\n  ),\n};\n\nDSToolbar.propTypes = toolbarProps;\n\nconst ToolbarWithSchema = describe(DSToolbar);\nToolbarWithSchema.propTypes = toolbarProps;\n\nexport {\n  Item as ToolbarItem,\n  ToolbarGroup,\n  Divider as ToolbarDivider,\n  ToolbarWithSchema,\n};\n\nexport default DSToolbar;\n","export const SearchableTreePlugin = 'tree-searchable';\n"],"sourceRoot":""}
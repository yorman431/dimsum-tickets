{"version":3,"sources":["DataGrid/customHooks/useInputSearch.js"],"names":["useInputSearch","initialSearchText","filters","setFilters","inputProps","onSearch","searchOnKeyUp","useState","updateSearch","setUpdateSearch","searchInputValue","setSearchInputValue","reRenderSearch","value","clearSearch","handleSearch","useCallback","key","trim","onKeyUp","target","searchProps","shouldUpdateSearch"],"mappings":"kLAaaA,EAAiB,SAAC,GAOxB,IAAD,IANJC,yBAMI,MANgB,GAMhB,MALJC,eAKI,MALM,GAKN,EAJJC,EAII,EAJJA,WAII,IAHJC,kBAGI,MAHS,GAGT,EAFJC,EAEI,EAFJA,SAEI,IADJC,qBACI,WACoCC,mBAAS,GAD7C,mBACGC,EADH,KACiBC,EADjB,OAE4CF,mBAC9CN,GAHE,mBAEGS,EAFH,KAEqBC,EAFrB,KAKEC,EAAiB,kBAAMH,GAAgB,SAACI,GAAD,OAAWA,EAAQ,MAC1DC,EAAc,kBAAMH,EAAoBV,IACxCc,EAAeC,uBACnB,YAAqB,IAAlBH,EAAiB,EAAjBA,MAAOI,EAAU,EAAVA,IACHJ,EAAMK,QAIXb,EAASQ,GACLP,EAAeK,EAAoBE,GAClCC,KALS,cAARG,GAAqBd,EAAWD,KAOxC,CAACM,IAEGW,EAAUH,uBACd,YAAiC,IAApBH,EAAmB,EAA7BO,OAAUP,MAASI,EAAU,EAAVA,IACpB,GAAY,UAARA,EAAiBL,SAChB,IAAKN,EAAe,OACzBS,EAAa,CAAEF,QAAOI,UAExB,CAACF,IAGH,MAAO,CACLM,YAAY,2BACPjB,GADM,IAETe,UACAd,SAAUU,EACVF,MAAOH,IAETY,mBAAoBd,EACpBA,aAAcI,EACdE","file":"static/js/80.cc71ed85.chunk.js","sourcesContent":["/* eslint-disable react-hooks/exhaustive-deps */\nimport { useState, useCallback } from 'react';\n\n/**\n * Provides reusable search functionality\n *\n * @param data.initialSearchText\n * @param data.filters\n * @param data.setFilters\n * @param data.inputProps\n * @param data.onSearch\n * @param data.searchOnKeyUp\n */\nexport const useInputSearch = ({\n  initialSearchText = '',\n  filters = [],\n  setFilters,\n  inputProps = {},\n  onSearch,\n  searchOnKeyUp = false,\n}) => {\n  const [updateSearch, setUpdateSearch] = useState(0); // Allows to update filters in real time\n  const [searchInputValue, setSearchInputValue] = useState(\n    initialSearchText,\n  );\n  const reRenderSearch = () => setUpdateSearch((value) => value + 1);\n  const clearSearch = () => setSearchInputValue(initialSearchText);\n  const handleSearch = useCallback(\n    ({ value, key }) => {\n      if (!value.trim()) {\n        if (key === 'Backspace') setFilters(filters);\n        return;\n      }\n      onSearch(value);\n      if (searchOnKeyUp) setSearchInputValue(value);\n      else clearSearch();\n    },\n    [updateSearch],\n  );\n  const onKeyUp = useCallback(\n    ({ target: { value }, key }) => {\n      if (key === 'Enter') reRenderSearch();\n      else if (!searchOnKeyUp) return;\n      handleSearch({ value, key });\n    },\n    [handleSearch],\n  );\n\n  return {\n    searchProps: {\n      ...inputProps,\n      onKeyUp,\n      onSearch: handleSearch,\n      value: searchInputValue,\n    },\n    shouldUpdateSearch: updateSearch,\n    updateSearch: reRenderSearch,\n    clearSearch,\n  };\n};\n"],"sourceRoot":""}
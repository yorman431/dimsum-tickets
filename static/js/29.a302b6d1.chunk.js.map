{"version":3,"sources":["components/TreeToolbar.js","../../../../src/TextBox/DSTextBox.tsx","../../../../src/hooks/useDerivedStateFromProps.tsx","../../../src/CloseXsmall.tsx","../../../../src/FocusGroup/useFocusGroupItem.tsx","../../../src/MoreOptionsVert.tsx","../../../src/CheckableGroup.tsx","../../../src/MenuContext.tsx","../../../src/VirtualMenuList.tsx","../../../../src/utils/useHeightByAmountOfItems.tsx","../../src/constants.js","../../src/sheet/Tag.js","../../src/sheet/Sheet.js","../../src/utils/isStaticRules.js","../../src/models/Keyframes.js","../../src/models/StyledComponent.js","../../src/models/GlobalStyle.js","../../src/models/ServerStyleSheet.js","../../../../src/MenuItems/SearchableGroup.tsx","../../../../src/MenuItems/Separator.tsx","../../../src/Checkmark.tsx","../../../../src/MenuItems/CheckboxGroup.tsx","../../../../src/MenuItems/RadioGroup.tsx","../../../src/ChevronSmallRight.tsx","../../../src/Search.tsx","../../../../src/SearchBox/useSearch.tsx","../../../../src/SearchBox/SButton.tsx","../../../../src/SearchBox/styled.tsx","../../../../src/SearchBox/props.tsx","../../../../src/SearchBox/defaultProps.tsx","../../../src/decorateToolbarChildren.tsx","../../../src/MenuItems/SelectionGroup.tsx","../../../src/MenuItems/MenuItemCheckbox.tsx","../../../src/MenuItems/menuItemFactory.tsx","../../../src/MenuItems/MenuItem.tsx","../../../src/MenuItems/MenuItemCheckable.tsx","../../../src/MenuItems/MenuItemRadio.tsx","../../../src/Menu.tsx","../../../src/MenuItems/SubMenu.tsx","../../../../src/SearchBox/DSSearchBox.tsx","../../../../src/FocusGroup/focusGroupManagerHoc.tsx","../../../src/DropdownMenuContext.tsx","../../../src/DropdownMenuProvider.tsx","../../../src/MenuItemClickableHOC.tsx","../../../src/MenuItemGroupSelectionHOC.tsx","../../../src/decoratedMenuItemFactory.tsx","../../../src/DropdownMenuLoadingIndicator.tsx","../../../src/DropdownMenuRenderer.tsx","../../../src/DropdownMenuWrapper.tsx","../../../src/DSDropdownMenu.tsx","../../../src/DSToolbar.tsx","../../../src/DSIconColor.tsx","../../../src/DSIconSize.tsx"],"names":["getOptions","toggleExpandAll","id","label","onClick","EllipsisMenu","useState","isOpen","setIsOpen","onOptionsClick","containerProps","onClickOutsideMenu","options","triggerComponent","buttonType","icon","size","DSIconSizes","M","TreeToolbar","searchQuery","setSearchQuery","withDepth","clearable","onSearch","value","placeholder","searchOnEnter","margin","orientation","type","DSTextBox","autoFocus","disabled","maxLength","minLength","fluidWidth","hasError","readOnly","innerRef","min","max","leftComponent","rightComponent","required","variant","disableTooltip","otherProps","aria-label","role","props","PropTypes","describe","DSTextBoxWithSchema","defaultPropUpdateOnChange","prop","defaultShouldUpdate","prevProp","stateValue","isEqual","setStateWithUpdate","onUpdate","setState","state","prevState","isFunction","shouldUpdate","updateOnStateChange","handleSetState","useRef","nextProp","createIcon","paths","height","width","useFocusGroupWithState","ref","useContext","register","unregister","otherActions","useEffect","useCheckableGroup","children","activeProp","active","multi","onCheck","useDerivedStateFromProps","setActive","handleCheck","target","prevActive","nextActive","addOrRemove","child","checked","Array","cloneElement","runAll","CheckableGroup","func","React","MenuItem","data","index","style","key","items","itemHeight","amountItemsInWindow","computedListHeight","useHeightByAmountOfItems","amountItems","itemCount","itemData","itemSize","useMemo","itemsLength","calculateHeight","nodes","insertRule","names","flatten","SearchBoxWrapper","aggregatedClasses","NoOptionsWrapper","SearchableGroup","searchTerm","searchTermProp","noOptionsText","focusOnOpen","searchRef","setSearchTerm","visible","setTimeout","filteredChildren","showIcon","DSMenuSearchableGroupWithSchema","focusGroupManagerHoc","Li","styled","Title","MenuSeparator","title","showSeparator","DSMenuSeparatorWithSchema","CheckboxGroup","DSMenuCheckboxGroupWithSchema","RadioGroup","DSMenuRadioGroupWithSchema","handleSearch","onSearchButtonClick","setValue","query","property","useSearch","params","onKeyUp","clearOnSearch","onChange","debouncedSearch","useCallback","debounce","searchWithParams","clickedSearchButton","handleChange","handleClear","handleKeyUp","e","searchValue","Button","focus","SButton","data-testid","SearchBoxTextBox","searchBoxProps","className","onBlur","disableButton","defaultProps","undefined","extraProps","component","noop","SelectionGroup","searchable","onSelect","renderedItems","Component","menuItemFactory","item","name","decoratedGroupChildren","MenuItemCheckbox","rest","leftAddon","DSMenuSelectionGroupWithSchema","itemTypes","separator","menuitem","radio","checkbox","submenu","fallback","defaultItem","itemsObject","parsedType","renderMenuItems","factory","option","ItemComponent","onMouseDown","Content","Addon","empty","fixedItem","renderAddon","addon","addonId","classProps","renderAddons","addons","Wrapper","disabledAddonInactive","customRenderer","calculateSize","length","as","rightAddon","tabIndex","onKeyDown","noAddon","maxOption","menuCxt","useFocusGroupItem","closeMenu","wrapperProps","omit","mergeRefs","MouseEvent","view","bubbles","cancelable","maxWidth","current","any","tabindex","MenuItemCheckable","checkIcon","color","checkableProps","useCheckable","checkAddon","DSMenuItemWithSchema","MenuItemRadio","DSMenuItemCheckeableWithSchema","DSMenuItemRadioWithSchema","MenuComponent","menuComboBox","isChildOfType","DSMenu","MenuTag","animated","ul","onClickOutside","minWidth","responsiveHeight","menuRef","focusFirst","useHiddenTransition","hiddenProps","nextChildren","forceLeftAddon","useOnClickOutside","overflowY","maxHeight","window","Menu","loop","DSMenuWithSchema","ChevronRightComp","SubMenu","interactionType","subitems","rightAddonType","itemRef","useHiddenController","interaction","onShow","onHide","focusItemByNode","hoverHandlers","onMouseEnter","onMouseLeave","leftIcon","handleShowSubItemsWithMouse","BUTTON_VARIANT","DEFAULT","contentComponent","focusKeyBindings","ArrowLeft","onExitFocusGroup","onOpen","opening","placement","showArrow","DSSubMenuWithSchema","DSSearchBox","shouldShowClearIcon","shouldShowSearchIcon","shouldShowAnyIcon","PureSearchboxIcon","Icon","handleOnClick","DSIconColors","PRIMARY","position","zIndex","SearchBoxWithSchema","WrappedComponent","onFocusPrevGroup","keyBindings","onSelectMenuItem","onOpenMenu","onClose","selection","singleGroupSelection","onSelectChange","isMenuOpen","setMenuOpen","openMenu","handleItemClick","group","nextSelection","activeState","selectionItem","toggleInObject","handleCloseOnClick","valueProvider","onItemClick","defaultConfig","handlerName","config","restProps","propHandler","handler","get","MenuItemClickableHOC","MenuItemGroupSelectionHOC","preventOverflow","customMenu","contentOffset","contentStyle","menuProps","referenceNode","focusOnOpenProp","itemsRenderer","loading","hideIfNotVisible","setFocusOnOpenMenu","o","String","nestedMax","getMax","optionsRendererd","renderOptions","dropdownBlockName","convertPropToCssClassName","getComponentFromProps","blockName","DSDropdownMenu","Position","Interaction","dropdownMenuProps","string","DropdownMenuWithSchema","ToolbarContainer","alignment","DSToolbar","autoFocusOnMount","containerRef","getContainer","Tab","decorateToolbarChildren","toolbarProps","ToolbarWithSchema","NEUTRAL","WHITE","DANGER","WARNING","SUCCESS","XXS","XS","S","L","XL","XXL"],"mappings":"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","file":"static/js/29.a302b6d1.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport SearchBox from '@elliemae/ds-basic/form/SearchBox';\nimport DSToolbar from '@elliemae/ds-basic/Toolbar';\nimport DSSeparator from '@elliemae/ds-basic/Separator';\nimport DSButton from '@elliemae/ds-basic/Button';\n\nimport DSDropdownMenu from '@elliemae/ds-dropdownmenu';\nimport MoreOptionsVert from '@elliemae/ds-icons/MoreOptionsVert';\nimport { DSIconSizes } from '@elliemae/ds-basic/Icon';\n\nconst getOptions = (toggleExpandAll) => [\n  {\n    id: 'toggle-expand-collapse',\n    label: 'Expand All / Collapse All',\n    onClick: toggleExpandAll,\n  },\n];\nconst EllipsisMenu = ({ toggleExpandAll }) => {\n  const [isOpen, setIsOpen] = useState(false);\n  const onOptionsClick = () => setIsOpen((isOpen) => !isOpen);\n  return (\n    <DSDropdownMenu\n      containerProps={{ id: 'tree-options-dropdown' }}\n      isOpen={isOpen}\n      onClickOutsideMenu={onOptionsClick}\n      options={getOptions(toggleExpandAll)}\n      triggerComponent={\n        <DSButton\n          buttonType=\"link\"\n          icon={<MoreOptionsVert size={DSIconSizes.M} />}\n          onClick={onOptionsClick}\n        />\n      }\n    />\n  );\n};\n\nexport const TreeToolbar = ({\n  searchQuery,\n  setSearchQuery,\n  toggleExpandAll,\n}) => {\n  return (\n    <>\n      <DSToolbar withDepth={false}>\n        <SearchBox\n          clearable\n          containerProps={{ 'data-testid': 'tree-searchbox' }}\n          onSearch={({ value }) => setSearchQuery(value)}\n          placeholder=\"Search all\"\n          searchOnEnter={false}\n          value={searchQuery}\n        />\n        <EllipsisMenu toggleExpandAll={toggleExpandAll} />\n      </DSToolbar>\n      <DSSeparator\n        margin=\"none\"\n        orientation=\"horizontal\"\n        type=\"non-form\"\n      />\n    </>\n  );\n};\n","import React from 'react';\nimport { PropTypes, describe } from 'react-desc';\nimport DSInput from '../Input';\n\nconst DSTextBox = ({\n  containerProps = {},\n  autoFocus = false,\n  disabled = false,\n  maxLength = 255,\n  minLength = 0,\n  fluidWidth = false,\n  placeholder,\n  value = '',\n  hasError = false,\n  readOnly = false,\n  innerRef = null,\n  type = 'text',\n  min = undefined,\n  max = undefined,\n  clearable = false,\n  leftComponent = null,\n  rightComponent = null,\n  required = false,\n  variant,\n  disableTooltip,\n  ...otherProps\n}) => (\n  <DSInput\n    {...otherProps}\n    aria-label={otherProps['aria-label'] || 'Text Box'}\n    autoFocus={autoFocus}\n    clearable={clearable}\n    containerProps={containerProps}\n    disabled={disabled}\n    fluidWidth={fluidWidth}\n    hasError={hasError}\n    innerRef={innerRef}\n    leftComponent={leftComponent}\n    max={max}\n    maxLength={maxLength}\n    min={min}\n    minLength={minLength}\n    placeholder={placeholder}\n    readOnly={readOnly}\n    required={required}\n    rightComponent={rightComponent}\n    role=\"textbox\"\n    type={type}\n    value={value}\n    variant={variant}\n    disableTooltip={disableTooltip}\n  />\n);\n\nconst props = {\n  /** inject props at textbox wrapper */\n  containerProps: PropTypes.shape({}).description(\n    'inject props at textbox wrapper',\n  ),\n  /**\n   * Whether the text box uses auto focus or not\n   */\n  autoFocus: PropTypes.bool.description(\n    'Whether the text box uses auto focus or not',\n  ),\n  /**\n   * Whether the text box is disabled or not\n   */\n  disabled: PropTypes.bool.description(\n    'Whether the text box is disabled or not',\n  ),\n  /**\n   * Max length for the text box\n   */\n  maxLength: PropTypes.number.description('Max length for the text box'),\n  /**\n   * Min length for the text box\n   */\n  minLength: PropTypes.number.description('Min length for the text box'),\n  /**\n   * Make the content of the text box fit the container or not\n   */\n  fluidWidth: PropTypes.bool.description(\n    'Make the content of the text box fit the container or not',\n  ),\n  /**\n   * Placeholder for the text box\n   */\n  placeholder: PropTypes.string.description('Placeholder for the text box'),\n  /**\n   * Default value once the component is initialized\n   */\n  value: PropTypes.string.description(\n    'Default value once the component is initialized',\n  ),\n  /**\n   * Whether the text box has error or not\n   */\n  hasError: PropTypes.bool.description('Whether the text box has error or not'),\n  /**\n   * Whether the text box is read only or not\n   */\n  readOnly: PropTypes.bool.description(\n    'Whether the text box is read only or not',\n  ),\n  /** html min prop for input */\n  min: PropTypes.number.description('html min prop for input'),\n  /** html max prop for input */\n  max: PropTypes.number.description('html max prop for input'),\n  /**\n   * Whether the text box is clearable or not\n   */\n  clearable: PropTypes.bool.description(\n    'Whether the text box is clearable or not',\n  ),\n  /**\n   * Component to be added at the left side of the text box\n   */\n  leftComponent: PropTypes.element.description(\n    'Component to be added at the left side of the text box',\n  ),\n  /**\n   * Component to be added at the right side of the text box\n   */\n  rightComponent: PropTypes.element.description(\n    'Component to be added at the right side of the text box',\n  ),\n  /**\n   * Whether the text box is required or not\n   */\n  required: PropTypes.bool.description(\n    'Whether the text box is required or not',\n  ),\n  /**\n   * [\n   *  'variant-default',\n   *  'variant-focus',\n   *  'variant-active',\n   *  'variant-disabled',\n   * ]\n   */\n  variant: PropTypes.string.description(\n    \"variant-default','variant-focus','variant-active','variant-disabled'\",\n  ),\n  /** html input type */\n  type: PropTypes.string.description('html input type'),\n  /** Internal ref */\n  innerRef: PropTypes.oneOfType([PropTypes.func, PropTypes.object]).description(\n    'internal ref',\n  ),\n  /** disableTooltip */\n  disableTooltip: PropTypes.bool\n    .description('Whether to show a tooltip or not when text does not fit')\n    .defaultValue(true),\n};\n\nDSTextBox.propTypes = props;\n\nconst DSTextBoxWithSchema = describe(DSTextBox);\n\nDSTextBoxWithSchema.propTypes = props;\n\nexport default DSTextBox;\nexport { DSTextBoxWithSchema };\n","import { useRef, useState } from 'react';\nimport { isEqual, isFunction } from '../utils';\n\nconst defaultPropUpdateOnChange = prop => prop;\n\nfunction defaultShouldUpdate({ prop, prevProp, stateValue }) {\n  return !isEqual(prop, prevProp) && !isEqual(prop, stateValue);\n}\n\nfunction setStateWithUpdate(onUpdate, setState) {\n  return state => {\n    setState(prevState =>\n      onUpdate(isFunction(state) ? state(prevState) : state, prevState),\n    );\n  };\n}\n\nexport default function useDerivedStateFromProp(prop, options = {}) {\n  const {\n    onUpdate = defaultPropUpdateOnChange,\n    shouldUpdate = defaultShouldUpdate,\n    updateOnStateChange = false,\n  } = options;\n\n  const [stateValue, setState] = useState(onUpdate(prop, {}));\n  const handleSetState = updateOnStateChange\n    ? setStateWithUpdate(onUpdate, setState)\n    : setState;\n  const prevProp = useRef(prop);\n\n  if (\n    shouldUpdate({\n      prop,\n      prevProp: prevProp.current,\n      stateValue,\n    })\n  ) {\n    const nextProp = onUpdate(prop, prevProp.current);\n    setState(nextProp);\n  }\n  prevProp.current = prop;\n  return [stateValue, handleSetState];\n}\n","/* eslint-disable */\nimport createIcon from './utils/createIcon';\n\nexport default createIcon({\n  paths: [\n    'M13.071 13.289l-2.828-2.828 2.828-2.828-.707-.707-2.828 2.828-2.828-2.828-.707.707 2.828 2.828-2.828 2.828.707.707 2.828-2.828 2.828 2.828z',\n  ],\n  height: 20,\n  width: 20,\n});\n","import { useContext, useEffect } from 'react';\nimport FocusGroupContext from './FocusGroupContext';\n\nexport default function useFocusGroupItem(ref = {}, props) {\n  const { register, unregister, ...otherActions } =\n    useContext(FocusGroupContext) || {};\n\n  useEffect(() => {\n    if (ref.current && register) register(ref.current, props);\n    return () => {\n      if (ref.current && unregister) unregister(ref.current);\n    };\n  });\n\n  // if the focus item is not wrapped with the focus provider then return null\n  if (!register) return {};\n  return otherActions;\n}\n\nexport const useFocusGroupWithState = (ref = {}, props) => {\n  const { register, unregister, ...otherActions } =\n    useContext(FocusGroupContext) || {};\n\n  useEffect(() => {\n    if (ref && register) register(ref, props);\n    return () => {\n      if (ref && unregister) unregister(ref);\n    };\n  }, [ref]);\n\n  // if the focus item is not wrapped with the focus provider then return null\n  if (!register) return {};\n  return otherActions;\n};\n","/* eslint-disable */\nimport createIcon from './utils/createIcon';\n\nexport default createIcon({\n  paths: [\n    'M9.496 12c-.828 0-1.5-.672-1.5-1.5S8.668 9 9.496 9s1.5.672 1.5 1.5-.672 1.5-1.5 1.5zM9.496 7c-.828 0-1.5-.672-1.5-1.5S8.668 4 9.496 4s1.5.672 1.5 1.5-.672 1.5-1.5 1.5zM9.496 17c-.828 0-1.5-.672-1.5-1.5s.672-1.5 1.5-1.5 1.5.672 1.5 1.5-.672 1.5-1.5 1.5z',\n  ],\n  height: 20,\n  width: 20,\n});\n","import React, { cloneElement, useCallback, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { addOrRemove, runAll } from '@elliemae/ds-utilities/utils';\nimport useDerivedStateFromProps from '@elliemae/ds-utilities/hooks/useDerivedStateFromProps';\n\nexport function useCheckableGroup({\n  children,\n  active: activeProp,\n  multi,\n  onCheck = () => null,\n}) {\n  const [active, setActive] = useDerivedStateFromProps(activeProp);\n\n  const handleCheck = ({ target: { value } }, item) => {\n    setActive(prevActive => {\n      const nextActive = multi ? addOrRemove(prevActive, value) : value;\n      onCheck(nextActive, item);\n      return nextActive;\n    });\n  };\n\n  return React.Children.map(children, child => {\n    const { props } = child;\n    const checked = Array.isArray(active)\n      ? active.indexOf(props.name) !== -1\n      : active === props.name;\n\n    return cloneElement(child, {\n      ...props,\n      checked,\n      onClick: runAll(handleCheck, props.onClick),\n    });\n  });\n}\n\nfunction CheckableGroup({\n  active = [],\n  multi = false, // checkbox or radio\n  children,\n}) {\n  return useCheckableGroup({ active, multi, children });\n}\n\nCheckableGroup.propTypes = {\n  /* The item (if multi false) or items (if multi true) selected */\n  active: PropTypes.arrayOf(PropTypes.string),\n  /* Whether is multi select or not */\n  multi: PropTypes.bool,\n  /* Handler when a user checks an item */\n  onCheck: PropTypes.func,\n};\n\nexport default CheckableGroup;\n","import React from 'react';\n\nexport default React.createContext();\n","import React from 'react';\nimport { FixedSizeList as List } from 'react-window';\nimport useHeightByAmountOfItems from './utils/useHeightByAmountOfItems';\n\nconst MenuItem = ({ data, index, style }) => (\n  <div key={index} style={style}>\n    {data[index]}\n  </div>\n);\n\n// eslint-disable-next-line no-unused-vars\nfunction resolveComputation(items, cb, timeout = 1000) {\n  return () =>\n    new Promise(resolve => {\n      const doResolve = result => {\n        cb(result);\n        resolve(result);\n      };\n      let result = 0;\n      const timer = setTimeout(() => doResolve(result), timeout);\n      items.forEach(option => {\n        result =\n          option.props.label.length > result\n            ? option.props.label.length\n            : result;\n      });\n\n      clearTimeout(timer);\n      doResolve(result);\n    });\n}\n\nexport default function VirtualMenuList({\n  items,\n  itemHeight = 32,\n  amountItemsInWindow = 5,\n  width,\n  height,\n}) {\n  const computedListHeight = useHeightByAmountOfItems({\n    amountItems: amountItemsInWindow,\n    itemHeight,\n    items,\n  });\n\n  return (\n    <List\n      height={height || computedListHeight}\n      itemCount={items.length}\n      itemData={items}\n      itemSize={itemHeight}\n      width={width}\n    >\n      {MenuItem}\n    </List>\n  );\n}\n","import { useMemo } from 'react';\n\nconst calculateHeight = (itemHeight, amountItemsInWindow, itemsLength) => {\n  const realAmountItemsInWindow =\n    itemsLength < amountItemsInWindow ? itemsLength : amountItemsInWindow;\n  return itemHeight * realAmountItemsInWindow;\n};\n\nexport default function useHeightByAmountOfItems({\n  itemHeight,\n  amountItems,\n  items,\n}) {\n  const calculatedHeight = useMemo(\n    () => calculateHeight(itemHeight, amountItems, items.length),\n    [amountItems, items],\n  );\n\n  return calculatedHeight;\n}\n","// @flow\n\ndeclare var SC_DISABLE_SPEEDY: ?boolean;\ndeclare var __VERSION__: string;\n\nexport const SC_ATTR: string =\n  (typeof process !== 'undefined' && (process.env.REACT_APP_SC_ATTR || process.env.SC_ATTR)) ||\n  'data-styled';\n\nexport const SC_ATTR_ACTIVE = 'active';\nexport const SC_ATTR_VERSION = 'data-styled-version';\nexport const SC_VERSION = __VERSION__;\nexport const SPLITTER = '/*!sc*/\\n';\n\nexport const IS_BROWSER = typeof window !== 'undefined' && 'HTMLElement' in window;\n\nexport const DISABLE_SPEEDY =\n  Boolean(typeof SC_DISABLE_SPEEDY === 'boolean'\n    ? SC_DISABLE_SPEEDY\n    : (typeof process !== 'undefined' && typeof process.env.REACT_APP_SC_DISABLE_SPEEDY !== 'undefined' && process.env.REACT_APP_SC_DISABLE_SPEEDY !== ''\n      ? process.env.REACT_APP_SC_DISABLE_SPEEDY === 'false' ? false : process.env.REACT_APP_SC_DISABLE_SPEEDY\n      : (typeof process !== 'undefined' && typeof process.env.SC_DISABLE_SPEEDY !== 'undefined' && process.env.SC_DISABLE_SPEEDY !== ''\n        ? process.env.SC_DISABLE_SPEEDY === 'false' ? false : process.env.SC_DISABLE_SPEEDY\n        : process.env.NODE_ENV !== 'production'\n      )\n    ));\n\n// Shared empty execution context when generating static styles\nexport const STATIC_EXECUTION_CONTEXT = {};\n","// @flow\n/* eslint-disable no-use-before-define */\n\nimport { makeStyleTag, getSheet } from './dom';\nimport type { SheetOptions, Tag } from './types';\n\n/** Create a CSSStyleSheet-like tag depending on the environment */\nexport const makeTag = ({ isServer, useCSSOMInjection, target }: SheetOptions): Tag => {\n  if (isServer) {\n    return new VirtualTag(target);\n  } else if (useCSSOMInjection) {\n    return new CSSOMTag(target);\n  } else {\n    return new TextTag(target);\n  }\n};\n\nexport class CSSOMTag implements Tag {\n  element: HTMLStyleElement;\n\n  sheet: CSSStyleSheet;\n\n  length: number;\n\n  constructor(target?: HTMLElement) {\n    const element = (this.element = makeStyleTag(target));\n\n    // Avoid Edge bug where empty style elements don't create sheets\n    element.appendChild(document.createTextNode(''));\n\n    this.sheet = getSheet(element);\n    this.length = 0;\n  }\n\n  insertRule(index: number, rule: string): boolean {\n    try {\n      this.sheet.insertRule(rule, index);\n      this.length++;\n      return true;\n    } catch (_error) {\n      return false;\n    }\n  }\n\n  deleteRule(index: number): void {\n    this.sheet.deleteRule(index);\n    this.length--;\n  }\n\n  getRule(index: number): string {\n    const rule = this.sheet.cssRules[index];\n    // Avoid IE11 quirk where cssText is inaccessible on some invalid rules\n    if (rule !== undefined && typeof rule.cssText === 'string') {\n      return rule.cssText;\n    } else {\n      return '';\n    }\n  }\n}\n\n/** A Tag that emulates the CSSStyleSheet API but uses text nodes */\nexport class TextTag implements Tag {\n  element: HTMLStyleElement;\n\n  nodes: NodeList<Node>;\n\n  length: number;\n\n  constructor(target?: HTMLElement) {\n    const element = (this.element = makeStyleTag(target));\n    this.nodes = element.childNodes;\n    this.length = 0;\n  }\n\n  insertRule(index: number, rule: string): boolean {\n    if (index <= this.length && index >= 0) {\n      const node = document.createTextNode(rule);\n      const refNode = this.nodes[index];\n      this.element.insertBefore(node, refNode || null);\n      this.length++;\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  deleteRule(index: number): void {\n    this.element.removeChild(this.nodes[index]);\n    this.length--;\n  }\n\n  getRule(index: number): string {\n    if (index < this.length) {\n      return this.nodes[index].textContent;\n    } else {\n      return '';\n    }\n  }\n}\n\n/** A completely virtual (server-side) Tag that doesn't manipulate the DOM */\nexport class VirtualTag implements Tag {\n  rules: string[];\n\n  length: number;\n\n  constructor(_target?: HTMLElement) {\n    this.rules = [];\n    this.length = 0;\n  }\n\n  insertRule(index: number, rule: string): boolean {\n    if (index <= this.length) {\n      this.rules.splice(index, 0, rule);\n      this.length++;\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  deleteRule(index: number): void {\n    this.rules.splice(index, 1);\n    this.length--;\n  }\n\n  getRule(index: number): string {\n    if (index < this.length) {\n      return this.rules[index];\n    } else {\n      return '';\n    }\n  }\n}\n","// @flow\nimport { DISABLE_SPEEDY, IS_BROWSER } from '../constants';\nimport { EMPTY_OBJECT } from '../utils/empties';\nimport { makeGroupedTag } from './GroupedTag';\nimport { getGroupForId } from './GroupIDAllocator';\nimport { outputSheet, rehydrateSheet } from './Rehydration';\nimport { makeTag } from './Tag';\nimport type { GroupedTag, Sheet, SheetOptions } from './types';\n\nlet SHOULD_REHYDRATE = IS_BROWSER;\n\ntype SheetConstructorArgs = {\n  isServer?: boolean,\n  useCSSOMInjection?: boolean,\n  target?: HTMLElement,\n};\n\ntype GlobalStylesAllocationMap = { [key: string]: number };\ntype NamesAllocationMap = Map<string, Set<string>>;\n\nconst defaultOptions: SheetOptions = {\n  isServer: !IS_BROWSER,\n  useCSSOMInjection: !DISABLE_SPEEDY,\n};\n\n/** Contains the main stylesheet logic for stringification and caching */\nexport default class StyleSheet implements Sheet {\n  gs: GlobalStylesAllocationMap;\n\n  names: NamesAllocationMap;\n\n  options: SheetOptions;\n\n  tag: void | GroupedTag;\n\n  /** Register a group ID to give it an index */\n  static registerId(id: string): number {\n    return getGroupForId(id);\n  }\n\n  constructor(\n    options: SheetConstructorArgs = EMPTY_OBJECT,\n    globalStyles?: GlobalStylesAllocationMap = {},\n    names?: NamesAllocationMap\n  ) {\n    this.options = {\n      ...defaultOptions,\n      ...options,\n    };\n\n    this.gs = globalStyles;\n    this.names = new Map(names);\n\n    // We rehydrate only once and use the sheet that is created first\n    if (!this.options.isServer && IS_BROWSER && SHOULD_REHYDRATE) {\n      SHOULD_REHYDRATE = false;\n      rehydrateSheet(this);\n    }\n  }\n\n  reconstructWithOptions(options: SheetConstructorArgs, withNames?: boolean = true) {\n    return new StyleSheet(\n      { ...this.options, ...options },\n      this.gs,\n      (withNames && this.names) || undefined\n    );\n  }\n\n  allocateGSInstance(id: string) {\n    return (this.gs[id] = (this.gs[id] || 0) + 1);\n  }\n\n  /** Lazily initialises a GroupedTag for when it's actually needed */\n  getTag(): GroupedTag {\n    return this.tag || (this.tag = makeGroupedTag(makeTag(this.options)));\n  }\n\n  /** Check whether a name is known for caching */\n  hasNameForId(id: string, name: string): boolean {\n    return this.names.has(id) && (this.names.get(id): any).has(name);\n  }\n\n  /** Mark a group's name as known for caching */\n  registerName(id: string, name: string) {\n    getGroupForId(id);\n\n    if (!this.names.has(id)) {\n      const groupNames = new Set();\n      groupNames.add(name);\n      this.names.set(id, groupNames);\n    } else {\n      (this.names.get(id): any).add(name);\n    }\n  }\n\n  /** Insert new rules which also marks the name as known */\n  insertRules(id: string, name: string, rules: string[]) {\n    this.registerName(id, name);\n    this.getTag().insertRules(getGroupForId(id), rules);\n  }\n\n  /** Clears all cached names for a given group ID */\n  clearNames(id: string) {\n    if (this.names.has(id)) {\n      (this.names.get(id): any).clear();\n    }\n  }\n\n  /** Clears all rules for a given group ID */\n  clearRules(id: string) {\n    this.getTag().clearGroup(getGroupForId(id));\n    this.clearNames(id);\n  }\n\n  /** Clears the entire tag which deletes all rules but not its names */\n  clearTag() {\n    // NOTE: This does not clear the names, since it's only used during SSR\n    // so that we can continuously output only new rules\n    this.tag = undefined;\n  }\n\n  /** Outputs the current sheet as a CSS string with markers for SSR */\n  toString(): string {\n    return outputSheet(this);\n  }\n}\n","// @flow\nimport isFunction from './isFunction';\nimport isStyledComponent from './isStyledComponent';\nimport type { RuleSet } from '../types';\n\nexport default function isStaticRules(rules: RuleSet): boolean {\n  for (let i = 0; i < rules.length; i += 1) {\n    const rule = rules[i];\n\n    if (isFunction(rule) && !isStyledComponent(rule)) {\n      // functions are allowed to be static if they're just being\n      // used to get the classname of a nested styled component\n      return false;\n    }\n  }\n\n  return true;\n}\n","// @flow\nimport StyleSheet from '../sheet';\nimport { type Stringifier } from '../types';\nimport throwStyledError from '../utils/error';\nimport { masterStylis } from './StyleSheetManager';\n\nexport default class Keyframes {\n  id: string;\n\n  name: string;\n\n  rules: string;\n\n  constructor(name: string, rules: string) {\n    this.name = name;\n    this.id = `sc-keyframes-${name}`;\n    this.rules = rules;\n  }\n\n  inject = (styleSheet: StyleSheet, stylisInstance: Stringifier = masterStylis) => {\n    const resolvedName = this.name + stylisInstance.hash;\n\n    if (!styleSheet.hasNameForId(this.id, resolvedName)) {\n      styleSheet.insertRules(\n        this.id,\n        resolvedName,\n        stylisInstance(this.rules, resolvedName, '@keyframes')\n      );\n    }\n  };\n\n  toString = () => {\n    return throwStyledError(12, String(this.name));\n  };\n\n  getName(stylisInstance: Stringifier = masterStylis) {\n    return this.name + stylisInstance.hash;\n  }\n}\n","// @flow\nimport validAttr from '@emotion/is-prop-valid';\nimport hoist from 'hoist-non-react-statics';\nimport React, { createElement, type Ref, useContext, useDebugValue } from 'react';\nimport { SC_VERSION } from '../constants';\nimport type {\n  Attrs,\n  IStyledComponent,\n  IStyledStatics,\n  RuleSet,\n  ShouldForwardProp,\n  Target,\n} from '../types';\nimport { checkDynamicCreation } from '../utils/checkDynamicCreation';\nimport createWarnTooManyClasses from '../utils/createWarnTooManyClasses';\nimport determineTheme from '../utils/determineTheme';\nimport { EMPTY_ARRAY, EMPTY_OBJECT } from '../utils/empties';\nimport escape from '../utils/escape';\nimport generateComponentId from '../utils/generateComponentId';\nimport generateDisplayName from '../utils/generateDisplayName';\nimport getComponentName from '../utils/getComponentName';\nimport isFunction from '../utils/isFunction';\nimport isStyledComponent from '../utils/isStyledComponent';\nimport isTag from '../utils/isTag';\nimport joinStrings from '../utils/joinStrings';\nimport merge from '../utils/mixinDeep';\nimport ComponentStyle from './ComponentStyle';\nimport { useStyleSheet, useStylis } from './StyleSheetManager';\nimport { ThemeContext } from './ThemeProvider';\n\nconst identifiers = {};\n\n/* We depend on components having unique IDs */\nfunction generateId(displayName?: string, parentComponentId?: string) {\n  const name = typeof displayName !== 'string' ? 'sc' : escape(displayName);\n  // Ensure that no displayName can lead to duplicate componentIds\n  identifiers[name] = (identifiers[name] || 0) + 1;\n\n  const componentId = `${name}-${generateComponentId(\n    // SC_VERSION gives us isolation between multiple runtimes on the page at once\n    // this is improved further with use of the babel plugin \"namespace\" feature\n    SC_VERSION + name + identifiers[name]\n  )}`;\n\n  return parentComponentId ? `${parentComponentId}-${componentId}` : componentId;\n}\n\nfunction useResolvedAttrs<Config>(theme: any = EMPTY_OBJECT, props: Config, attrs: Attrs) {\n  // NOTE: can't memoize this\n  // returns [context, resolvedAttrs]\n  // where resolvedAttrs is only the things injected by the attrs themselves\n  const context = { ...props, theme };\n  const resolvedAttrs = {};\n\n  attrs.forEach(attrDef => {\n    let resolvedAttrDef = attrDef;\n    let key;\n\n    if (isFunction(resolvedAttrDef)) {\n      resolvedAttrDef = resolvedAttrDef(context);\n    }\n\n    /* eslint-disable guard-for-in */\n    for (key in resolvedAttrDef) {\n      context[key] = resolvedAttrs[key] =\n        key === 'className'\n          ? joinStrings(resolvedAttrs[key], resolvedAttrDef[key])\n          : resolvedAttrDef[key];\n    }\n    /* eslint-enable guard-for-in */\n  });\n\n  return [context, resolvedAttrs];\n}\n\nfunction useInjectedStyle<T>(\n  componentStyle: ComponentStyle,\n  isStatic: boolean,\n  resolvedAttrs: T,\n  warnTooManyClasses?: $Call<typeof createWarnTooManyClasses, string, string>\n) {\n  const styleSheet = useStyleSheet();\n  const stylis = useStylis();\n\n  const className = isStatic\n    ? componentStyle.generateAndInjectStyles(EMPTY_OBJECT, styleSheet, stylis)\n    : componentStyle.generateAndInjectStyles(resolvedAttrs, styleSheet, stylis);\n\n  // eslint-disable-next-line react-hooks/rules-of-hooks\n  if (process.env.NODE_ENV !== 'production') useDebugValue(className);\n\n  if (process.env.NODE_ENV !== 'production' && !isStatic && warnTooManyClasses) {\n    warnTooManyClasses(className);\n  }\n\n  return className;\n}\n\nfunction useStyledComponentImpl(\n  forwardedComponent: IStyledComponent,\n  props: Object,\n  forwardedRef: Ref<any>,\n  isStatic: boolean\n) {\n  const {\n    attrs: componentAttrs,\n    componentStyle,\n    defaultProps,\n    foldedComponentIds,\n    shouldForwardProp,\n    styledComponentId,\n    target,\n  } = forwardedComponent;\n\n  // eslint-disable-next-line react-hooks/rules-of-hooks\n  if (process.env.NODE_ENV !== 'production') useDebugValue(styledComponentId);\n\n  // NOTE: the non-hooks version only subscribes to this when !componentStyle.isStatic,\n  // but that'd be against the rules-of-hooks. We could be naughty and do it anyway as it\n  // should be an immutable value, but behave for now.\n  const theme = determineTheme(props, useContext(ThemeContext), defaultProps);\n\n  const [context, attrs] = useResolvedAttrs(theme || EMPTY_OBJECT, props, componentAttrs);\n\n  const generatedClassName = useInjectedStyle(\n    componentStyle,\n    isStatic,\n    context,\n    process.env.NODE_ENV !== 'production' ? forwardedComponent.warnTooManyClasses : undefined\n  );\n\n  const refToForward = forwardedRef;\n\n  const elementToBeCreated: Target = attrs.$as || props.$as || attrs.as || props.as || target;\n\n  const isTargetTag = isTag(elementToBeCreated);\n  const computedProps = attrs !== props ? { ...props, ...attrs } : props;\n  const propsForElement = {};\n\n  // eslint-disable-next-line guard-for-in\n  for (const key in computedProps) {\n    if (key[0] === '$' || key === 'as') continue;\n    else if (key === 'forwardedAs') {\n      propsForElement.as = computedProps[key];\n    } else if (\n      shouldForwardProp ? shouldForwardProp(key, validAttr) : isTargetTag ? validAttr(key) : true\n    ) {\n      // Don't pass through non HTML tags through to HTML elements\n      propsForElement[key] = computedProps[key];\n    }\n  }\n\n  if (props.style && attrs.style !== props.style) {\n    propsForElement.style = { ...props.style, ...attrs.style };\n  }\n\n  propsForElement.className = Array.prototype\n    .concat(\n      foldedComponentIds,\n      styledComponentId,\n      generatedClassName !== styledComponentId ? generatedClassName : null,\n      props.className,\n      attrs.className\n    )\n    .filter(Boolean)\n    .join(' ');\n\n  propsForElement.ref = refToForward;\n\n  return createElement(elementToBeCreated, propsForElement);\n}\n\nexport default function createStyledComponent(\n  target: $PropertyType<IStyledComponent, 'target'>,\n  options: {\n    attrs?: Attrs,\n    componentId: string,\n    displayName?: string,\n    parentComponentId?: string,\n    shouldForwardProp?: ShouldForwardProp,\n  },\n  rules: RuleSet\n) {\n  const isTargetStyledComp = isStyledComponent(target);\n  const isCompositeComponent = !isTag(target);\n\n  const {\n    attrs = EMPTY_ARRAY,\n    componentId = generateId(options.displayName, options.parentComponentId),\n    displayName = generateDisplayName(target),\n  } = options;\n\n  const styledComponentId =\n    options.displayName && options.componentId\n      ? `${escape(options.displayName)}-${options.componentId}`\n      : options.componentId || componentId;\n\n  // fold the underlying StyledComponent attrs up (implicit extend)\n  const finalAttrs =\n    isTargetStyledComp && ((target: any): IStyledComponent).attrs\n      ? Array.prototype.concat(((target: any): IStyledComponent).attrs, attrs).filter(Boolean)\n      : attrs;\n\n  // eslint-disable-next-line prefer-destructuring\n  let shouldForwardProp = options.shouldForwardProp;\n\n  if (isTargetStyledComp && target.shouldForwardProp) {\n    if (options.shouldForwardProp) {\n      // compose nested shouldForwardProp calls\n      shouldForwardProp = (prop, filterFn) =>\n        ((((target: any): IStyledComponent).shouldForwardProp: any): ShouldForwardProp)(\n          prop,\n          filterFn\n        ) && ((options.shouldForwardProp: any): ShouldForwardProp)(prop, filterFn);\n    } else {\n      // eslint-disable-next-line prefer-destructuring\n      shouldForwardProp = ((target: any): IStyledComponent).shouldForwardProp;\n    }\n  }\n\n  const componentStyle = new ComponentStyle(\n    rules,\n    styledComponentId,\n    isTargetStyledComp ? ((target: Object).componentStyle: ComponentStyle) : undefined\n  );\n\n  // statically styled-components don't need to build an execution context object,\n  // and shouldn't be increasing the number of class names\n  const isStatic = componentStyle.isStatic && attrs.length === 0;\n\n  /**\n   * forwardRef creates a new interim component, which we'll take advantage of\n   * instead of extending ParentComponent to create _another_ interim class\n   */\n  let WrappedStyledComponent: IStyledComponent;\n\n  const forwardRef = (props, ref) =>\n    // eslint-disable-next-line\n    useStyledComponentImpl(WrappedStyledComponent, props, ref, isStatic);\n\n  forwardRef.displayName = displayName;\n\n  WrappedStyledComponent = ((React.forwardRef(forwardRef): any): IStyledComponent);\n  WrappedStyledComponent.attrs = finalAttrs;\n  WrappedStyledComponent.componentStyle = componentStyle;\n  WrappedStyledComponent.displayName = displayName;\n  WrappedStyledComponent.shouldForwardProp = shouldForwardProp;\n\n  // this static is used to preserve the cascade of static classes for component selector\n  // purposes; this is especially important with usage of the css prop\n  WrappedStyledComponent.foldedComponentIds = isTargetStyledComp\n    ? Array.prototype.concat(\n        ((target: any): IStyledComponent).foldedComponentIds,\n        ((target: any): IStyledComponent).styledComponentId\n      )\n    : EMPTY_ARRAY;\n\n  WrappedStyledComponent.styledComponentId = styledComponentId;\n\n  // fold the underlying StyledComponent target up since we folded the styles\n  WrappedStyledComponent.target = isTargetStyledComp\n    ? ((target: any): IStyledComponent).target\n    : target;\n\n  WrappedStyledComponent.withComponent = function withComponent(tag: Target) {\n    const { componentId: previousComponentId, ...optionsToCopy } = options;\n\n    const newComponentId =\n      previousComponentId &&\n      `${previousComponentId}-${isTag(tag) ? tag : escape(getComponentName(tag))}`;\n\n    const newOptions = {\n      ...optionsToCopy,\n      attrs: finalAttrs,\n      componentId: newComponentId,\n    };\n\n    return createStyledComponent(tag, newOptions, rules);\n  };\n\n  Object.defineProperty(WrappedStyledComponent, 'defaultProps', {\n    get() {\n      return this._foldedDefaultProps;\n    },\n\n    set(obj) {\n      this._foldedDefaultProps = isTargetStyledComp\n        ? merge({}, ((target: any): IStyledComponent).defaultProps, obj)\n        : obj;\n    },\n  });\n\n  if (process.env.NODE_ENV !== 'production') {\n    checkDynamicCreation(displayName, styledComponentId);\n\n    WrappedStyledComponent.warnTooManyClasses = createWarnTooManyClasses(\n      displayName,\n      styledComponentId\n    );\n  }\n\n  WrappedStyledComponent.toString = () => `.${WrappedStyledComponent.styledComponentId}`;\n\n  if (isCompositeComponent) {\n    hoist<\n      IStyledStatics,\n      $PropertyType<IStyledComponent, 'target'>,\n      { [key: $Keys<IStyledStatics>]: true }\n    >(WrappedStyledComponent, ((target: any): $PropertyType<IStyledComponent, 'target'>), {\n      // all SC-specific things should not be hoisted\n      attrs: true,\n      componentStyle: true,\n      displayName: true,\n      foldedComponentIds: true,\n      shouldForwardProp: true,\n      styledComponentId: true,\n      target: true,\n      withComponent: true,\n    });\n  }\n\n  return WrappedStyledComponent;\n}\n","// @flow\nimport StyleSheet from '../sheet';\nimport type { RuleSet, Stringifier } from '../types';\nimport flatten from '../utils/flatten';\nimport isStaticRules from '../utils/isStaticRules';\n\nexport default class GlobalStyle {\n  componentId: string;\n\n  isStatic: boolean;\n\n  rules: RuleSet;\n\n  constructor(rules: RuleSet, componentId: string) {\n    this.rules = rules;\n    this.componentId = componentId;\n    this.isStatic = isStaticRules(rules);\n\n    // pre-register the first instance to ensure global styles\n    // load before component ones\n    StyleSheet.registerId(this.componentId + 1);\n  }\n\n  createStyles(\n    instance: number,\n    executionContext: Object,\n    styleSheet: StyleSheet,\n    stylis: Stringifier\n  ) {\n    const flatCSS = flatten(this.rules, executionContext, styleSheet, stylis);\n    const css = stylis(flatCSS.join(''), '');\n    const id = this.componentId + instance;\n\n    // NOTE: We use the id as a name as well, since these rules never change\n    styleSheet.insertRules(id, id, css);\n  }\n\n  removeStyles(instance: number, styleSheet: StyleSheet) {\n    styleSheet.clearRules(this.componentId + instance);\n  }\n\n  renderStyles(\n    instance: number,\n    executionContext: Object,\n    styleSheet: StyleSheet,\n    stylis: Stringifier\n  ) {\n    if (instance > 2) StyleSheet.registerId(this.componentId + instance);\n\n    // NOTE: Remove old styles, then inject the new ones\n    this.removeStyles(instance, styleSheet);\n    this.createStyles(instance, executionContext, styleSheet, stylis);\n  }\n}\n","// @flow\n/* eslint-disable no-underscore-dangle */\nimport React from 'react';\nimport { IS_BROWSER, SC_ATTR, SC_ATTR_VERSION, SC_VERSION } from '../constants';\nimport throwStyledError from '../utils/error';\nimport getNonce from '../utils/nonce';\nimport StyleSheet from '../sheet';\nimport StyleSheetManager from './StyleSheetManager';\n\ndeclare var __SERVER__: boolean;\n\nconst CLOSING_TAG_R = /^\\s*<\\/[a-z]/i;\n\nexport default class ServerStyleSheet {\n  isStreaming: boolean;\n\n  instance: StyleSheet;\n\n  sealed: boolean;\n\n  constructor() {\n    this.instance = new StyleSheet({ isServer: true });\n    this.sealed = false;\n  }\n\n  _emitSheetCSS = (): string => {\n    const css = this.instance.toString();\n    const nonce = getNonce();\n    const attrs = [nonce && `nonce=\"${nonce}\"`, `${SC_ATTR}=\"true\"`, `${SC_ATTR_VERSION}=\"${SC_VERSION}\"`];\n    const htmlAttr = attrs.filter(Boolean).join(' ');\n\n    return `<style ${htmlAttr}>${css}</style>`;\n  };\n\n  collectStyles(children: any) {\n    if (this.sealed) {\n      return throwStyledError(2);\n    }\n\n    return <StyleSheetManager sheet={this.instance}>{children}</StyleSheetManager>;\n  }\n\n  getStyleTags = (): string => {\n    if (this.sealed) {\n      return throwStyledError(2);\n    }\n\n    return this._emitSheetCSS();\n  };\n\n  getStyleElement = () => {\n    if (this.sealed) {\n      return throwStyledError(2);\n    }\n\n    const props = {\n      [SC_ATTR]: '',\n      [SC_ATTR_VERSION]: SC_VERSION,\n      dangerouslySetInnerHTML: {\n        __html: this.instance.toString(),\n      },\n    };\n\n    const nonce = getNonce();\n    if (nonce) {\n      (props: any).nonce = nonce;\n    }\n\n    // v4 returned an array for this fn, so we'll do the same for v5 for backward compat\n    return [<style {...props} key=\"sc-0-0\" />];\n  };\n\n  // eslint-disable-next-line consistent-return\n  interleaveWithNodeStream(input: any) {\n    if (!__SERVER__ || IS_BROWSER) {\n      return throwStyledError(3);\n    } else if (this.sealed) {\n      return throwStyledError(2);\n    }\n\n    if (__SERVER__) {\n      this.seal();\n\n      // eslint-disable-next-line global-require\n      const { Readable, Transform } = require('stream');\n\n      const readableStream: Readable = input;\n      const { instance: sheet, _emitSheetCSS } = this;\n\n      const transformer = new Transform({\n        transform: function appendStyleChunks(chunk, /* encoding */ _, callback) {\n          // Get the chunk and retrieve the sheet's CSS as an HTML chunk,\n          // then reset its rules so we get only new ones for the next chunk\n          const renderedHtml = chunk.toString();\n          const html = _emitSheetCSS();\n\n          sheet.clearTag();\n\n          // prepend style html to chunk, unless the start of the chunk is a\n          // closing tag in which case append right after that\n          if (CLOSING_TAG_R.test(renderedHtml)) {\n            const endOfClosingTag = renderedHtml.indexOf('>') + 1;\n            const before = renderedHtml.slice(0, endOfClosingTag);\n            const after = renderedHtml.slice(endOfClosingTag);\n\n            this.push(before + html + after);\n          } else {\n            this.push(html + renderedHtml);\n          }\n\n          callback();\n        },\n      });\n\n      readableStream.on('error', err => {\n        // forward the error to the transform stream\n        transformer.emit('error', err);\n      });\n\n      return readableStream.pipe(transformer);\n    }\n  }\n\n  seal = () => {\n    this.sealed = true;\n  };\n}\n","import React, { useEffect, useMemo, useState, useRef, useContext } from 'react';\nimport { aggregatedClasses } from '@elliemae/ds-classnames';\nimport { focusGroupManagerHoc } from '@elliemae/ds-shared/FocusGroup';\nimport DSSearchBox from '@elliemae/ds-form/SearchBox';\nimport { PropTypes, describe } from 'react-desc';\nimport VirtualMenuList from '../VirtualMenuList';\nimport MenuContext from '../MenuContext';\n\nconst SearchBoxWrapper = aggregatedClasses('div')(\n  'menu-search-group',\n  'search-wrapper',\n);\nconst NoOptionsWrapper = aggregatedClasses('div')(\n  'menu-search-group',\n  'no-options',\n);\n\nfunction SearchableGroup({\n  children,\n  amountItemsInWindow = 5,\n  searchTerm: searchTermProp = '',\n  noOptionsText = 'No options',\n  height,\n  width,\n  focusOnOpen = false,\n}) {\n  const searchRef = useRef(null);\n  const [searchTerm, setSearchTerm] = useState(searchTermProp);\n\n  useEffect(() => {\n    if (searchRef.current) searchRef.current.focus();\n  }, []);\n\n  const { visible } = useContext(MenuContext) || {};\n\n  useEffect(() => {\n    if (focusOnOpen && visible) {\n      setTimeout(() => {\n        if (searchRef.current) searchRef.current.focus();\n      }, 0);\n    }\n  }, [focusOnOpen, visible]);\n\n  const filteredChildren = useMemo(\n    () =>\n      children.filter(\n        (child) =>\n          !searchTerm ||\n          child.props.label.toLowerCase().startsWith(searchTerm.toLowerCase()),\n      ),\n    [children, searchTerm],\n  );\n\n  return (\n    <>\n      <SearchBoxWrapper>\n        <DSSearchBox\n          innerRef={searchRef}\n          onSearch={({ value }) => setSearchTerm(value)}\n          searchOnEnter={false}\n          showIcon={false}\n          value={searchTerm}\n        />\n      </SearchBoxWrapper>\n      {!filteredChildren.length && (\n        <NoOptionsWrapper>{noOptionsText}</NoOptionsWrapper>\n      )}\n      <VirtualMenuList\n        amountItemsInWindow={amountItemsInWindow}\n        height={height}\n        items={filteredChildren}\n        width={width}\n      />\n    </>\n  );\n}\n\nconst props = {\n  /** The amount of items that are going to be rendered in the group */\n  amountItemsInWindow: PropTypes.number.description(\n    'The amount of items that are going to be rendered in the group',\n  ),\n  /** A search term */\n  searchTerm: PropTypes.string.description('A search term'),\n  /** Text to show when there's no options to show */\n  noOptionsText: PropTypes.string.description(\n    \"Text to show when there's no options to show\",\n  ),\n  /** array of children for search list */\n  children: PropTypes.array.description('array of children for search list'),\n  /** height for virtual list wrapper */\n  height: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).description(\n    'height for virtual list wrapper',\n  ),\n  /** width for virtual list wrapper */\n  width: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).description(\n    'width for virtual list wrapper',\n  ),\n  /** weather to focus on searchable group on open */\n  focusOnOpen: PropTypes.bool.description(\n    'weather to focus on searchable group on open',\n  ),\n};\n\nSearchableGroup.propTypes = props;\n\nconst DSMenuSearchableGroupWithSchema = describe(SearchableGroup);\nDSMenuSearchableGroupWithSchema.propTypes = props;\n\nexport default focusGroupManagerHoc(SearchableGroup);\n\nexport { DSMenuSearchableGroupWithSchema };\n","import React from 'react';\nimport { describe, PropTypes } from 'react-desc';\nimport { aggregatedClasses } from '@elliemae/ds-classnames';\nimport DSSeparator from '@elliemae/ds-separator';\nimport styled from 'styled-components';\n\nconst blockName = 'menu-separator';\nconst Li = styled.li`\n  display: flex;\n  align-items: flex-start;\n  flex-direction: column;\n`;\n\nconst Title = aggregatedClasses('h5')(blockName, 'title');\nconst MenuSeparator = ({ title, showSeparator = true }) => (\n  <Li>\n    {showSeparator && <DSSeparator />}\n    {title && <Title>{title}</Title>}\n  </Li>\n);\n\nconst props = {\n  /** menu separator h5 title */\n  title: PropTypes.string.description('menu separator h5 title'),\n  /** toggle separator on and off */\n  showSeparator: PropTypes.bool.description('toggle separator on and off'),\n};\n\nMenuSeparator.propTypes = props;\n\nconst DSMenuSeparatorWithSchema = describe(MenuSeparator);\nDSMenuSeparatorWithSchema.propTypes = props;\n\nexport default MenuSeparator;\n\nexport { DSMenuSeparatorWithSchema };\n","/* eslint-disable */\nimport createIcon from './utils/createIcon';\n\nexport default createIcon({\n  paths: ['M7.5 12.875L4.625 10l-.875.875 3.75 3.75 8.75-8.75L15.375 5z'],\n  height: 20,\n  width: 20,\n});\n","import React from 'react';\nimport { PropTypes, describe } from 'react-desc';\nimport CheckableGroup from '@elliemae/ds-shared/CheckableGroup';\n\nfunction CheckboxGroup(props) {\n  return <CheckableGroup {...props} multi />;\n}\n\nconst props = {\n  /* The item (if multi false) or items (if multi true) selected */\n  active: PropTypes.arrayOf(PropTypes.string).description(\n    'The item (if multi false) or items (if multi true) selected',\n  ),\n  /* Whether is multi select or not */\n  multi: PropTypes.bool.description('Whether is multi select or not'),\n  /* Handler when a user checks an item */\n  onCheck: PropTypes.func.description('Handler when a user checks an item'),\n};\n\nCheckboxGroup.propTypes = props;\n\nconst DSMenuCheckboxGroupWithSchema = describe(CheckboxGroup);\nDSMenuCheckboxGroupWithSchema.propTypes = props;\n\nexport default CheckboxGroup;\n\nexport { DSMenuCheckboxGroupWithSchema };\n","import React from 'react';\nimport { describe, PropTypes } from 'react-desc';\nimport CheckableGroup from '@elliemae/ds-shared/CheckableGroup';\n\nfunction RadioGroup(props) {\n  return <CheckableGroup {...props} multi={false} />;\n}\n\nconst props = {\n  /* The item selected */\n  active: PropTypes.arrayOf(PropTypes.string).description('the item selected'),\n  /* Handler when a user checks an item */\n  onCheck: PropTypes.func.description('Handler when a user checks an item'),\n};\n\nRadioGroup.propTypes = props;\n\nconst DSMenuRadioGroupWithSchema = describe(RadioGroup);\n\nDSMenuRadioGroupWithSchema.propTypes = props;\n\nexport default RadioGroup;\n\nexport { DSMenuRadioGroupWithSchema };\n","/* eslint-disable */\nimport createIcon from './utils/createIcon';\n\nexport default createIcon({\n  paths: [\n    'M12 10.5a.503.503 0 0 0-.109-.313l-4-5a.5013.5013 0 0 0-.703-.078c-.214.173-.25.488-.078.703l3.75 4.688-3.75 4.688c-.172.218-.136.531.078.703.216.172.53.138.703-.078l4-5A.501.501 0 0 0 12 10.5z',\n  ],\n  height: 20,\n  width: 20,\n});\n","/* eslint-disable */\nimport createIcon from './utils/createIcon';\n\nexport default createIcon({\n  paths: [\n    'M18.869 19.162l-5.943-6.484c1.339-1.401 2.075-3.233 2.075-5.178 0-2.003-.78-3.887-2.197-5.303S9.504 0 7.501 0 3.614.78 2.198 2.197.001 5.497.001 7.5s.78 3.887 2.197 5.303S5.498 15 7.501 15c1.726 0 3.362-.579 4.688-1.645l5.943 6.483a.497.497 0 0 0 .369.162.4997.4997 0 0 0 .369-.837l-.001-.001zM1 7.5C1 3.916 3.916 1 7.5 1S14 3.916 14 7.5 11.084 14 7.5 14 1 11.084 1 7.5z',\n  ],\n  height: 20,\n  width: 20,\n});\n","import { useState, useEffect, useCallback } from 'react';\nimport { debounce } from '@elliemae/ds-utilities/utils';\n\n// eslint-disable-next-line max-params\nfunction handleSearch(\n  clearOnSearch,\n  setValue,\n  searchOnEnter,\n  value,\n  onSearch,\n  property,\n  clickTrigger,\n  onSearchButtonClick,\n) {\n  if (clickTrigger) {\n    onSearchButtonClick();\n  }\n  if (clearOnSearch) setValue('');\n  if (searchOnEnter && !value) return;\n  onSearch({\n    query: { [property]: value },\n    property,\n    value,\n  });\n}\n\nexport function useSearch(params = {}) {\n  const {\n    onKeyUp,\n    onSearch,\n    onSearchButtonClick,\n    property,\n    clearOnSearch,\n    searchOnEnter,\n    onChange,\n  } = params;\n  const [value, setValue] = useState(params.value);\n  const debouncedSearch = useCallback(debounce(handleSearch, 200), []);\n  // update state if prop changes\n  useEffect(() => {\n    if (value !== params.value) {\n      setValue(params.value);\n    }\n  }, [params.value]);\n\n  const searchWithParams = (clickedSearchButton = false) =>\n    handleSearch(\n      clearOnSearch,\n      setValue,\n      searchOnEnter,\n      value,\n      onSearch,\n      property,\n      clickedSearchButton,\n      onSearchButtonClick,\n    );\n\n  const handleChange = ({ target }) => {\n    onChange(target.value);\n    setValue(target.value);\n    if (!searchOnEnter) {\n      // Functional update to get latest value state, similar to this.setState callback\n      setValue((prevValue) => {\n        debouncedSearch(\n          clearOnSearch,\n          setValue,\n          searchOnEnter,\n          prevValue,\n          onSearch,\n          property,\n        );\n        return prevValue;\n      });\n    }\n  };\n\n  const handleClear = () => {\n    onChange('');\n    setValue('');\n    if (!searchOnEnter) {\n      // Functional update to get latest value state, similar to this.setState callback\n      setValue((prevValue) => {\n        debouncedSearch(\n          clearOnSearch,\n          setValue,\n          searchOnEnter,\n          prevValue,\n          onSearch,\n          property,\n        );\n        return prevValue;\n      });\n    }\n    debouncedSearch(\n      clearOnSearch,\n      setValue,\n      searchOnEnter,\n      value,\n      onSearch,\n      property,\n    );\n  };\n\n  const handleKeyUp = (e) => {\n    const { key } = e;\n    if (searchOnEnter && key === 'Enter') {\n      searchWithParams();\n    }\n    onKeyUp(e);\n  };\n\n  return {\n    searchValue: value,\n    handleChange,\n    handleSearch: searchWithParams,\n    handleKeyUp,\n    handleClear,\n  };\n}\n","import React from 'react';\nimport { PropTypes } from 'react-desc';\nimport styled from 'styled-components';\nimport { focus } from '@elliemae/ds-system';\n\nconst Button = styled.button`\n  all: unset;\n  position: absolute;\n  height: calc(100% - 2px);\n  width: 28px;\n  top: 1px;\n  right: 1px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  box-sizing: border-box;\n  cursor: pointer;\n  z-index: 1;\n  svg {\n    fill: ${(props) => props.theme.colors.brand['600']};\n  }\n  &:disabled {\n    color: #5d6775;\n    cursor: not-allowed;\n    svg {\n      fill: #5d6775;\n    }\n  }\n  &:focus {\n    ${focus()}\n  }\n`;\n\nconst SButton = ({ icon, disabled, onClick }) => (\n  <Button\n    data-testid=\"ds-searchbox-button\"\n    onClick={onClick}\n    disabled={disabled}\n    type=\"button\"\n  >\n    {icon}\n  </Button>\n);\n\nSButton.propTypes = {\n  /** click handler for button */\n  onClick: PropTypes.func.isRequired.description('click handler for button'),\n  /** ds icon to render inside button */\n  icon: PropTypes.node.isRequired.description(\n    'ds icon to render inside button',\n  ),\n  /** disable button */\n  disabled: PropTypes.bool.description('disable button'),\n};\n\nexport { SButton };\n","import styled from 'styled-components';\nimport DSTextBox from '../TextBox';\nexport const SearchBoxTextBox = styled(DSTextBox)`\n  padding-right: 33px;\n`;\n","import { PropTypes } from 'react-desc';\n\nexport const searchBoxProps = {\n  /** Set of Properties attached to the main container */\n  containerProps: PropTypes.object.description(\n    'Set of Properties attached to the main container',\n  ),\n  /** html class attribute */\n  className: PropTypes.string.description('html class attribute'),\n  /** ref to the components container */\n  innerRef: PropTypes.object.description('ref to the components container'),\n  /** Set style to the search box */\n  style: PropTypes.object.description('Set style to the search box'),\n  /** search property */\n  property: PropTypes.string.description('search property'),\n  /** Placeholder for the search box */\n  placeholder: PropTypes.string.description('Placeholder for the search box'),\n  /** Whether to trigger the search once the enter is pressed */\n  searchOnEnter: PropTypes.bool.description(\n    'Whether to trigger the search once the enter is pressed',\n  ),\n  /** Whether to clear the input on search */\n  clearOnSearch: PropTypes.bool.description(\n    'Whether to clear the input on search',\n  ),\n  /** function triggered once in the search box a keyboard key is released */\n  onKeyUp: PropTypes.func.description(\n    'function triggered once in the search box a keyboard key is released',\n  ),\n  /** function triggered once the search action begins (search icon click/ enter keypress) */\n  onSearch: PropTypes.func.description(\n    'unction triggered once the search action begins (search icon click/ enter keypress)',\n  ),\n  /** function triggered once the search icon is clicked */\n  onSearchButtonClick: PropTypes.func.description(\n    'function triggered once the search icon is clicked',\n  ),\n  /** function that is triggered on change */\n  onChange: PropTypes.func.description('function that is triggered on change'),\n  /** Function that is triggered on blur */\n  onBlur: PropTypes.func.description('Function that is triggered on blur'),\n  /** searchbox input value */\n  value: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.number,\n    PropTypes.object,\n  ]).description('searchbox input value'),\n  /** Whether to show an icon or not */\n  showIcon: PropTypes.bool.description('Whether to show an icon or not'),\n  /** Disables the search input and button */\n  disabled: PropTypes.bool.description('Disables the search input and button'),\n  /** Disables the search button */\n  disableButton: PropTypes.bool.description('Disables the search button'),\n  /** whether the input is read only or not */\n  readOnly: PropTypes.bool.description('whether the input is read only or not'),\n  /** Show clearable button */\n  clearable: PropTypes.bool.description('Show clearable button'),\n};\n\nexport const navSearchBoxProps = {\n  /** searchbox input value */\n  value: PropTypes.string.isRequired.description('searchbox input value'),\n  /** function that is triggered on change */\n  onChange: PropTypes.func.isRequired.description(\n    'function that is triggered on change',\n  ),\n  /** Function that is triggered on blur */\n  onBlur: PropTypes.func.description('Function that is triggered on blur'),\n  /** triggered on next chevron click */\n  onNext: PropTypes.func.isRequired.description(\n    'triggered on next chevron click',\n  ),\n  /** triggered on prev chevron click */\n  onPrevious: PropTypes.func.isRequired.description(\n    'triggered on prev chevron click',\n  ),\n  /** function that is triggered on clear button press */\n  onClear: PropTypes.func.isRequired.description(\n    'function that is triggered on clear button press',\n  ),\n  /** zero based index to show on search box, -1 hides navigation */\n  currentResultIndex: PropTypes.number.isRequired.description(\n    'zero based index to show on search box, -1 hides navigation',\n  ),\n  /** total items to navigate */\n  totalResults: PropTypes.number.isRequired.description(\n    'total items to navigate',\n  ),\n  /** Placeholder for the search box */\n  placeholder: PropTypes.string.description('Placeholder for the search box'),\n};\n","export const defaultProps = {\n  className: '',\n  clearable: false,\n  clearOnSearch: false,\n  containerProps: {},\n  disableButton: false,\n  disabled: false,\n  innerRef: undefined,\n  onBlur: () => null,\n  onChange: () => null,\n  onKeyUp: () => null,\n  onSearch: () => null,\n  onSearchButtonClick: () => null,\n  placeholder: 'Search all',\n  property: 'all',\n  readOnly: false,\n  searchOnEnter: true,\n  showIcon: true,\n  style: {},\n  value: undefined,\n};\n\nexport const navSearchBoxDefaultProps = {\n  placeholder: 'Search...',\n  currentResultIndex: -1,\n};\n","import React, { cloneElement } from 'react';\n\nexport default (children, extraProps = {}) =>\n  React.Children.map(\n    children,\n    component =>\n      component\n        ? cloneElement(component, {\n            ...extraProps,\n            ...component.props,\n            className: `${component.props.className} toolbar-item`,\n          })\n        : component,\n    null,\n  );\n","import React, { useMemo } from 'react';\nimport { PropTypes, describe } from 'react-desc';\nimport { useCheckableGroup } from '@elliemae/ds-shared/CheckableGroup';\nimport SearchableGroup from './SearchableGroup';\nimport { menuItemFactory } from './menuItemFactory';\nimport VirtualMenuList from '../VirtualMenuList';\n\nconst noop = () => null;\n\nfunction SelectionGroup({\n  multi = false,\n  searchable = false,\n  focusOnOpen = false,\n  onSelect = noop,\n  children,\n  items = undefined,\n  active = multi ? [] : '',\n  width,\n  height,\n}) {\n  const renderedItems = useMemo(\n    () =>\n      items &&\n      items.map((item) => {\n        const Component = menuItemFactory(multi ? 'checkbox' : 'radio');\n        return (\n          <Component\n            {...item}\n            key={item.name || item.id || item.key}\n            item={item}\n            name={item.id || item.name}\n          />\n        );\n      }),\n    [items],\n  );\n  const decoratedGroupChildren = useCheckableGroup({\n    children: renderedItems || children,\n    multi,\n    active,\n    onCheck: onSelect,\n  });\n\n  if (searchable) {\n    return (\n      <SearchableGroup\n        focusOnOpen={focusOnOpen}\n        height={height}\n        items={items}\n        width={width}\n      >\n        {decoratedGroupChildren}\n      </SearchableGroup>\n    );\n  }\n  return (\n    <VirtualMenuList\n      height={height}\n      items={decoratedGroupChildren}\n      width={width}\n    />\n  );\n}\n\nconst props = {\n  /** toggle on multi select */\n  multi: PropTypes.bool.description('toggle on multi select'),\n  /** toggle on searchable behavior */\n  searchable: PropTypes.bool.description('toggle on searchable behavior'),\n  /** toggle to focus component on open */\n  focusOnOpen: PropTypes.bool.description('toggle to focus component on open'),\n  /** callback that triggers when select happens */\n  onSelect: PropTypes.func.description(\n    'callback that triggers when select happens',\n  ),\n  children: PropTypes.node.description(''),\n  /** selection group items  */\n  items: PropTypes.array.description('selection group items'),\n  /** array of values for multi and string for single selection */\n  active: PropTypes.oneOfType([PropTypes.string, PropTypes.array]).description(\n    'array of values for multi and string for single selection',\n  ),\n  /** selection group width */\n  width: PropTypes.number.description('selection group width'),\n  /** selection group height */\n  height: PropTypes.number.description('selection group height'),\n};\n\nSelectionGroup.propTypes = props;\n\nconst DSMenuSelectionGroupWithSchema = describe(SelectionGroup);\nDSMenuSelectionGroupWithSchema.propTypes = props;\n\nexport default SelectionGroup;\n\nexport { DSMenuSelectionGroupWithSchema };\n","import React from 'react';\nimport DSCheckbox from '@elliemae/ds-form/Checkbox';\nimport MenuItemCheckable from './MenuItemCheckable';\n\nfunction MenuItemCheckbox({ checked, ...rest }) {\n  return (\n    <MenuItemCheckable\n      {...rest}\n      leftAddon={<DSCheckbox checked={checked} />}\n      role=\"menuitemcheckbox\"\n    />\n  );\n}\n\nexport default MenuItemCheckbox;\n","/* eslint-disable import/no-cycle */\nimport React from 'react';\nimport { isFunction } from '@elliemae/ds-utilities/utils';\n\nimport Separator from './Separator';\nimport MenuItem from './MenuItem';\nimport SubMenu from './SubMenu';\nimport SelectionGroup from './SelectionGroup';\nimport MenuItemCheckbox from './MenuItemCheckbox';\nimport MenuItemRadio from './MenuItemRadio';\n\nconst itemTypes = {\n  separator: Separator,\n  menuitem: MenuItem,\n  radio: MenuItemRadio,\n  checkbox: MenuItemCheckbox,\n  submenu: SubMenu,\n  'selection-group': SelectionGroup,\n};\n\nconst fallback = {\n  SelectionGroup: 'selection-group',\n};\n\nexport function menuItemFactory(\n  type = '',\n  items,\n  defaultItem = itemTypes.menuitem,\n) {\n  const itemsObject = items || itemTypes;\n  const parsedType = fallback[type] || type.toLowerCase();\n  return itemsObject[parsedType] || defaultItem;\n}\n\nexport function renderMenuItems(options, factory = menuItemFactory) {\n  return options.map((option, index) => {\n    if (isFunction(option.renderer)) {\n      return option.renderer({\n        key: option.id,\n        item: option,\n      });\n    }\n    const ItemComponent = factory(option.type);\n    const children =\n      option.subItems && renderMenuItems(option.subItems, factory);\n    return (\n      <ItemComponent\n        {...option}\n        key={option.id || index}\n        item={option}\n        onClick={null}\n        onMouseDown={option.onClick}\n        // onClick callback called in onMouseDown due to events order issue\n      >\n        {children}\n      </ItemComponent>\n    );\n  });\n}\n","/* eslint-disable max-lines */\n/* eslint-disable import/no-cycle */\nimport React, { useRef, useMemo, useContext } from 'react';\nimport { PropTypes, describe } from 'react-desc';\nimport { omit } from 'lodash';\nimport { aggregatedClasses } from '@elliemae/ds-classnames';\nimport { mergeRefs } from '@elliemae/ds-utilities/system';\nimport { useFocusGroupItem } from '@elliemae/ds-shared/FocusGroup';\nimport { runAll } from '@elliemae/ds-utilities/utils';\nimport DSTruncatedTooltipText from '@elliemae/ds-truncated-tooltip-text';\nimport { renderMenuItems } from './menuItemFactory';\nimport SubMenu from './SubMenu';\nimport MenuContext from '../MenuContext';\n\nconst noop = () => null;\n\nconst blockName = 'menu-item';\n\nconst Content = aggregatedClasses('div')(blockName, 'content');\nconst Addon = aggregatedClasses('div')(\n  blockName,\n  'addon',\n  ({ empty, fixedItem }) => ({ empty, fixedItem }),\n);\n\nconst renderAddon = (addon, fixedItem, addonId) => (\n  <Addon key={addonId} classProps={{ fixedItem }}>\n    {addon}\n  </Addon>\n);\n\nconst renderAddons = (addons, fixedItem) =>\n  Array.isArray(addons)\n    ? addons.map(renderAddon)\n    : renderAddon(addons, fixedItem);\n\nconst Wrapper = aggregatedClasses('li')(\n  blockName,\n  null,\n  ({ disabled, disabledAddonInactive, customRenderer, fixedItem, type }) => ({\n    disabled,\n    disabledAddonInactive,\n    customRenderer,\n    fixedItem,\n    [`menu-type-${type}`]: type,\n  }),\n);\nconst calculateSize = (length = 0) => {\n  if (length > 45) return 45 * 7;\n  return length * 7;\n};\nfunction MenuItem(props) {\n  const {\n    innerRef,\n    as = 'li',\n    role = 'menuitem',\n    leftAddon = null,\n    rightAddon = undefined,\n    disabledAddonInactive = undefined,\n    label = undefined,\n    children,\n    tabIndex = -1,\n    onKeyDown = noop,\n    fixedItem = false,\n    noAddon,\n    disabled = false,\n    customRenderer,\n    maxOption,\n    closeMenu,\n    style,\n    ...otherProps\n  } = props;\n\n  const menuCxt = useContext(MenuContext);\n  const ref = useRef(null);\n  useFocusGroupItem(ref);\n  if (otherProps.subItems) {\n    return (\n      <SubMenu {...props} closeMenu={menuCxt.closeMenu}>\n        {renderMenuItems(otherProps.subItems)}\n      </SubMenu>\n    );\n  }\n\n  const wrapperProps = useMemo(() => omit(otherProps, ['icon']), [otherProps]);\n\n  const onClick = (...args) => {\n    if (wrapperProps.onClick) wrapperProps.onClick(...args);\n    if (wrapperProps.closeOnClick && menuCxt.closeMenu) {\n      menuCxt.closeMenu(...args);\n    }\n  };\n\n  return (\n    <Wrapper\n      as={as}\n      classProps={{\n        disabled,\n        disabledAddonInactive,\n        customRenderer,\n        fixedItem,\n        type: otherProps.type,\n      }}\n      id={otherProps.id}\n      innerRef={\n        otherProps.type !== 'disabled' ? mergeRefs(innerRef, ref) : innerRef\n      }\n      onKeyDown={\n        !fixedItem &&\n        runAll((e) => {\n          if (e.key === ' ' || e.key === 'Enter') {\n            e.preventDefault();\n            e.target.dispatchEvent(\n              new MouseEvent('click', {\n                view: window,\n                bubbles: true,\n                cancelable: false,\n              }),\n            );\n          }\n        }, onKeyDown)\n      }\n      role={role}\n      style={style}\n      tabIndex={tabIndex}\n      {...wrapperProps}\n      onClick={onClick}\n    >\n      {!noAddon && renderAddons(leftAddon, fixedItem)}\n      {label && (\n        <Content\n          style={\n            maxOption > 0\n              ? {\n                  width: `${calculateSize(maxOption)}px`,\n                  maxWidth: `${calculateSize(maxOption)}px`,\n                }\n              : undefined\n          }\n        >\n          <DSTruncatedTooltipText value={label} />\n        </Content>\n      )}\n      {customRenderer}\n      {rightAddon && renderAddons(rightAddon)}\n      {children}\n    </Wrapper>\n  );\n}\n\nconst props = {\n  /** Renders the MenuItem with a specific html element */\n  as: PropTypes.element.description(\n    'Renders the MenuItem with a specific html element',\n  ),\n  /**\n   * reference to the component\n   */\n  innerRef: PropTypes.oneOfType([\n    PropTypes.func,\n    PropTypes.shape({ current: PropTypes.any }),\n  ]).description('reference to the component'),\n  /** Renders the passed element to the left */\n  leftAddon: PropTypes.element.description(\n    'Renders the passed element to the left',\n  ),\n  /** Renders the passed element to the right */\n  rightAddon: PropTypes.element.description(\n    'Renders the passed element to the right',\n  ),\n  /** Label for the menu item */\n  label: PropTypes.string.description('Label for the menu item'),\n  /** style object for menu item wrapper */\n  style: PropTypes.object.description('style object for menu item wrapper'),\n  /** disable menu item */\n  disabled: PropTypes.bool.description('disable menu item'),\n  /** HTML tabindex to manage focus order */\n  tabindex: PropTypes.number.description('HTML tabindex to manage focus order'),\n  /** a11y role */\n  role: PropTypes.string.description('a11y role'),\n};\n\nMenuItem.propTypes = props;\n\nconst DSMenuItemWithSchema = describe(MenuItem);\nDSMenuItemWithSchema.propTypes = props;\n\nexport default MenuItem;\n\nexport { DSMenuItemWithSchema };\n","/* eslint-disable import/no-cycle */\nimport React from 'react';\nimport { PropTypes, describe } from 'react-desc';\nimport Checkmark from '@elliemae/ds-icons/Checkmark';\nimport { runAll } from '@elliemae/ds-utilities/utils';\nimport MenuItem from './MenuItem';\n\n// TODO: where to move this?\nfunction useCheckable({ checked }) {\n  return {\n    checked,\n    'aria-checked': checked,\n  };\n}\n\n/**\n * Reuses the same props as the MenuItem\n *\n * @param root0\n * @param root0.role\n * @param root0.checked\n * @param root0.name\n * @param root0.checkIcon\n * @param root0.children\n * @param root0.leftAddon\n * @param root0.item\n */\nfunction MenuItemCheckable({\n  role = 'menuitemcheckbox',\n  checked = false,\n  name = '',\n  checkIcon = <Checkmark color={['brand-primary', 600]} />,\n  // eslint-disable-next-line react/prop-types\n  children,\n  leftAddon,\n  item = undefined,\n  ...otherProps\n}) {\n  const checkableProps = useCheckable({ checked, name });\n  const handleClick = () =>\n    runAll(otherProps.onClick, checkableProps.onClick)(\n      { target: { value: name, checked } },\n      item,\n    );\n\n  const checkAddon =\n    leftAddon ||\n    (checkableProps.checked ? (\n      <div className=\"checkable-mark\">{checkIcon}</div>\n    ) : (\n      <div />\n    ));\n  return (\n    <MenuItem\n      {...item}\n      {...otherProps}\n      {...checkableProps}\n      customRenderer={\n        item && item.customRenderer ? item.customRenderer : () => {}\n      }\n      items={otherProps.subItems}\n      leftAddon={checkAddon}\n      onClick={handleClick}\n      role={role}\n    />\n  );\n}\n\nconst props = {\n  /** Whether the item is checked or not */\n  checked: PropTypes.bool.description('Whether the item is checked or not'),\n  /** A custom item when the item is checked */\n  checkIcon: PropTypes.element.description(\n    'A custom item when the item is checked',\n  ),\n  /** form field name */\n  name: PropTypes.string.description('form field name'),\n  /** menu item object props */\n  item: PropTypes.object.description('menu item object props'),\n  /** a11y role */\n  role: PropTypes.string.description('a11y role'),\n  /** left addon component */\n  leftAddon: PropTypes.node.description('left addon component'),\n};\n\nMenuItemCheckable.propTypes = props;\n\nconst DSMenuItemCheckeableWithSchema = describe(MenuItemCheckable);\nDSMenuItemCheckeableWithSchema.propTypes = props;\n\nexport default MenuItemCheckable;\nexport { DSMenuItemCheckeableWithSchema };\n","import React from 'react';\nimport { describe, PropTypes } from 'react-desc';\nimport MenuItemCheckable from './MenuItemCheckable';\n\nfunction MenuItemRadio(props) {\n  return <MenuItemCheckable {...props} role=\"menuitemradio\" />;\n}\n\nconst props = {\n  /** Whether the item is checked or not */\n  checked: PropTypes.bool.description('Whether the item is checked or not'),\n  /** A custom item when the item is checked */\n  checkIcon: PropTypes.element.description(\n    'A custom item when the item is checked',\n  ),\n};\n\nMenuItemRadio.propTypes = props;\n\nconst DSMenuItemRadioWithSchema = describe(MenuItemCheckable);\nDSMenuItemRadioWithSchema.propTypes = props;\n\nexport default MenuItemRadio;\n\nexport { DSMenuItemRadioWithSchema };\n","/* eslint-disable max-lines */\n/* eslint-disable react/prop-types */\n/* eslint-disable import/no-cycle */\nimport React, { useContext, useEffect, useMemo, useRef } from 'react';\nimport { PropTypes, describe } from 'react-desc';\nimport { omit } from 'lodash';\nimport { aggregatedClasses } from '@elliemae/ds-classnames';\nimport { animated } from 'react-spring/web.cjs';\nimport { useOnClickOutside } from '@elliemae/ds-utilities/hooks';\nimport { mergeRefs } from '@elliemae/ds-utilities/system';\nimport {\n  focusGroupManagerHoc,\n  FocusGroupContext,\n} from '@elliemae/ds-shared/FocusGroup';\nimport { useHiddenTransition } from '@elliemae/ds-hidden';\nimport MenuItemRadio from './MenuItems/MenuItemRadio';\nimport MenuItemCheckbox from './MenuItems/MenuItemCheckbox';\nimport CheckboxGroup from './MenuItems/CheckboxGroup';\nimport RadioGroup from './MenuItems/RadioGroup';\nimport Separator from './MenuItems/Separator';\nimport MenuItem from './MenuItems/MenuItem';\nimport SubMenu from './MenuItems/SubMenu';\nimport SearchableGroup from './MenuItems/SearchableGroup';\nimport SelectionGroup from './MenuItems/SelectionGroup';\nimport { renderMenuItems, menuItemFactory } from './MenuItems/menuItemFactory';\nimport MenuContext from './MenuContext';\n\nconst RESPONSIVE_HEIHGT_MARGIN = 120;\n\nconst blockName = 'menu';\n\nconst noop = () => {};\n\nconst MenuComponent = aggregatedClasses('div')(\n  blockName,\n  '',\n  ({ menuComboBox, type }) => ({\n    'menu-combo-box': menuComboBox,\n    [`type-${type}`]: type,\n  }),\n);\n\n/**\n * todo: -- IDEA -- each menu could have an overlay based on an overlay stack context so we can\n * capture the context of the clicks on very nested components\n */\n\nconst isChildOfType = (child, type) => child.type.name === type;\n\nfunction DSMenu({\n  containerProps = {},\n  innerRef,\n  as: MenuTag = animated.ul,\n  children = undefined,\n  onClickOutside = noop,\n  // handlers from hidden\n  visible = undefined,\n  focusOnOpen = false,\n  maxOption = 0,\n  style = {},\n  minWidth = undefined,\n  maxWidth = undefined,\n  closeMenu,\n  responsiveHeight = false,\n  ...otherProps\n}) {\n  const menuRef = useRef(null);\n  const { focusFirst } = useContext(FocusGroupContext);\n  const { destroyed, ...hiddenProps } = useHiddenTransition({ visible, style });\n\n  // force no addon to the children if the menu doesn't have any item with leftAddon like SelectionGroup\n  const nextChildren = useMemo(() => {\n    const forceLeftAddon = React.Children.toArray(children).some(\n      (child) =>\n        isChildOfType(child, 'SelectionGroup') ||\n        isChildOfType(child, 'MenuItemCheckbox') ||\n        isChildOfType(child, 'MenuItemRadio') ||\n        child.props.leftAddon,\n    );\n\n    return React.Children.map(\n      children,\n      (child) =>\n        child &&\n        React.cloneElement(child, {\n          ...child.props,\n          noAddon: !forceLeftAddon ? true : undefined,\n          maxOption,\n          closeMenu,\n        }),\n    );\n  }, [children]);\n\n  useOnClickOutside(menuRef, onClickOutside);\n\n  useEffect(() => {\n    if (focusOnOpen && visible) {\n      setTimeout(() => {\n        focusFirst();\n      }, 0);\n    }\n  }, [visible, focusOnOpen]);\n  // todo: find out a better approach to this\n  return !hiddenProps.destroyed ? (\n    <MenuContext.Provider value={{ visible, closeMenu }}>\n      <MenuComponent\n        data-testid=\"em-ds-menu\"\n        {...containerProps}\n        as={MenuTag}\n        classProps={{ ...(otherProps.classProps || {}), type: otherProps.type }}\n        innerRef={mergeRefs(innerRef, menuRef)}\n        role=\"menu\"\n        {...omit(otherProps, ['scheduleUpdate'])}\n        {...hiddenProps}\n      >\n        {/* eslint-disable indent */}\n        <div\n          className=\"menu-component-internal-wrapper\"\n          style={{\n            ...style,\n            minWidth,\n            maxWidth,\n            ...(responsiveHeight\n              ? {\n                  overflowY: 'scroll',\n                  maxHeight: responsiveHeight\n                    ? `${window.innerHeight - RESPONSIVE_HEIHGT_MARGIN}px`\n                    : undefined,\n                }\n              : {}),\n          }}\n        >\n          {/* eslint-enable indent */}\n          {nextChildren}\n        </div>\n      </MenuComponent>\n    </MenuContext.Provider>\n  ) : null;\n}\n\nconst Menu = focusGroupManagerHoc(DSMenu, { loop: true });\n\nconst props = {\n  /** Injected props to wrapper element of component */\n  containerProps: PropTypes.object.description(\n    'Injected props to wrapper element of component',\n  ),\n  /** Renders the menu with a specific html element */\n  as: PropTypes.element.description(\n    'Renders the menu with a specific html element',\n  ),\n  /** Handler when a user clicks outside the menu */\n  onClickOutside: PropTypes.func.description(\n    'Handler when a user clicks outside the menu',\n  ),\n  /** Whether the menu is visible or not */\n  visible: PropTypes.bool.description('Whether the menu is visible or not'),\n  /** When set to true, it's going to focus the first item */\n  focusOnOpen: PropTypes.bool.description(\n    \"When set to true, it's going to focus the first item\",\n  ),\n  /** Customize menu minWidth. Can be undefined or 'number' */\n  minWidth: PropTypes.number.description(\n    \"Customize menu minWidth. Can be undefined or 'number'\",\n  ),\n  /** Customize menu maxWidth. Can be undefined or 'number' */\n  maxWidth: PropTypes.number.description(\n    \"Customize menu maxWidth. Can be undefined or 'number'\",\n  ),\n};\n\nDSMenu.propTypes = props;\n\nconst DSMenuWithSchema = describe(DSMenu);\n\nDSMenuWithSchema.propTypes = props;\n\n// todo: add a handler to get this kind of exports for documentation\nMenu.Item = MenuItem;\nMenu.ItemCheckbox = MenuItemCheckbox;\nMenu.ItemRadio = MenuItemRadio;\nMenu.SubMenu = SubMenu;\nMenu.Separator = Separator;\nMenu.CheckboxGroup = CheckboxGroup;\nMenu.RadioGroup = RadioGroup;\nMenu.SearchableGroup = SearchableGroup;\nMenu.SelectionGroup = SelectionGroup;\n\nexport { Menu, menuItemFactory, renderMenuItems, DSMenuWithSchema };\nexport default Menu;\n","/* eslint-disable indent */\n/* eslint-disable max-lines */\n/* eslint-disable import/no-cycle */\nimport React, { useRef } from 'react';\nimport { PropTypes, describe } from 'react-desc';\nimport ChevronRight from '@elliemae/ds-icons/ChevronSmallRight';\nimport VerticalElipsis from '@elliemae/ds-icons/MoreOptionsVert';\nimport { useFocusGroupItem } from '@elliemae/ds-shared/FocusGroup';\nimport { useHiddenController } from '@elliemae/ds-hidden';\nimport DSButton, { BUTTON_VARIANT } from '@elliemae/ds-button';\nimport DSPopper from '@elliemae/ds-popper';\nimport { interactions } from '@elliemae/ds-popper/interaction';\nimport styled from 'styled-components';\nimport Menu from '../Menu';\nimport MenuItem from './MenuItem';\n\nconst ChevronRightComp = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 28px; // same width as the ellipsis button\n`;\n\nfunction SubMenu({\n  noAddon,\n  leftAddon = undefined,\n  label = undefined,\n  interactionType = 'hover',\n  children: subitems,\n  rightAddonType,\n  disabledAddonInactive,\n  checkableProps = {},\n  customRenderer,\n  onClick,\n  closeMenu,\n  id,\n}) {\n  const itemRef = useRef(null);\n  const focusOnOpen = useRef(false);\n  const { visible = false, onShow, onHide } = useHiddenController(undefined, {\n    interaction: 'click',\n  });\n\n  const interaction = rightAddonType === 'elipsis' ? 'click' : 'hover';\n\n  const { focusItemByNode } = useFocusGroupItem();\n  // todo: create a menu state to handle all related menu things\n  const handleShowSubItemsWithMouse = (e) => {\n    e.stopPropagation();\n    onShow();\n    focusOnOpen.current = true;\n  };\n  const handleShowWithMouse = (e) => {\n    if (onClick) onClick(e);\n  };\n  const handleShowWithMouseHover = () => {\n    onShow();\n    focusOnOpen.current = false;\n  };\n\n  const handleShowWithKeyboard = () => {\n    onShow();\n    focusOnOpen.current = true;\n  };\n\n  const hoverHandlers =\n    interaction === 'hover'\n      ? {\n          onMouseEnter: handleShowWithMouseHover,\n          onMouseLeave: onHide,\n        }\n      : { onClick: handleShowWithMouse };\n\n  const rightAddon =\n    rightAddonType === 'elipsis' ? (\n      <DSButton\n        aria-label=\"vertical-elipsis\"\n        data-testid=\"vertical-elipsis\"\n        buttonType=\"text\"\n        leftIcon={\n          <VerticalElipsis\n            className=\"submenu-arrow\"\n            color={['brand-primary', 600]}\n            size=\"s\"\n          />\n        }\n        onClick={(e) => handleShowSubItemsWithMouse(e)}\n        size=\"m\"\n        variant={BUTTON_VARIANT.DEFAULT}\n      />\n    ) : (\n      <ChevronRightComp>\n        <ChevronRight\n          data-testid=\"chevron-right\"\n          className=\"submenu-arrow\"\n          color={['brand-primary', 600]}\n          size=\"sm\"\n        />\n      </ChevronRightComp>\n    );\n\n  return (\n    <>\n      <DSPopper\n        contentComponent={\n          <Menu\n            focusKeyBindings={{\n              ArrowLeft: [() => focusItemByNode(itemRef.current), 'exit'],\n            }}\n            focusOnOpen={focusOnOpen.current}\n            onExitFocusGroup={onHide}\n            {...hoverHandlers}\n            closeMenu={closeMenu}\n            visible={visible}\n          >\n            {subitems}\n          </Menu>\n        }\n        interactionType={interactionType}\n        isOpen={visible}\n        onOpen={(opening) => (opening ? onShow() : onHide())}\n        placement=\"right-start\"\n        showArrow={false}\n        triggerComponent={\n          <MenuItem\n            customRenderer={customRenderer}\n            disabledAddonInactive={disabledAddonInactive}\n            id={id}\n            innerRef={itemRef}\n            label={label}\n            leftAddon={leftAddon}\n            noAddon={noAddon}\n            {...hoverHandlers}\n            onKeyDown={(e) => {\n              if (\n                e.key === 'ArrowRight' ||\n                e.key === 'Enter' ||\n                e.keyCode === 32\n              ) {\n                handleShowWithKeyboard();\n              }\n            }}\n            rightAddon={rightAddon}\n            {...checkableProps}\n          />\n        }\n      />\n    </>\n  );\n}\n\nconst props = {\n  /** dont show addon for submenu */\n  noAddon: PropTypes.bool.description('dont show addon for submenu'),\n  /** left addon */\n  leftAddon: PropTypes.node.description('left addon'),\n  /** submenu label */\n  label: PropTypes.string.description('submenu label'),\n  /** A type indicating how to open/close the tooltip */\n  interactionType: PropTypes.oneOf(interactions).description(\n    'A type indicating how to open/close the tooltip',\n  ),\n  /** sub menu items */\n  children: PropTypes.oneOfType([PropTypes.array, PropTypes.node]).description(\n    'sub menu items',\n  ),\n  /** right addon, ellipsis or undefined */\n  rightAddonType: PropTypes.oneOf(['ellipsis']).description(\n    'right addon, ellipsis or undefined',\n  ),\n  disabledAddonInactive: PropTypes.bool.description(''),\n  /** props passed to MenuItem component */\n  checkableProps: PropTypes.object.description(\n    'props passed to MenuItem component',\n  ),\n  /** custom renderer for menu item */\n  customRenderer: PropTypes.func.description('custom renderer for menu item'),\n  /** on click handler */\n  onClick: PropTypes.func.description('on click handler'),\n  closeMenu: PropTypes.any.description(''),\n  /** component id */\n  id: PropTypes.string.description('component id'),\n};\n\nSubMenu.propTypes = props;\n\nconst DSSubMenuWithSchema = describe(SubMenu);\n\nDSSubMenuWithSchema.propTypes = props;\n\nexport default SubMenu;\n\nexport { DSSubMenuWithSchema };\n","/* eslint-disable complexity */\nimport React from 'react';\nimport { describe } from 'react-desc';\nimport Search from '@elliemae/ds-icons/Search';\nimport { DSIconColors } from '@elliemae/ds-icon';\nimport CloseXsmall from '@elliemae/ds-icons/CloseXsmall';\nimport { SearchBoxTextBox } from './styled';\nimport { SButton } from './SButton';\nimport { useSearch } from './useSearch';\nimport { searchBoxProps } from './props';\nimport { defaultProps } from './defaultProps';\n\nconst DSSearchBox = ({\n  className,\n  clearable,\n  containerProps,\n  disableButton,\n  disabled,\n  innerRef,\n  onBlur,\n  onChange,\n  onKeyUp,\n  onSearch,\n  placeholder,\n  property,\n  readOnly,\n  searchOnEnter,\n  onSearchButtonClick,\n  showIcon,\n  style,\n  value,\n}) => {\n  const {\n    searchValue,\n    handleChange,\n    handleSearch,\n    handleKeyUp,\n    handleClear,\n  } = useSearch({\n    onChange,\n    onKeyUp,\n    onSearch,\n    onSearchButtonClick,\n    property,\n    searchOnEnter,\n    value,\n  });\n  const shouldShowClearIcon = showIcon && clearable && searchValue?.length > 0;\n  const shouldShowSearchIcon = !shouldShowClearIcon && showIcon;\n  const shouldShowAnyIcon = shouldShowClearIcon || shouldShowSearchIcon;\n\n  const PureSearchboxIcon = React.useMemo(() => {\n    let Icon = <Search />;\n    let handleOnClick = () => handleSearch(true);\n    if (!shouldShowAnyIcon) return null;\n    if (shouldShowClearIcon) {\n      Icon = <CloseXsmall color={DSIconColors.PRIMARY} />;\n      handleOnClick = handleClear;\n    }\n\n    return (\n      <SButton\n        disabled={disabled || disableButton}\n        icon={Icon}\n        onClick={handleOnClick}\n      />\n    );\n  }, [\n    shouldShowClearIcon,\n    shouldShowSearchIcon,\n    shouldShowAnyIcon,\n    disabled,\n    disableButton,\n    handleSearch,\n    handleClear,\n  ]);\n\n  return (\n    <div style={{ position: 'relative', zIndex: 0 }}>\n      <SearchBoxTextBox\n        className={className}\n        containerProps={containerProps}\n        disabled={disabled}\n        innerRef={innerRef}\n        onChange={handleChange}\n        onKeyUp={handleKeyUp}\n        onBlur={onBlur}\n        placeholder={placeholder}\n        readOnly={readOnly}\n        style={style}\n        value={searchValue}\n      />\n      {PureSearchboxIcon}\n    </div>\n  );\n};\n\nDSSearchBox.propTypes = searchBoxProps;\nDSSearchBox.defaultProps = defaultProps;\n\nconst SearchBoxWithSchema = describe(DSSearchBox);\nSearchBoxWithSchema.propTypes = searchBoxProps;\n\nexport { SearchBoxWithSchema };\nexport default DSSearchBox;\n","/* eslint-disable react/display-name */\nimport React from 'react';\nimport FocusGroupManager from './FocusGroupManager';\n\nexport default function FocusGroupHoc(WrappedComponent, options = {}) {\n  return ({\n    onExitFocusGroup,\n    onFocusPrevGroup,\n    focusKeyBindings,\n    ...props\n  }) => (\n    <FocusGroupManager\n      keyBindings={focusKeyBindings}\n      onExitFocusGroup={onExitFocusGroup}\n      onFocusPrevGroup={onFocusPrevGroup}\n      {...options}\n    >\n      <WrappedComponent {...props} {...options} />\n    </FocusGroupManager>\n  );\n}\n","import React from 'react';\n\nexport default React.createContext();\n","/* eslint-disable react/prop-types */\n/* eslint-disable indent */\nimport React, { useCallback, useMemo, useState } from 'react';\nimport { runAll, toggleInObject } from '@elliemae/ds-utilities/utils';\nimport DropdownMenuContext from './DropdownMenuContext';\n\nconst noop = () => null;\n\nfunction DropdownMenuProvider({\n  onSelectMenuItem = noop,\n  onOpenMenu = noop,\n  onClose,\n  children,\n  isOpen,\n  selection,\n  singleGroupSelection,\n  onSelectChange = noop,\n}) {\n  const [isMenuOpen, setMenuOpen] = useState(isOpen);\n\n  const closeMenu = useCallback(() => {\n    setMenuOpen(false);\n    onOpenMenu(false);\n    onClose();\n  });\n  const openMenu = useCallback(() => {\n    setMenuOpen(true);\n    onOpenMenu(true);\n  });\n\n  const handleItemClick = ({ item, group }) => {\n    let activeState;\n    // reset selection if single selection group is activated\n    let nextSelection = !singleGroupSelection ? selection : {};\n\n    if (group) {\n      activeState = group.active;\n      nextSelection = {\n        ...nextSelection,\n        [group.id]: activeState,\n      };\n    } else {\n      const selectionItem = group || item;\n      activeState = selectionItem.active || selectionItem.checked;\n\n      // can be toggled (radio with unselection)\n      nextSelection = Array.isArray(activeState)\n        ? {\n            ...nextSelection,\n            [selectionItem.id]: activeState,\n          }\n        : toggleInObject(\n            nextSelection,\n            selectionItem.id,\n            item.label || activeState || true,\n          );\n    }\n    onSelectChange({\n      item,\n      group,\n      selection: nextSelection,\n    });\n    // todo: just pass item on item and group when selection callback,\n    //  use onSelectchange for nextSelection\n    onSelectMenuItem(item, activeState, nextSelection);\n  };\n\n  const handleCloseOnClick = useCallback(({ item, group = {} }) => {\n    if (item.closeOnClick !== undefined) {\n      if (item.closeOnClick) closeMenu();\n      return;\n    }\n    if (group.closeOnClick !== undefined) {\n      if (group.closeOnClick) closeMenu();\n    }\n  }, []);\n\n  const valueProvider = useMemo(\n    () => ({\n      onItemClick: runAll(handleItemClick, handleCloseOnClick),\n      closeMenu,\n      openMenu,\n      isMenuOpen,\n      selection,\n    }),\n    [isMenuOpen, selection],\n  );\n  return (\n    <DropdownMenuContext.Provider value={valueProvider}>\n      {children}\n    </DropdownMenuContext.Provider>\n  );\n}\n\nexport default DropdownMenuProvider;\n","/* eslint-disable react/display-name */\nimport React, { useContext } from 'react';\nimport { runAll, get } from '@elliemae/ds-utilities/utils';\nimport DropdownMenuContext from './DropdownMenuContext';\n\nconst noop = () => null;\n\nconst defaultConfig = { type: 'default', handlerName: 'onClick' };\n\nfunction MenuItemClickableHOC(WrappedComponent, config) {\n  return ({ item = {}, ...restProps }) => {\n    const { type, handlerName } = { ...defaultConfig, ...config };\n    const { onItemClick, selection } = useContext(DropdownMenuContext);\n    const propHandler = restProps[handlerName] || noop;\n    const handler = {\n      [handlerName]: () => runAll(onItemClick, propHandler)({ item, type }),\n    };\n    return (\n      <WrappedComponent\n        {...restProps}\n        {...(type === 'selectable' && selection\n          ? { checked: get(selection, [item.id]) }\n          : {})}\n        {...handler}\n      />\n    );\n  };\n}\n\nexport default MenuItemClickableHOC;\n","/* eslint-disable react/display-name */\nimport React, { useContext } from 'react';\nimport { runAll, get } from '@elliemae/ds-utilities/utils';\nimport DropdownMenuContext from './DropdownMenuContext';\n\nconst noop = () => null;\n\nfunction MenuItemGroupSelectionHOC(WrappedComponent, handlerName = 'onSelect') {\n  return ({ item = {}, ...restProps }) => {\n    const { onItemClick, selection } = useContext(DropdownMenuContext);\n    const propHandler = restProps[handlerName] || noop;\n    const handler = {\n      [handlerName]: (active, itemOption) =>\n        runAll(\n          item.onSelect,\n          onItemClick,\n          propHandler,\n        )({ item: itemOption, group: { ...item, active } }),\n    };\n    return (\n      <WrappedComponent\n        {...restProps}\n        {...(selection\n          ? { active: get(selection, [item.id]) || item.active }\n          : {})}\n        {...handler}\n      />\n    );\n  };\n}\n\nexport default MenuItemGroupSelectionHOC;\n","import {\n  Menu,\n  renderMenuItems,\n  menuItemFactory,\n} from '@elliemae/ds-basic/Menu';\n\nimport MenuItemClickableHOC from './MenuItemClickableHOC';\nimport MenuItemGroupSelectionHOC from './MenuItemGroupSelectionHOC';\n\nconst itemTypes = {\n  separator: Menu.Separator,\n  menuitem: MenuItemClickableHOC(Menu.Item),\n  radio: MenuItemClickableHOC(Menu.ItemRadio, { type: 'selectable' }),\n  checkbox: MenuItemClickableHOC(Menu.ItemCheckbox, { type: 'selectable' }),\n  submenu: Menu.SubMenu,\n  'selection-group': MenuItemGroupSelectionHOC(Menu.SelectionGroup),\n};\n\nexport const factory = (type) =>\n  menuItemFactory(type, itemTypes, itemTypes.menuitem);\nexport const renderOptions = (options) => renderMenuItems(options, factory);\n","import React from 'react';\nimport styled from 'styled-components';\nimport { DSCircularProgressIndicator } from '@elliemae/ds-basic/CircularProgressIndicator';\n\nconst Wrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  height: 56px;\n`;\n\nconst LoadingIndicator = () => (\n  <Wrapper>\n    <DSCircularProgressIndicator size=\"m\" />\n  </Wrapper>\n);\n\nexport default LoadingIndicator;\n","import React, { useContext, useEffect, useMemo, useState } from 'react';\nimport getComponentFromProps from '@elliemae/ds-utilities/getComponentFromProps';\nimport DSPopper from '@elliemae/ds-basic/Popper';\nimport { Menu } from '@elliemae/ds-basic/Menu';\nimport { convertPropToCssClassName } from '@elliemae/ds-classnames';\nimport { runAll, isFunction } from '@elliemae/ds-utilities/utils';\nimport DropdownMenuContext from './DropdownMenuContext';\nimport { renderOptions, factory } from './decoratedMenuItemFactory';\nimport LoadingIndicator from './DropdownMenuLoadingIndicator';\n\nconst blockName = 'menu';\n\nconst getMax = (options) => {\n  let max = 0;\n  options.forEach((o) => {\n    if (o && o.label && String(o.label).length > max)\n      max = String(o.label).length;\n  });\n  return max;\n};\n\nconst DropdownMenuRenderer = ({\n  containerProps,\n  className,\n  options = [],\n  triggerComponent,\n  placement,\n  interactionType,\n  preventOverflow,\n  customMenu,\n  contentOffset,\n  contentStyle,\n  isOpen,\n  children,\n  menuProps,\n  referenceNode,\n  focusOnOpen: focusOnOpenProp,\n  onClickOutsideMenu,\n  responsiveHeight,\n  itemsRenderer,\n  maxWidth,\n  minWidth,\n  zIndex,\n  type,\n  loading,\n  hideIfNotVisible,\n}) => {\n  const [focusOnOpen, setFocusOnOpenMenu] = useState(focusOnOpenProp);\n  const { isMenuOpen, openMenu, closeMenu } = useContext(DropdownMenuContext);\n  const maxOption = useMemo(() => {\n    let max = 0;\n    options.forEach((o) => {\n      if (o && o.label && String(o.label).length > max)\n        max = String(o.label).length;\n      if (o && o.items) {\n        const nestedMax = getMax(o.items);\n        if (nestedMax > max) max = nestedMax;\n      }\n    });\n    return max;\n  }, [options]);\n\n  const optionsRendererd = useMemo(() => {\n    if (options[0] && options[0].type === 'separator') {\n      options[0].showSeparator = false;\n    }\n    return isFunction(itemsRenderer)\n      ? itemsRenderer(options, factory)\n      : renderOptions(options);\n  }, [options]);\n\n  const dropdownBlockName = convertPropToCssClassName(blockName);\n\n  const menuContent = () => {\n    if (loading) return <LoadingIndicator />;\n    if (children) return children;\n    if (optionsRendererd) return optionsRendererd;\n  };\n\n  const MenuComponent = customMenu ? (\n    getComponentFromProps(customMenu, {\n      options,\n      focusOnOpen,\n      maxOption,\n      ...menuProps,\n      closeMenu,\n      loading,\n    })\n  ) : (\n    <Menu\n      closeMenu={closeMenu}\n      focusOnOpen={focusOnOpen}\n      maxOption={type === 'phone' ? maxOption : undefined}\n      maxWidth={maxWidth}\n      minWidth={minWidth}\n      onClickOutside={onClickOutsideMenu}\n      onExitFocusGroup={closeMenu}\n      responsiveHeight={responsiveHeight}\n      type={type}\n      visible\n      {...menuProps}\n    >\n      {menuContent()}\n    </Menu>\n  );\n\n  useEffect(() => {\n    setFocusOnOpenMenu(focusOnOpenProp);\n  });\n\n  return (\n    <DSPopper\n      hideIfNotVisible={hideIfNotVisible}\n      blockName={dropdownBlockName}\n      containerProps={containerProps}\n      contentComponent={MenuComponent}\n      contentOffset={contentOffset}\n      contentStyle={contentStyle}\n      interactionType={interactionType}\n      isOpen={isOpen !== undefined ? isOpen : isMenuOpen}\n      onOpen={(opening) => (opening ? openMenu() : closeMenu())}\n      placement={placement}\n      preventOverflow={preventOverflow}\n      referenceNode={referenceNode}\n      showArrow={false}\n      triggerComponent={getComponentFromProps(triggerComponent, {\n        onClick:\n          interactionType === 'hover'\n            ? runAll(openMenu, triggerComponent.props.onClick)\n            : runAll(\n                !isMenuOpen ? openMenu : closeMenu,\n                triggerComponent.props.onClick,\n              ),\n        onMouseEnter: interactionType === 'hover' ? openMenu : undefined,\n        onKeyDown: (e) => {\n          if (e.key === 'ArrowDown' || e.key === ' ') {\n            e.preventDefault();\n            setFocusOnOpenMenu(true);\n            openMenu();\n          }\n        },\n        className: `${triggerComponent.props.className} ${className}`,\n      })}\n      zIndex={zIndex || menuProps.zIndex}\n    />\n  );\n};\n\nexport default DropdownMenuRenderer;\n","import React from 'react';\nimport DropdownMenuProvider from './DropdownMenuProvider';\nimport DropdownMenuRenderer from './DropdownMenuRenderer';\n\nfunction DropdownMenuWrapper(props) {\n  return (\n    <DropdownMenuProvider {...props}>\n      <DropdownMenuRenderer {...props} />\n    </DropdownMenuProvider>\n  );\n}\n\nexport default DropdownMenuWrapper;\n","/* eslint-disable max-lines */\nimport React from 'react';\nimport { PropTypes, describe } from 'react-desc';\nimport { TooltipTextProvider } from '@elliemae/ds-basic/TruncatedTooltipText';\n// todo: docgen handlers at the moment don't get data from alias\nimport { positions, Position } from '@elliemae/ds-popper/positions';\nimport { interactions, Interaction } from '@elliemae/ds-popper/interaction';\nimport DropdownMenuWrapper from './DropdownMenuWrapper';\n\nconst noop = () => null;\n\nconst DSDropdownMenu = ({\n  containerProps = {},\n  className = '',\n  contentStyle = null,\n  options = [],\n  onSelectMenuItem = noop,\n  onOpenMenu = noop,\n  onClickOutsideMenu = noop,\n  preventOverflow = 'viewport',\n  placement = Position.BOTTOM_START,\n  interactionType = Interaction.CLICK,\n  triggerComponent = noop,\n  customMenu = null,\n  isOpen = undefined,\n  selection = {},\n  menuProps = {},\n  referenceNode = undefined,\n  focusOnOpen = false,\n  onClose = noop,\n  itemsRenderer = undefined,\n  responsiveHeight = false,\n  singleGroupSelection = false,\n  onSelectChange = noop,\n  minWidth = undefined,\n  maxWidth = undefined,\n  zIndex,\n  type,\n  loading = false,\n  hideIfNotVisible,\n}) => (\n  <TooltipTextProvider>\n    <DropdownMenuWrapper\n      hideIfNotVisible={hideIfNotVisible}\n      className={className}\n      containerProps={containerProps}\n      contentStyle={contentStyle}\n      customMenu={customMenu}\n      focusOnOpen={focusOnOpen}\n      interactionType={interactionType}\n      isOpen={isOpen}\n      itemsRenderer={itemsRenderer}\n      maxWidth={maxWidth}\n      menuProps={menuProps}\n      minWidth={minWidth}\n      onClickOutsideMenu={onClickOutsideMenu}\n      onClose={onClose}\n      onOpenMenu={onOpenMenu}\n      onSelectChange={onSelectChange}\n      onSelectMenuItem={onSelectMenuItem}\n      options={options}\n      placement={placement}\n      preventOverflow={preventOverflow}\n      referenceNode={referenceNode}\n      responsiveHeight={responsiveHeight}\n      selection={selection}\n      singleGroupSelection={singleGroupSelection}\n      triggerComponent={triggerComponent}\n      type={type}\n      zIndex={zIndex}\n      loading={loading}\n    />\n  </TooltipTextProvider>\n);\n\nconst dropdownMenuProps = {\n  hideIfNotVisible: PropTypes.bool.description(\n    'Hide menu component if trigger component is not visible/scrolled away',\n  ),\n  containerProps: PropTypes.shape({}).description(\n    'Set of Properties attached to the main container',\n  ),\n  contentStyle: PropTypes.shape({}).description(\n    'Object style passed to the menu',\n  ),\n  options: PropTypes.arrayOf(\n    PropTypes.shape({\n      type: PropTypes.string,\n      id: PropTypes.string,\n      label: PropTypes.string,\n    }),\n  ).description('Options items for the dropdown menu. Check menu item types'),\n  onSelectMenuItem: PropTypes.func.description(\n    'Handler when user clicks on a menu item',\n  ),\n  onOpenMenu: PropTypes.func.description('Handler when the menu shows up'),\n  /**  Handler when user clicks outside the menu */\n  onClickOutsideMenu: PropTypes.func.description(\n    'Handler when user clicks outside the menu',\n  ),\n  /** Prevent to move the menu outside of the container defined when interacting with the page  */\n  preventOverflow: PropTypes.oneOf([\n    'viewport',\n    'scrollParent',\n    'window',\n  ]).description(\n    'Prevent to move the menu outside of the container defined when interacting with the page',\n  ),\n  /** Menu placement */\n  placement: PropTypes.oneOf(positions).description('Menu placement'),\n  /** How to open the menu with click, hover */\n  interactionType: PropTypes.oneOf(interactions).description(\n    'How to open the menu with click, hover',\n  ),\n  /** The component that is going to open / close the menu */\n  triggerComponent: PropTypes.element.description(\n    'The component that is going to open / close the menu',\n  ),\n  /** Custom menu component */\n  customMenu: PropTypes.element.description('Custom menu component'),\n  /** Whether the menu is open or not */\n  isOpen: PropTypes.bool.description('Whether the menu is open or not'),\n  /** Selection state. Ex: { [itemId]: '{bool}', [idMultiSelectionItem]: '{string}' } */\n  selection: PropTypes.shape({}).description(\n    'Selection state. Ex: { [itemId]: {bool}, [idMultiSelectionItem]: {string} }',\n  ),\n  /** Props object passed to the menu component */\n  menuProps: PropTypes.shape({}).description(\n    'Props object passed to the menu component',\n  ),\n  /** Customize the items render */\n  itemsRenderer: PropTypes.func.description('Customize the items render'),\n  /** Customize menu format. Can be undefined or 'phone' */\n  type: PropTypes.string.description(\n    'Customize menu format. Can be undefined or \"phone\"',\n  ),\n  /** Customize menu minWidth. Can be undefined or 'number' */\n  minWidth: PropTypes.number.description(\n    'Customize menu minWidth. Can be undefined or \"number\"',\n  ),\n  /** Customize menu maxWidth. Can be undefined or 'number' */\n  maxWidth: PropTypes.number.description(\n    'Customize menu maxWidth. Can be undefined or \"number\"',\n  ),\n  /** Make the menu responsive, it uses a margin of 120 px */\n  responsiveHeight: PropTypes.bool.description(\n    'Make the menu responsive, it uses a margin of 120 px',\n  ),\n  /** Customize menu zIndex. Can be undefined or 'number' */\n  zIndex: PropTypes.number.description(\n    'Customize menu zIndex. Can be undefined or \"number\"',\n  ),\n  className: PropTypes.string.description('html class attribute'),\n  focusOnOpen: PropTypes.bool\n    .description('focus element on open or not')\n    .defaultValue(true),\n  loading: PropTypes.bool\n    .description('is loading content or not')\n    .defaultValue(false),\n  referenceNode: PropTypes.any.description('reference node'),\n  onClose: PropTypes.func.description('function called on close mene'),\n  onSelectChange: PropTypes.func.description(\n    'function called when selection changes',\n  ),\n  singleGroupSelection: PropTypes.bool.description(\n    'select items in same group or not',\n  ),\n};\n\nDSDropdownMenu.propTypes = dropdownMenuProps;\n\nconst DropdownMenuWithSchema = describe(DSDropdownMenu);\nDropdownMenuWithSchema.propTypes = dropdownMenuProps;\n\nexport { DropdownMenuWithSchema };\nexport default DSDropdownMenu;\n","import React, { useRef } from 'react';\nimport { describe, PropTypes } from 'react-desc';\nimport { aggregatedClasses } from '@elliemae/ds-classnames';\nimport FocusGroupProvider from '@elliemae/ds-shared/FocusGroup/FocusGroupManager';\nimport { mergeRefs } from '@elliemae/ds-utilities/system';\nimport decorateToolbarChildren from './decorateToolbarChildren';\nimport Item from './ToolbarItem';\nimport ToolbarGroup from './ToolbarGroup';\nimport Divider from './ToolbarDivider';\n\nconst blockName = 'toolbar';\n\nconst ToolbarContainer = aggregatedClasses('div')(\n  blockName,\n  null,\n  ({ withDepth, alignment, size }) => ({\n    'without-depth': !withDepth,\n    [alignment]: !!alignment,\n    [size]: size,\n  }),\n);\n\nconst DSToolbar = ({\n  containerProps = {},\n  innerRef,\n  withDepth = true,\n  alignment = 'right', // left || right\n  autoFocusOnMount = true,\n  children = [],\n  size = 'normal',\n  ...otherProps\n}) => {\n  const containerRef = useRef(null);\n  return (\n    <FocusGroupProvider\n      autoFocusOnMount={autoFocusOnMount}\n      getContainer={() => containerRef.current}\n      keyBindings={{\n        Tab: 'next',\n      }}\n      orientation=\"horizontal\"\n    >\n      <ToolbarContainer\n        {...containerProps}\n        {...otherProps}\n        classProps={{ withDepth, alignment, size }}\n        innerRef={mergeRefs(innerRef, containerRef)}\n      >\n        {decorateToolbarChildren(children)}\n      </ToolbarContainer>\n    </FocusGroupProvider>\n  );\n};\n\nconst toolbarProps = {\n  containerProps: PropTypes.object.description(\n    'Set of Properties attached to the main container',\n  ),\n  withDepth: PropTypes.bool\n    .description('Shows a shadow rear the toolbar')\n    .defaultValue(true),\n  alignment: PropTypes.oneOf(['right', 'left'])\n    .description('Aligns the toolbar to the left or right')\n    .defaultValue('right'),\n  size: PropTypes.oneOf(['normal', 'compact'])\n    .description('Toolbar size')\n    .defaultValue('normal'),\n  autoFocusOnMount: PropTypes.bool\n    .description('Wheter to focus the component when it mounts or not')\n    .defaultValue(true),\n  children: PropTypes.oneOfType([\n    PropTypes.array,\n    PropTypes.func,\n    PropTypes.node,\n  ]).description('Toolbar items').isRequired,\n  innerRef: PropTypes.object.description(\n    'Ref to the Toolbar container element',\n  ),\n};\n\nDSToolbar.propTypes = toolbarProps;\n\nconst ToolbarWithSchema = describe(DSToolbar);\nToolbarWithSchema.propTypes = toolbarProps;\n\nexport {\n  DSToolbar,\n  Item as ToolbarItem,\n  ToolbarGroup,\n  Divider as ToolbarDivider,\n  ToolbarWithSchema,\n};\n\nexport default DSToolbar;\n","const ICONS_COLORS = {\n  NEUTRAL: ['neutral', '900'],\n  WHITE: ['neutral', '0'],\n  DANGER: ['danger', '900'],\n  WARNING: ['warning', '500'],\n  SUCCESS: ['success', '900'],\n  PRIMARY: ['brand-primary', '600'],\n};\n\nexport default ICONS_COLORS;\n","const ICONS_SIZES = {\n  XXS: 'xxs',\n  XS: 'xs',\n  S: 's',\n  M: 'm',\n  L: 'l',\n  XL: 'xl',\n  XXL: 'xxl',\n};\n\nexport default ICONS_SIZES;\n"],"sourceRoot":""}
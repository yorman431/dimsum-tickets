{"version":3,"sources":["TextBox/example.js"],"names":["memo","useState","value","loan","setLoan","label","show","toggle","setToggle","opts","allowDecimal","allowNegative","decimalLimit","includeThousandsSeparator","integerLimit","prefix","style","width","onClick","e","preventDefault","clearable","feedbackMessage","floatingLabel","inputComponent","DSInputMask","labelText","mask","number","MASK_TYPES","NUMBER","maxLenght","onChange","target","placeholder"],"mappings":"gKAuDeA,0BAjDG,WAAO,IAAD,EACEC,mBAAS,CAC/BC,MAAO,KAFa,mBACfC,EADe,KACTC,EADS,OAIMH,mBAAS,CACnCI,MAAO,OACPC,MAAM,IANc,mBAIfC,EAJe,KAIPC,EAJO,KAQhBC,EAAO,CACXC,cAAa,EACbC,eAAe,EACfC,aAAc,EACdC,2BAA2B,EAC3BC,aAAc,EACdC,OAAQ,IAYV,OACE,yBAAKC,MAAO,CAACC,MAAO,UAClB,4BAAQC,QAZZ,SAAqBC,GACnBA,EAAEC,iBACF,IAAMd,GAAQC,EAAOD,KACfD,EAAQE,EAAOD,KAAO,OAAS,OACrCE,EAAU,CACRH,MAAOA,EACPC,KAAMA,MAMyBC,EAAOF,OACrCE,EAAOD,KACN,kBAAC,IAAD,CACEe,WAAS,EACTC,gBAAgB,iBAChBC,eAAa,EACbC,eAAgBC,IAChBC,UAAU,SACVC,KAAM,SAAAC,GAAM,OAAIC,IAAWC,OAAOrB,EAAlBoB,CAAwBD,IACxCG,UAAW,EACXC,SAAU,SAAAb,GAAC,OAAIf,EAAQ,CAAEF,MAAOiB,EAAEc,OAAO/B,SACzCgC,YAAY,WACZhC,MAAOC,EAAKD,QAGd","file":"static/js/85.a33c04ba.chunk.js","sourcesContent":["import React, {useState, memo} from 'react';\nimport DSTextBox from '@elliemae/ds-basic/form/TextBox';\nimport DSFormItemLayout from \"@elliemae/ds-basic/form/FormItem\"\nimport DSInputMask, { MASK_TYPES } from '@elliemae/ds-basic/form/InputMask'\n\n\nconst Component = () => {\n  const [loan, setLoan] = useState({\n    value: ''\n  });\n  const [toggle, setToggle] = useState({\n    label: 'HIDE',\n    show: true\n  });\n  const opts = {\n    allowDecimal:true,\n    allowNegative: true,\n    decimalLimit: 2,\n    includeThousandsSeparator: true,\n    integerLimit: 9,\n    prefix: '',\n  }\n  function toggleValue(e) {\n    e.preventDefault();\n    const show = !toggle.show;\n    const label = toggle.show ? 'SHOW' : 'HIDE';\n    setToggle({\n      label: label,\n      show: show\n    });\n  }\n\n  return (\n    <div style={{width: '200px'}}>\n      <button onClick={toggleValue}>{toggle.label}</button>\n      {toggle.show ?\n        <DSFormItemLayout\n          clearable\n          feedbackMessage='$xx,xxx,xxx.xx'\n          floatingLabel\n          inputComponent={DSInputMask}\n          labelText='Number'\n          mask={number => MASK_TYPES.NUMBER(opts)(number)}\n          maxLenght={9}\n          onChange={e => setLoan({ value: e.target.value })}\n          placeholder='$ 00.000'\n          value={loan.value}\n        />\n        :\n        null\n      }\n    </div>\n  )\n}\n\nexport default memo(Component);\n"],"sourceRoot":""}
{"version":3,"sources":["../../../../src/Popover/usePopoverProviderState.js","utils/randomTreeNodes.js","components/TreeToolbar.js","components/TreeContainer.js","TreeView/ToggleExpand.js","TreeView/LotsOfData.js","../../../../src/TruncatedTooltipText/TooltipTextProvider.js","../../../../src/TruncatedTooltipText/DSTruncatedTooltipText.js","../../../../src/hooks/useDerivedStateFromProps.js","../../src/timer.js","../../src/domHelpers.js","../../src/createGridComponent.js","../../src/createListComponent.js","../../src/VariableSizeList.js","../../src/FixedSizeList.js","../../src/shallowDiffers.js","../../src/areEqual.js","../../../../../src/form/TextBox/DSTextBox.js","../../../../src/FocusGroup/useFocusGroupItem.js","../../../src/MoreOptionsVert.js","../../../src/Search.js","../../../src/CheckableGroup.js","../../../../../src/form/SearchBox/withSearchable.js","../../../../../src/form/SearchBox/SearchBoxImpl.js","../../../src/ChevronSmallRight.js","../../../src/Checkmark.js","../../../../../src/form/SearchBox/DSSearchBox.js","../../../../src/Icon/DSIconSize.js","../../../../src/Toolbar/decorateToolbarChildren.js","../../../../../src/Menu/MenuItems/Separator.js","../../../../../src/Menu/utils/useHeightByAmountOfItems.js","../../../../src/Menu/VirtualMenuList.js","../../../../src/Menu/MenuContext.js","../../../../../src/Menu/MenuItems/SearchableGroup.js","../../../../../src/Menu/MenuItems/CheckboxGroup.js","../../../../../src/Menu/MenuItems/RadioGroup.js","../../../src/Menu/MenuItems/SubMenu.js","../../../src/Menu/MenuItems/SelectionGroup.js","../../../src/Menu/MenuItems/MenuItemCheckbox.js","../../../src/Menu/MenuItems/menuItemFactory.js","../../../src/Menu/MenuItems/MenuItem.js","../../../src/Menu/MenuItems/MenuItemCheckable.js","../../../src/Menu/MenuItems/MenuItemRadio.js","../../../src/Menu/Menu.js","../../../../src/hooks/useExecutionTimer.js","../../../../src/FocusGroup/focusGroupManagerHoc.js","../../../src/DropdownMenuContext.js","../../../src/DropdownMenuProvider.js","../../../src/MenuItemGroupSelectionHOC.js","../../../src/MenuItemClickableHOC.js","../../../src/decoratedMenuItemFactory.js","../../../src/DropdownMenuLoadingIndicator.js","../../../src/DropdownMenuRenderer.js","../../../src/DropdownMenuWrapper.js","../../../../../ds-basic/src/Popper/positions.js","../../../../../ds-basic/src/Popper/interaction.js","../../../src/DSDropdownMenu.js","../../../../src/Toolbar/DSToolbar.js","../../../../../src/plugins/searchable/SearchableTreePlugin.js"],"names":["initialState","reference","visible","value","options","delay","triggerRef","useRef","useState","tooltipState","setTooltipState","useExecutionTimer","state","prevState","showTooltip","hideTooltip","handleHideTooltip","useEffect","window","throttle","show","e","target","hide","randomEntity","parentID","id","uuidv4","isGroup","random","children","randomEntities","undefined","name","type","parent","count","Array","fill","map","randomEntityNoChildren","randomEntitiesNoChildren","randomEntityMoreGroup","randomEntitiesMoreGroups","getOptions","toggleExpandAll","label","onClick","EllipsisMenu","isOpen","setIsOpen","onOptionsClick","containerProps","onClickOutsideMenu","triggerComponent","buttonType","icon","size","DSIconSizes","M","TreeToolbar","searchQuery","setSearchQuery","withDepth","clearable","onSearch","placeholder","searchOnEnter","margin","orientation","TreeContainer","styled","div","props","offsetHeight","nodes","ToggleExpand","instanceRef","current","actions","style","height","data","fluid","groupIcon","isMultiSelect","itemIcon","plugins","SelectablePluginTree","SearchableTreePlugin","showChildrenAmount","LotsOfElements","TruncatedTooltipContext","React","Provider","TooltipTextProvider","tooltipDelay","placement","tooltipOptions","usePopoverProviderState","zIndex","setZIndex","useMemo","boundaries","showArrow","content","referenceEl","pointerEvents","Text","DSTruncatedTooltipText","otherTextProps","tooltipContext","useContext","handlers","onMouseEnter","onMouseLeave","PropTypes","tooltipPlacement","positions","number","defaultPropUpdateOnChange","prop","defaultShouldUpdate","prevProp","stateValue","isEqual","setStateWithUpdate","onUpdate","setState","isFunction","shouldUpdate","updateOnStateChange","handleSetState","nextProp","now","performance","Date","cancelTimeout","timeoutID","cancelAnimationFrame","requestTimeout","callback","start","requestAnimationFrame","cachedRTLResult","getRTLOffsetType","recalculate","outerDiv","document","outerStyle","innerDiv","innerStyle","defaultItemKey","index","createListComponent","getItemOffset","getEstimatedTotalSize","getItemSize","getOffsetForIndexAndAlignment","getStartIndexForOffset","getStopIndexForStartIndex","initInstanceProps","shouldResetStyleCacheOnItemSizeChange","validateProps","_instanceProps","_outerRef","_resetIsScrollingTimeoutId","instance","isScrolling","scrollDirection","scrollOffset","scrollUpdateWasRequested","memoizeOne","overscanStartIndex","overscanStopIndex","visibleStartIndex","visibleStopIndex","direction","itemSize","layout","itemStyleCache","offset","isHorizontal","isRtl","offsetHorizontal","position","left","right","top","width","event","clientWidth","scrollLeft","scrollWidth","Math","clientHeight","scrollHeight","scrollTop","outerRef","validateSharedProps","nextProps","this","align","itemCount","initialScrollOffset","className","innerRef","innerElementType","innerTagName","itemData","itemKey","outerElementType","outerTagName","useIsScrolling","onScroll","startIndex","stopIndex","items","createElement","key","_getItemStyle","estimatedTotalSize","ref","overflow","WebkitOverflowScrolling","willChange","overscanCount","overscanBackward","overscanForward","getItemMetadata","itemMetadataMap","instanceProps","lastMeasuredIndex","itemMetadata","i","findNearestItemBinarySearch","low","middle","high","currentOffset","findNearestItemExponentialSearch","interval","estimatedItemSize","totalSizeOfMeasuredItems","VariableSizeList","maxOffset","minOffset","findNearestItem","shouldForceUpdate","FixedSizeList","lastItemOffset","middleOffset","numVisibleItems","shallowDiffers","prev","attribute","next","areEqual","prevStyle","prevProps","prevRest","nextStyle","nextRest","DSTextBox","autoFocus","disabled","maxLength","minLength","fluidWidth","hasError","readOnly","min","max","leftComponent","rightComponent","required","variant","otherProps","aria-label","role","string","useFocusGroupWithState","register","unregister","otherActions","createIcon","paths","useCheckableGroup","activeProp","active","multi","onCheck","useDerivedStateFromProps","setActive","handleCheck","prevActive","nextActive","addOrRemove","child","checked","cloneElement","runAll","CheckableGroup","func","WrappedComponent","Searchable","debounce","onKeyUp","property","clearOnSearch","query","onChange","rest","buttonRef","prevPropValue","SearchBoxImpl","disableButton","showIcon","onBlur","iconSize","borderColor","borderLeft","bool","withSearchable","DSSearchBox","searchIcon","XXS","XS","S","L","XL","XXL","extraProps","component","Li","Title","aggregatedClasses","title","showSeparator","itemHeight","amountItems","amountItemsInWindow","itemsLength","calculateHeight","MenuItem","computedListHeight","useHeightByAmountOfItems","SearchBoxWrapper","NoOptionsWrapper","SearchableGroup","searchTerm","searchTermProp","noOptionsText","focusOnOpen","searchRef","setSearchTerm","setTimeout","filteredChildren","focusGroupManagerHoc","CheckboxGroup","RadioGroup","SubMenu","noAddon","leftAddon","interactionType","subitems","rightAddonType","disabledAddonInactive","checkableProps","customRenderer","closeMenu","itemRef","useHiddenController","interaction","onShow","onHide","focusItemByNode","useFocusGroupItem","hoverHandlers","rightAddon","leftIcon","color","handleShowSubItemsWithMouse","BUTTON_VARIANT","DEFAULT","contentComponent","focusKeyBindings","ArrowLeft","onExitFocusGroup","onOpen","opening","onKeyDown","noop","SelectionGroup","searchable","onSelect","renderedItems","item","Component","menuItemFactory","decoratedGroupChildren","MenuItemCheckbox","itemTypes","separator","menuitem","radio","checkbox","submenu","fallback","defaultItem","itemsObject","parsedType","renderMenuItems","factory","option","ItemComponent","onMouseDown","Content","Addon","empty","fixedItem","renderAddon","addon","addonId","classProps","renderAddons","addons","Wrapper","calculateSize","length","as","tabIndex","maxOption","menuCxt","wrapperProps","omit","mergeRefs","MouseEvent","view","bubbles","cancelable","maxWidth","MenuItemCheckable","checkIcon","useCheckable","checkAddon","MenuItemRadio","element","MenuComponent","menuComboBox","isChildOfType","DSMenu","MenuTag","animated","ul","onClickOutside","minWidth","responsiveHeight","menuRef","focusFirst","useHiddenTransition","hiddenProps","nextChildren","forceLeftAddon","useOnClickOutside","data-testid","overflowY","maxHeight","WrappedMenu","loop","startFn","cleanFn","delayTime","startTimer","closeTimer","args","clearTimeout","onFocusPrevGroup","keyBindings","onSelectMenuItem","onOpenMenu","onClose","selection","singleGroupSelection","onSelectChange","isMenuOpen","setMenuOpen","useCallback","openMenu","handleItemClick","group","nextSelection","activeState","selectionItem","toggleInObject","handleCloseOnClick","valueProvider","onItemClick","handlerName","restProps","propHandler","handler","get","defaultConfig","config","Menu","MenuItemClickableHOC","MenuItemGroupSelectionHOC","preventOverflow","customMenu","contentOffset","contentStyle","menuProps","referenceNode","focusOnOpenProp","itemsRenderer","loading","setFocusOnOpenMenu","o","String","nestedMax","getMax","optionsRendererd","renderOptions","dropdownBlockName","convertPropToCssClassName","getComponentFromProps","blockName","Position","Interaction","interactions","DSDropdownMenu","ToolbarContainer","alignment","DSToolbar","autoFocusOnMount","containerRef","getContainer","Tab","decorateToolbarChildren"],"mappings":"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","file":"static/js/43.d2a7a533.chunk.js","sourcesContent":["import { useState, useEffect, useRef } from 'react';\nimport { throttle } from 'lodash';\nimport { useExecutionTimer } from '@elliemae/ds-utilities/hooks';\n\nfunction usePopoverProviderState({\n  initialState = {\n    reference: null,\n    visible: false,\n    value: '',\n    options: {},\n  },\n  delay,\n}) {\n  const triggerRef = useRef();\n  const [tooltipState, setTooltipState] = useState(initialState);\n\n  const show = state => {\n    setTooltipState(prevState => ({\n      ...prevState,\n      ...state,\n      visible: true,\n    }));\n  };\n  const hide = state => {\n    setTooltipState(prevState => ({\n      ...prevState,\n      ...state,\n      visible: false,\n    }));\n  };\n\n  const [showTooltip, hideTooltip] = useExecutionTimer(show, hide, delay);\n\n  const handleShowTooltip = (state, e) => {\n    triggerRef.current = e.target;\n    showTooltip({ ...state, reference: e.target });\n  };\n\n  const handleHideTooltip = state => {\n    hideTooltip(state);\n  };\n\n  useEffect(() => {\n    window.addEventListener('scroll', throttle(handleHideTooltip, 300), true);\n    window.addEventListener('click', handleHideTooltip, true);\n    return () => {\n      window.removeEventListener(\n        'scroll',\n        throttle(handleHideTooltip, 300),\n        true,\n      );\n      window.addEventListener('click', handleHideTooltip, true);\n    };\n  }, [tooltipState.reference]);\n\n  return {\n    show: handleShowTooltip,\n    hide: handleHideTooltip,\n    state: tooltipState,\n  };\n}\n\nexport default usePopoverProviderState;\n","import { random } from 'lodash';\nimport { v4 as uuidv4 } from 'uuid';\n\nexport const randomEntity = (parentID) => {\n  const id = uuidv4();\n  const isGroup = random(0, 4) < 1;\n  const children = isGroup\n    ? randomEntities(random(0, 5), id)\n    : undefined;\n  return {\n    id,\n    name: `${random(0, 1) > 0 ? 'John Doe' : 'Jon Snow'} ${id}`,\n    type: isGroup ? 'group' : 'single',\n    parent: parentID,\n    children,\n  };\n};\nexport const randomEntities = (count, parentID) =>\n  new Array(count).fill(0).map(() => {\n    return randomEntity(parentID);\n  });\n\n/** With increased chances of getting no children group */\nexport const randomEntityNoChildren = () => {\n  const id = uuidv4();\n  const isGroup = random(0, 4) < 2;\n  let children = isGroup\n    ? randomEntities(random(0, 2), id)\n    : undefined;\n  if (random(0, 4) < 2) children = [];\n  return {\n    id,\n    name: `${random(0, 1) > 0 ? 'John Doe' : 'Jon Snow'} ${id}`,\n    type: isGroup ? 'group' : 'single',\n    children,\n    isGroup,\n  };\n};\n/** With increased chances of getting no children groups */\nexport const randomEntitiesNoChildren = (count) =>\n  new Array(count).fill(0).map(() => {\n    return randomEntityNoChildren();\n  });\n\n/** With increased chances of getting a group */\nexport const randomEntityMoreGroup = () => {\n  const id = uuidv4();\n  const isGroup = random(0, 4) < 3;\n  let children = isGroup\n    ? randomEntities(random(0, 2), id)\n    : undefined;\n  if (random(0, 4) < 2) children = [];\n  return {\n    id,\n    name: `${random(0, 1) > 0 ? 'John Doe' : 'Jon Snow'} ${id}`,\n    type: isGroup ? 'group' : 'single',\n    children,\n    isGroup,\n  };\n};\n/** With increased chances of getting more groups */\nexport const randomEntitiesMoreGroups = (count) =>\n  new Array(count).fill(0).map(() => {\n    return randomEntityMoreGroup();\n  });\n","import React, { useState } from 'react';\nimport SearchBox from '@elliemae/ds-basic/form/SearchBox';\nimport DSToolbar from '@elliemae/ds-basic/Toolbar';\nimport DSSeparator from '@elliemae/ds-basic/Separator';\nimport DSButton from '@elliemae/ds-basic/Button';\n\nimport DSDropdownMenu from '@elliemae/ds-dropdownmenu';\nimport MoreOptionsVert from '@elliemae/ds-icons/MoreOptionsVert';\nimport { DSIconSizes } from '@elliemae/ds-basic/Icon';\n\nconst getOptions = (toggleExpandAll) => [\n  {\n    id: 'toggle-expand-collapse',\n    label: 'Expand All / Collapse All',\n    onClick: toggleExpandAll,\n  },\n];\nconst EllipsisMenu = ({ toggleExpandAll }) => {\n  const [isOpen, setIsOpen] = useState(false);\n  const onOptionsClick = () => setIsOpen((isOpen) => !isOpen);\n  return (\n    <DSDropdownMenu\n      containerProps={{ id: 'tree-options-dropdown' }}\n      isOpen={isOpen}\n      onClickOutsideMenu={onOptionsClick}\n      options={getOptions(toggleExpandAll)}\n      triggerComponent={\n        <DSButton\n          buttonType=\"link\"\n          icon={<MoreOptionsVert size={DSIconSizes.M} />}\n          onClick={onOptionsClick}\n        />\n      }\n    />\n  );\n};\n\nexport const TreeToolbar = ({\n  searchQuery,\n  setSearchQuery,\n  toggleExpandAll,\n}) => {\n  return (\n    <>\n      <DSToolbar withDepth={false}>\n        <SearchBox\n          clearable\n          containerProps={{ 'data-testid': 'tree-searchbox' }}\n          onSearch={({ value }) => setSearchQuery(value)}\n          placeholder=\"Search all\"\n          searchOnEnter={false}\n          value={searchQuery}\n        />\n        <EllipsisMenu toggleExpandAll={toggleExpandAll} />\n      </DSToolbar>\n      <DSSeparator\n        margin=\"none\"\n        orientation=\"horizontal\"\n        type=\"non-form\"\n      />\n    </>\n  );\n};\n","import styled from 'styled-components';\n\n/** Fixes tree height issue */\nexport const TreeContainer = styled.div`\n  height: calc(100% - ${(props) => props.offsetHeight || 80}px);\n`;\n","import React, { useRef, useState, useEffect } from 'react';\nimport {\n  TreeView,\n  SelectablePluginTree,\n  SearchableTreePlugin,\n} from '@elliemae/ds-treeview';\nimport Folder from '@elliemae/ds-icons/Folder';\nimport FilePdf from '@elliemae/ds-icons/FilePdf';\nimport { TreeToolbar } from '../components/TreeToolbar';\nimport { randomEntitiesMoreGroups } from '../utils/randomTreeNodes';\nimport { TreeContainer } from '../components/TreeContainer';\n// import { SearchableTreePlugin } from './SearchableTreePlugin';\n\nconst nodes = randomEntitiesMoreGroups(100);\n\nconst ToggleExpand = (props) => {\n  const instanceRef = useRef(null);\n  const [searchQuery, setSearchQuery] = useState('');\n\n  const toggleExpandAll = () => {\n    instanceRef.current.actions.toggleExpandAll();\n  };\n\n  useEffect(() => {\n    toggleExpandAll();\n    return () => {}; // fixes modal error\n  }, []);\n\n  return (\n    <TreeContainer offsetHeight={48}>\n      <div style={{ height: '100%' }}>\n        <TreeToolbar\n          searchQuery={searchQuery}\n          setSearchQuery={setSearchQuery}\n          toggleExpandAll={toggleExpandAll}\n        />\n        <TreeView\n          data={nodes}\n          fluid\n          groupIcon={<Folder />}\n          instanceRef={instanceRef}\n          isMultiSelect\n          itemIcon={<FilePdf />}\n          plugins={[SelectablePluginTree, SearchableTreePlugin]}\n          searchQuery={searchQuery}\n          showChildrenAmount\n          {...props}\n        />\n      </div>\n    </TreeContainer>\n  );\n};\n\nexport default ToggleExpand;\n","import React from 'react';\nimport { randomEntities } from '../utils/randomTreeNodes';\nimport ToggleExpand from './ToggleExpand';\n\nconst rows = 12000;\nconst nodes = randomEntities(rows);\n\nconst LotsOfElements = () => <ToggleExpand data={nodes} />;\n\nexport default LotsOfElements;\n","/* eslint-disable react/prop-types */\nimport React, { useMemo, useState } from 'react';\nimport DSPopover, { usePopoverProviderState } from '../Popover';\n\nexport const TruncatedTooltipContext = React.createContext();\n\nconst { Provider } = TruncatedTooltipContext;\n\nfunction TooltipTextProvider({\n  children,\n  tooltipDelay = 200,\n  placement = 'top',\n  ...tooltipOptions\n}) {\n  const {\n    show: showTooltip,\n    hide: hideTooltip,\n    state: tooltipState,\n  } = usePopoverProviderState({ delay: tooltipDelay });\n  const [zIndex, setZIndex] = useState(110);\n\n  const value = useMemo(\n    () => ({\n      showTooltip,\n      hideTooltip,\n      setZIndex,\n    }),\n    [],\n  );\n\n  return (\n    <Provider value={value}>\n      {children}\n      {tooltipState.visible ? (\n        <DSPopover\n          boundaries=\"window\"\n          placement={placement}\n          showArrow\n          {...tooltipOptions}\n          {...(tooltipState.options || {})}\n          content={tooltipState.value}\n          referenceEl={tooltipState.reference}\n          style={{ pointerEvents: 'none', zIndex }}\n          visible={tooltipState.visible}\n        />\n      ) : null}\n    </Provider>\n  );\n}\n\nTooltipTextProvider.propTypes = {};\nTooltipTextProvider.defaultProps = {};\n\nexport default TooltipTextProvider;\n","import React, { useContext, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\nimport { PopperPositions as positions } from '../Popper';\nimport { TruncatedTooltipContext } from './TooltipTextProvider';\n\nconst isEllipsisActive = ({ offsetWidth, scrollWidth }) =>\n  offsetWidth < scrollWidth;\n\n// reduce the possibility of error showing the tooltip (text-overflow: ellipsis) https://jira.elliemae.io/browse/PUI-1755\nconst Text = styled.span`\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  overflow: hidden;\n  display: inline-block;\n  max-width: 100%;\n`;\n\nfunction DSTruncatedTooltipText({\n  containerProps = {},\n  value = '',\n  zIndex = 110, // https://jira.elliemae.io/browse/PUI-1755\n  ...otherTextProps\n}) {\n  const tooltipContext = useContext(TruncatedTooltipContext);\n  useEffect(() => {\n    if (zIndex && tooltipContext) tooltipContext.setZIndex(zIndex);\n  }, [zIndex]);\n\n  if (!tooltipContext) return value;\n\n  const { showTooltip, hideTooltip } = tooltipContext;\n\n  const handleMouseEnter = (e) => {\n    const { target } = e;\n    if (target && isEllipsisActive(target, target.getBoundingClientRect())) {\n      showTooltip(\n        {\n          value,\n          reference: target,\n        },\n        e,\n      );\n    }\n  };\n\n  const handleMouseLeave = (e) => {\n    hideTooltip({ reference: e.target });\n  };\n\n  const handlers = showTooltip\n    ? { onMouseEnter: handleMouseEnter, onMouseLeave: handleMouseLeave }\n    : {};\n  return (\n    <Text {...containerProps} {...otherTextProps} {...handlers}>\n      {value}\n    </Text>\n  );\n}\n\nDSTruncatedTooltipText.propTypes = {\n  containerProps: PropTypes.shape({}),\n  /** Text that when truncated will trigger the tooltip interaction */\n  value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  /** Position of the tooltip */\n  tooltipPlacement: PropTypes.oneOf([\n    positions.AUTO_START,\n    positions.AUTO_END,\n    positions.AUTO,\n    positions.TOP_START,\n    positions.TOP,\n    positions.TOP_END,\n    positions.RIGHT_START,\n    positions.RIGHT,\n    positions.RIGHT_END,\n    positions.BOTTOM_START,\n    positions.BOTTOM,\n    positions.BOTTOM_END,\n    positions.LEFT_START,\n    positions.LEFT,\n    positions.LEFT_END,\n  ]),\n  /** Delay to show the tooltip */\n  tooltipDelay: PropTypes.number,\n  /** override default zIndex */\n  zIndex: PropTypes.number,\n};\n\nDSTruncatedTooltipText.defaultProps = {\n  containerProps: {},\n  value: '',\n  tooltipPlacement: undefined,\n  tooltipDelay: undefined,\n};\n\nexport default DSTruncatedTooltipText;\n","import { useRef, useState } from 'react';\nimport { isEqual, isFunction } from '../utils';\n\nconst defaultPropUpdateOnChange = prop => prop;\n\nfunction defaultShouldUpdate({ prop, prevProp, stateValue }) {\n  return !isEqual(prop, prevProp) && !isEqual(prop, stateValue);\n}\n\nfunction setStateWithUpdate(onUpdate, setState) {\n  return state => {\n    setState(prevState =>\n      onUpdate(isFunction(state) ? state(prevState) : state, prevState),\n    );\n  };\n}\n\nexport default function useDerivedStateFromProp(prop, options = {}) {\n  const {\n    onUpdate = defaultPropUpdateOnChange,\n    shouldUpdate = defaultShouldUpdate,\n    updateOnStateChange = false,\n  } = options;\n\n  const [stateValue, setState] = useState(onUpdate(prop, {}));\n  const handleSetState = updateOnStateChange\n    ? setStateWithUpdate(onUpdate, setState)\n    : setState;\n  const prevProp = useRef(prop);\n\n  if (\n    shouldUpdate({\n      prop,\n      prevProp: prevProp.current,\n      stateValue,\n    })\n  ) {\n    const nextProp = onUpdate(prop, prevProp.current);\n    setState(nextProp);\n  }\n  prevProp.current = prop;\n  return [stateValue, handleSetState];\n}\n","// @flow\n\n// Animation frame based implementation of setTimeout.\n// Inspired by Joe Lambert, https://gist.github.com/joelambert/1002116#file-requesttimeout-js\n\nconst hasNativePerformanceNow =\n  typeof performance === 'object' && typeof performance.now === 'function';\n\nconst now = hasNativePerformanceNow\n  ? () => performance.now()\n  : () => Date.now();\n\nexport type TimeoutID = {|\n  id: AnimationFrameID,\n|};\n\nexport function cancelTimeout(timeoutID: TimeoutID) {\n  cancelAnimationFrame(timeoutID.id);\n}\n\nexport function requestTimeout(callback: Function, delay: number): TimeoutID {\n  const start = now();\n\n  function tick() {\n    if (now() - start >= delay) {\n      callback.call(null);\n    } else {\n      timeoutID.id = requestAnimationFrame(tick);\n    }\n  }\n\n  const timeoutID: TimeoutID = {\n    id: requestAnimationFrame(tick),\n  };\n\n  return timeoutID;\n}\n","// @flow\n\nlet size: number = -1;\n\n// This utility copied from \"dom-helpers\" package.\nexport function getScrollbarSize(recalculate?: boolean = false): number {\n  if (size === -1 || recalculate) {\n    const div = document.createElement('div');\n    const style = div.style;\n    style.width = '50px';\n    style.height = '50px';\n    style.overflow = 'scroll';\n\n    ((document.body: any): HTMLBodyElement).appendChild(div);\n\n    size = div.offsetWidth - div.clientWidth;\n\n    ((document.body: any): HTMLBodyElement).removeChild(div);\n  }\n\n  return size;\n}\n\nexport type RTLOffsetType =\n  | 'negative'\n  | 'positive-descending'\n  | 'positive-ascending';\n\nlet cachedRTLResult: RTLOffsetType | null = null;\n\n// TRICKY According to the spec, scrollLeft should be negative for RTL aligned elements.\n// Chrome does not seem to adhere; its scrollLeft values are positive (measured relative to the left).\n// Safari's elastic bounce makes detecting this even more complicated wrt potential false positives.\n// The safest way to check this is to intentionally set a negative offset,\n// and then verify that the subsequent \"scroll\" event matches the negative offset.\n// If it does not match, then we can assume a non-standard RTL scroll implementation.\nexport function getRTLOffsetType(recalculate?: boolean = false): RTLOffsetType {\n  if (cachedRTLResult === null || recalculate) {\n    const outerDiv = document.createElement('div');\n    const outerStyle = outerDiv.style;\n    outerStyle.width = '50px';\n    outerStyle.height = '50px';\n    outerStyle.overflow = 'scroll';\n    outerStyle.direction = 'rtl';\n\n    const innerDiv = document.createElement('div');\n    const innerStyle = innerDiv.style;\n    innerStyle.width = '100px';\n    innerStyle.height = '100px';\n\n    outerDiv.appendChild(innerDiv);\n\n    ((document.body: any): HTMLBodyElement).appendChild(outerDiv);\n\n    if (outerDiv.scrollLeft > 0) {\n      cachedRTLResult = 'positive-descending';\n    } else {\n      outerDiv.scrollLeft = 1;\n      if (outerDiv.scrollLeft === 0) {\n        cachedRTLResult = 'negative';\n      } else {\n        cachedRTLResult = 'positive-ascending';\n      }\n    }\n\n    ((document.body: any): HTMLBodyElement).removeChild(outerDiv);\n\n    return cachedRTLResult;\n  }\n\n  return cachedRTLResult;\n}\n","// @flow\n\nimport memoizeOne from 'memoize-one';\nimport { createElement, PureComponent } from 'react';\nimport { cancelTimeout, requestTimeout } from './timer';\nimport { getScrollbarSize, getRTLOffsetType } from './domHelpers';\n\nimport type { TimeoutID } from './timer';\n\ntype Direction = 'ltr' | 'rtl';\nexport type ScrollToAlign = 'auto' | 'smart' | 'center' | 'start' | 'end';\n\ntype itemSize = number | ((index: number) => number);\n\ntype RenderComponentProps<T> = {|\n  columnIndex: number,\n  data: T,\n  isScrolling?: boolean,\n  rowIndex: number,\n  style: Object,\n|};\nexport type RenderComponent<T> = React$ComponentType<\n  $Shape<RenderComponentProps<T>>\n>;\n\ntype ScrollDirection = 'forward' | 'backward';\n\ntype OnItemsRenderedCallback = ({\n  overscanColumnStartIndex: number,\n  overscanColumnStopIndex: number,\n  overscanRowStartIndex: number,\n  overscanRowStopIndex: number,\n  visibleColumnStartIndex: number,\n  visibleColumnStopIndex: number,\n  visibleRowStartIndex: number,\n  visibleRowStopIndex: number,\n}) => void;\ntype OnScrollCallback = ({\n  horizontalScrollDirection: ScrollDirection,\n  scrollLeft: number,\n  scrollTop: number,\n  scrollUpdateWasRequested: boolean,\n  verticalScrollDirection: ScrollDirection,\n}) => void;\n\ntype ScrollEvent = SyntheticEvent<HTMLDivElement>;\ntype ItemStyleCache = { [key: string]: Object };\n\ntype OuterProps = {|\n  children: React$Node,\n  className: string | void,\n  onScroll: ScrollEvent => void,\n  style: {\n    [string]: mixed,\n  },\n|};\n\ntype InnerProps = {|\n  children: React$Node,\n  style: {\n    [string]: mixed,\n  },\n|};\n\nexport type Props<T> = {|\n  children: RenderComponent<T>,\n  className?: string,\n  columnCount: number,\n  columnWidth: itemSize,\n  direction: Direction,\n  height: number,\n  initialScrollLeft?: number,\n  initialScrollTop?: number,\n  innerRef?: any,\n  innerElementType?: string | React$AbstractComponent<InnerProps, any>,\n  innerTagName?: string, // deprecated\n  itemData: T,\n  itemKey?: (params: {|\n    columnIndex: number,\n    data: T,\n    rowIndex: number,\n  |}) => any,\n  onItemsRendered?: OnItemsRenderedCallback,\n  onScroll?: OnScrollCallback,\n  outerRef?: any,\n  outerElementType?: string | React$AbstractComponent<OuterProps, any>,\n  outerTagName?: string, // deprecated\n  overscanColumnCount?: number,\n  overscanColumnsCount?: number, // deprecated\n  overscanCount?: number, // deprecated\n  overscanRowCount?: number,\n  overscanRowsCount?: number, // deprecated\n  rowCount: number,\n  rowHeight: itemSize,\n  style?: Object,\n  useIsScrolling: boolean,\n  width: number,\n|};\n\ntype State = {|\n  instance: any,\n  isScrolling: boolean,\n  horizontalScrollDirection: ScrollDirection,\n  scrollLeft: number,\n  scrollTop: number,\n  scrollUpdateWasRequested: boolean,\n  verticalScrollDirection: ScrollDirection,\n|};\n\ntype getItemOffset = (\n  props: Props<any>,\n  index: number,\n  instanceProps: any\n) => number;\ntype getItemSize = (\n  props: Props<any>,\n  index: number,\n  instanceProps: any\n) => number;\ntype getEstimatedTotalSize = (props: Props<any>, instanceProps: any) => number;\ntype GetOffsetForItemAndAlignment = (\n  props: Props<any>,\n  index: number,\n  align: ScrollToAlign,\n  scrollOffset: number,\n  instanceProps: any,\n  scrollbarSize: number\n) => number;\ntype GetStartIndexForOffset = (\n  props: Props<any>,\n  offset: number,\n  instanceProps: any\n) => number;\ntype GetStopIndexForStartIndex = (\n  props: Props<any>,\n  startIndex: number,\n  scrollOffset: number,\n  instanceProps: any\n) => number;\ntype InitInstanceProps = (props: Props<any>, instance: any) => any;\ntype ValidateProps = (props: Props<any>) => void;\n\nconst IS_SCROLLING_DEBOUNCE_INTERVAL = 150;\n\nconst defaultItemKey = ({ columnIndex, data, rowIndex }) =>\n  `${rowIndex}:${columnIndex}`;\n\n// In DEV mode, this Set helps us only log a warning once per component instance.\n// This avoids spamming the console every time a render happens.\nlet devWarningsOverscanCount = null;\nlet devWarningsOverscanRowsColumnsCount = null;\nlet devWarningsTagName = null;\nif (process.env.NODE_ENV !== 'production') {\n  if (typeof window !== 'undefined' && typeof window.WeakSet !== 'undefined') {\n    devWarningsOverscanCount = new WeakSet();\n    devWarningsOverscanRowsColumnsCount = new WeakSet();\n    devWarningsTagName = new WeakSet();\n  }\n}\n\nexport default function createGridComponent({\n  getColumnOffset,\n  getColumnStartIndexForOffset,\n  getColumnStopIndexForStartIndex,\n  getColumnWidth,\n  getEstimatedTotalHeight,\n  getEstimatedTotalWidth,\n  getOffsetForColumnAndAlignment,\n  getOffsetForRowAndAlignment,\n  getRowHeight,\n  getRowOffset,\n  getRowStartIndexForOffset,\n  getRowStopIndexForStartIndex,\n  initInstanceProps,\n  shouldResetStyleCacheOnItemSizeChange,\n  validateProps,\n}: {|\n  getColumnOffset: getItemOffset,\n  getColumnStartIndexForOffset: GetStartIndexForOffset,\n  getColumnStopIndexForStartIndex: GetStopIndexForStartIndex,\n  getColumnWidth: getItemSize,\n  getEstimatedTotalHeight: getEstimatedTotalSize,\n  getEstimatedTotalWidth: getEstimatedTotalSize,\n  getOffsetForColumnAndAlignment: GetOffsetForItemAndAlignment,\n  getOffsetForRowAndAlignment: GetOffsetForItemAndAlignment,\n  getRowOffset: getItemOffset,\n  getRowHeight: getItemSize,\n  getRowStartIndexForOffset: GetStartIndexForOffset,\n  getRowStopIndexForStartIndex: GetStopIndexForStartIndex,\n  initInstanceProps: InitInstanceProps,\n  shouldResetStyleCacheOnItemSizeChange: boolean,\n  validateProps: ValidateProps,\n|}) {\n  return class Grid<T> extends PureComponent<Props<T>, State> {\n    _instanceProps: any = initInstanceProps(this.props, this);\n    _resetIsScrollingTimeoutId: TimeoutID | null = null;\n    _outerRef: ?HTMLDivElement;\n\n    static defaultProps = {\n      direction: 'ltr',\n      itemData: undefined,\n      useIsScrolling: false,\n    };\n\n    state: State = {\n      instance: this,\n      isScrolling: false,\n      horizontalScrollDirection: 'forward',\n      scrollLeft:\n        typeof this.props.initialScrollLeft === 'number'\n          ? this.props.initialScrollLeft\n          : 0,\n      scrollTop:\n        typeof this.props.initialScrollTop === 'number'\n          ? this.props.initialScrollTop\n          : 0,\n      scrollUpdateWasRequested: false,\n      verticalScrollDirection: 'forward',\n    };\n\n    // Always use explicit constructor for React components.\n    // It produces less code after transpilation. (#26)\n    // eslint-disable-next-line no-useless-constructor\n    constructor(props: Props<T>) {\n      super(props);\n    }\n\n    static getDerivedStateFromProps(\n      nextProps: Props<T>,\n      prevState: State\n    ): $Shape<State> | null {\n      validateSharedProps(nextProps, prevState);\n      validateProps(nextProps);\n      return null;\n    }\n\n    scrollTo({\n      scrollLeft,\n      scrollTop,\n    }: {\n      scrollLeft: number,\n      scrollTop: number,\n    }): void {\n      if (scrollLeft !== undefined) {\n        scrollLeft = Math.max(0, scrollLeft);\n      }\n      if (scrollTop !== undefined) {\n        scrollTop = Math.max(0, scrollTop);\n      }\n\n      this.setState(prevState => {\n        if (scrollLeft === undefined) {\n          scrollLeft = prevState.scrollLeft;\n        }\n        if (scrollTop === undefined) {\n          scrollTop = prevState.scrollTop;\n        }\n\n        if (\n          prevState.scrollLeft === scrollLeft &&\n          prevState.scrollTop === scrollTop\n        ) {\n          return null;\n        }\n\n        return {\n          horizontalScrollDirection:\n            prevState.scrollLeft < scrollLeft ? 'forward' : 'backward',\n          scrollLeft: scrollLeft,\n          scrollTop: scrollTop,\n          scrollUpdateWasRequested: true,\n          verticalScrollDirection:\n            prevState.scrollTop < scrollTop ? 'forward' : 'backward',\n        };\n      }, this._resetIsScrollingDebounced);\n    }\n\n    scrollToItem({\n      align = 'auto',\n      columnIndex,\n      rowIndex,\n    }: {\n      align: ScrollToAlign,\n      columnIndex?: number,\n      rowIndex?: number,\n    }): void {\n      const { columnCount, height, rowCount, width } = this.props;\n      const { scrollLeft, scrollTop } = this.state;\n      const scrollbarSize = getScrollbarSize();\n\n      if (columnIndex !== undefined) {\n        columnIndex = Math.max(0, Math.min(columnIndex, columnCount - 1));\n      }\n      if (rowIndex !== undefined) {\n        rowIndex = Math.max(0, Math.min(rowIndex, rowCount - 1));\n      }\n\n      const estimatedTotalHeight = getEstimatedTotalHeight(\n        this.props,\n        this._instanceProps\n      );\n      const estimatedTotalWidth = getEstimatedTotalWidth(\n        this.props,\n        this._instanceProps\n      );\n\n      // The scrollbar size should be considered when scrolling an item into view,\n      // to ensure it's fully visible.\n      // But we only need to account for its size when it's actually visible.\n      const horizontalScrollbarSize =\n        estimatedTotalWidth > width ? scrollbarSize : 0;\n      const verticalScrollbarSize =\n        estimatedTotalHeight > height ? scrollbarSize : 0;\n\n      this.scrollTo({\n        scrollLeft:\n          columnIndex !== undefined\n            ? getOffsetForColumnAndAlignment(\n                this.props,\n                columnIndex,\n                align,\n                scrollLeft,\n                this._instanceProps,\n                verticalScrollbarSize\n              )\n            : scrollLeft,\n        scrollTop:\n          rowIndex !== undefined\n            ? getOffsetForRowAndAlignment(\n                this.props,\n                rowIndex,\n                align,\n                scrollTop,\n                this._instanceProps,\n                horizontalScrollbarSize\n              )\n            : scrollTop,\n      });\n    }\n\n    componentDidMount() {\n      const { initialScrollLeft, initialScrollTop } = this.props;\n\n      if (this._outerRef != null) {\n        const outerRef = ((this._outerRef: any): HTMLElement);\n        if (typeof initialScrollLeft === 'number') {\n          outerRef.scrollLeft = initialScrollLeft;\n        }\n        if (typeof initialScrollTop === 'number') {\n          outerRef.scrollTop = initialScrollTop;\n        }\n      }\n\n      this._callPropsCallbacks();\n    }\n\n    componentDidUpdate() {\n      const { direction } = this.props;\n      const { scrollLeft, scrollTop, scrollUpdateWasRequested } = this.state;\n\n      if (scrollUpdateWasRequested && this._outerRef != null) {\n        // TRICKY According to the spec, scrollLeft should be negative for RTL aligned elements.\n        // This is not the case for all browsers though (e.g. Chrome reports values as positive, measured relative to the left).\n        // So we need to determine which browser behavior we're dealing with, and mimic it.\n        const outerRef = ((this._outerRef: any): HTMLElement);\n        if (direction === 'rtl') {\n          switch (getRTLOffsetType()) {\n            case 'negative':\n              outerRef.scrollLeft = -scrollLeft;\n              break;\n            case 'positive-ascending':\n              outerRef.scrollLeft = scrollLeft;\n              break;\n            default:\n              const { clientWidth, scrollWidth } = outerRef;\n              outerRef.scrollLeft = scrollWidth - clientWidth - scrollLeft;\n              break;\n          }\n        } else {\n          outerRef.scrollLeft = Math.max(0, scrollLeft);\n        }\n\n        outerRef.scrollTop = Math.max(0, scrollTop);\n      }\n\n      this._callPropsCallbacks();\n    }\n\n    componentWillUnmount() {\n      if (this._resetIsScrollingTimeoutId !== null) {\n        cancelTimeout(this._resetIsScrollingTimeoutId);\n      }\n    }\n\n    render() {\n      const {\n        children,\n        className,\n        columnCount,\n        direction,\n        height,\n        innerRef,\n        innerElementType,\n        innerTagName,\n        itemData,\n        itemKey = defaultItemKey,\n        outerElementType,\n        outerTagName,\n        rowCount,\n        style,\n        useIsScrolling,\n        width,\n      } = this.props;\n      const { isScrolling } = this.state;\n\n      const [\n        columnStartIndex,\n        columnStopIndex,\n      ] = this._getHorizontalRangeToRender();\n      const [rowStartIndex, rowStopIndex] = this._getVerticalRangeToRender();\n\n      const items = [];\n      if (columnCount > 0 && rowCount) {\n        for (\n          let rowIndex = rowStartIndex;\n          rowIndex <= rowStopIndex;\n          rowIndex++\n        ) {\n          for (\n            let columnIndex = columnStartIndex;\n            columnIndex <= columnStopIndex;\n            columnIndex++\n          ) {\n            items.push(\n              createElement(children, {\n                columnIndex,\n                data: itemData,\n                isScrolling: useIsScrolling ? isScrolling : undefined,\n                key: itemKey({ columnIndex, data: itemData, rowIndex }),\n                rowIndex,\n                style: this._getItemStyle(rowIndex, columnIndex),\n              })\n            );\n          }\n        }\n      }\n\n      // Read this value AFTER items have been created,\n      // So their actual sizes (if variable) are taken into consideration.\n      const estimatedTotalHeight = getEstimatedTotalHeight(\n        this.props,\n        this._instanceProps\n      );\n      const estimatedTotalWidth = getEstimatedTotalWidth(\n        this.props,\n        this._instanceProps\n      );\n\n      return createElement(\n        outerElementType || outerTagName || 'div',\n        {\n          className,\n          onScroll: this._onScroll,\n          ref: this._outerRefSetter,\n          style: {\n            position: 'relative',\n            height,\n            width,\n            overflow: 'auto',\n            WebkitOverflowScrolling: 'touch',\n            willChange: 'transform',\n            direction,\n            ...style,\n          },\n        },\n        createElement(innerElementType || innerTagName || 'div', {\n          children: items,\n          ref: innerRef,\n          style: {\n            height: estimatedTotalHeight,\n            pointerEvents: isScrolling ? 'none' : undefined,\n            width: estimatedTotalWidth,\n          },\n        })\n      );\n    }\n\n    _callOnItemsRendered: (\n      overscanColumnStartIndex: number,\n      overscanColumnStopIndex: number,\n      overscanRowStartIndex: number,\n      overscanRowStopIndex: number,\n      visibleColumnStartIndex: number,\n      visibleColumnStopIndex: number,\n      visibleRowStartIndex: number,\n      visibleRowStopIndex: number\n    ) => void;\n    _callOnItemsRendered = memoizeOne(\n      (\n        overscanColumnStartIndex: number,\n        overscanColumnStopIndex: number,\n        overscanRowStartIndex: number,\n        overscanRowStopIndex: number,\n        visibleColumnStartIndex: number,\n        visibleColumnStopIndex: number,\n        visibleRowStartIndex: number,\n        visibleRowStopIndex: number\n      ) =>\n        ((this.props.onItemsRendered: any): OnItemsRenderedCallback)({\n          overscanColumnStartIndex,\n          overscanColumnStopIndex,\n          overscanRowStartIndex,\n          overscanRowStopIndex,\n          visibleColumnStartIndex,\n          visibleColumnStopIndex,\n          visibleRowStartIndex,\n          visibleRowStopIndex,\n        })\n    );\n\n    _callOnScroll: (\n      scrollLeft: number,\n      scrollTop: number,\n      horizontalScrollDirection: ScrollDirection,\n      verticalScrollDirection: ScrollDirection,\n      scrollUpdateWasRequested: boolean\n    ) => void;\n    _callOnScroll = memoizeOne(\n      (\n        scrollLeft: number,\n        scrollTop: number,\n        horizontalScrollDirection: ScrollDirection,\n        verticalScrollDirection: ScrollDirection,\n        scrollUpdateWasRequested: boolean\n      ) =>\n        ((this.props.onScroll: any): OnScrollCallback)({\n          horizontalScrollDirection,\n          scrollLeft,\n          scrollTop,\n          verticalScrollDirection,\n          scrollUpdateWasRequested,\n        })\n    );\n\n    _callPropsCallbacks() {\n      const { columnCount, onItemsRendered, onScroll, rowCount } = this.props;\n\n      if (typeof onItemsRendered === 'function') {\n        if (columnCount > 0 && rowCount > 0) {\n          const [\n            overscanColumnStartIndex,\n            overscanColumnStopIndex,\n            visibleColumnStartIndex,\n            visibleColumnStopIndex,\n          ] = this._getHorizontalRangeToRender();\n          const [\n            overscanRowStartIndex,\n            overscanRowStopIndex,\n            visibleRowStartIndex,\n            visibleRowStopIndex,\n          ] = this._getVerticalRangeToRender();\n          this._callOnItemsRendered(\n            overscanColumnStartIndex,\n            overscanColumnStopIndex,\n            overscanRowStartIndex,\n            overscanRowStopIndex,\n            visibleColumnStartIndex,\n            visibleColumnStopIndex,\n            visibleRowStartIndex,\n            visibleRowStopIndex\n          );\n        }\n      }\n\n      if (typeof onScroll === 'function') {\n        const {\n          horizontalScrollDirection,\n          scrollLeft,\n          scrollTop,\n          scrollUpdateWasRequested,\n          verticalScrollDirection,\n        } = this.state;\n        this._callOnScroll(\n          scrollLeft,\n          scrollTop,\n          horizontalScrollDirection,\n          verticalScrollDirection,\n          scrollUpdateWasRequested\n        );\n      }\n    }\n\n    // Lazily create and cache item styles while scrolling,\n    // So that pure component sCU will prevent re-renders.\n    // We maintain this cache, and pass a style prop rather than index,\n    // So that List can clear cached styles and force item re-render if necessary.\n    _getItemStyle: (rowIndex: number, columnIndex: number) => Object;\n    _getItemStyle = (rowIndex: number, columnIndex: number): Object => {\n      const { columnWidth, direction, rowHeight } = this.props;\n\n      const itemStyleCache = this._getItemStyleCache(\n        shouldResetStyleCacheOnItemSizeChange && columnWidth,\n        shouldResetStyleCacheOnItemSizeChange && direction,\n        shouldResetStyleCacheOnItemSizeChange && rowHeight\n      );\n\n      const key = `${rowIndex}:${columnIndex}`;\n\n      let style;\n      if (itemStyleCache.hasOwnProperty(key)) {\n        style = itemStyleCache[key];\n      } else {\n        const offset = getColumnOffset(\n          this.props,\n          columnIndex,\n          this._instanceProps\n        );\n        const isRtl = direction === 'rtl';\n        itemStyleCache[key] = style = {\n          position: 'absolute',\n          left: isRtl ? undefined : offset,\n          right: isRtl ? offset : undefined,\n          top: getRowOffset(this.props, rowIndex, this._instanceProps),\n          height: getRowHeight(this.props, rowIndex, this._instanceProps),\n          width: getColumnWidth(this.props, columnIndex, this._instanceProps),\n        };\n      }\n\n      return style;\n    };\n\n    _getItemStyleCache: (_: any, __: any, ___: any) => ItemStyleCache;\n    _getItemStyleCache = memoizeOne((_: any, __: any, ___: any) => ({}));\n\n    _getHorizontalRangeToRender(): [number, number, number, number] {\n      const {\n        columnCount,\n        overscanColumnCount,\n        overscanColumnsCount,\n        overscanCount,\n        rowCount,\n      } = this.props;\n      const { horizontalScrollDirection, isScrolling, scrollLeft } = this.state;\n\n      const overscanCountResolved: number =\n        overscanColumnCount || overscanColumnsCount || overscanCount || 1;\n\n      if (columnCount === 0 || rowCount === 0) {\n        return [0, 0, 0, 0];\n      }\n\n      const startIndex = getColumnStartIndexForOffset(\n        this.props,\n        scrollLeft,\n        this._instanceProps\n      );\n      const stopIndex = getColumnStopIndexForStartIndex(\n        this.props,\n        startIndex,\n        scrollLeft,\n        this._instanceProps\n      );\n\n      // Overscan by one item in each direction so that tab/focus works.\n      // If there isn't at least one extra item, tab loops back around.\n      const overscanBackward =\n        !isScrolling || horizontalScrollDirection === 'backward'\n          ? Math.max(1, overscanCountResolved)\n          : 1;\n      const overscanForward =\n        !isScrolling || horizontalScrollDirection === 'forward'\n          ? Math.max(1, overscanCountResolved)\n          : 1;\n\n      return [\n        Math.max(0, startIndex - overscanBackward),\n        Math.max(0, Math.min(columnCount - 1, stopIndex + overscanForward)),\n        startIndex,\n        stopIndex,\n      ];\n    }\n\n    _getVerticalRangeToRender(): [number, number, number, number] {\n      const {\n        columnCount,\n        overscanCount,\n        overscanRowCount,\n        overscanRowsCount,\n        rowCount,\n      } = this.props;\n      const { isScrolling, verticalScrollDirection, scrollTop } = this.state;\n\n      const overscanCountResolved: number =\n        overscanRowCount || overscanRowsCount || overscanCount || 1;\n\n      if (columnCount === 0 || rowCount === 0) {\n        return [0, 0, 0, 0];\n      }\n\n      const startIndex = getRowStartIndexForOffset(\n        this.props,\n        scrollTop,\n        this._instanceProps\n      );\n      const stopIndex = getRowStopIndexForStartIndex(\n        this.props,\n        startIndex,\n        scrollTop,\n        this._instanceProps\n      );\n\n      // Overscan by one item in each direction so that tab/focus works.\n      // If there isn't at least one extra item, tab loops back around.\n      const overscanBackward =\n        !isScrolling || verticalScrollDirection === 'backward'\n          ? Math.max(1, overscanCountResolved)\n          : 1;\n      const overscanForward =\n        !isScrolling || verticalScrollDirection === 'forward'\n          ? Math.max(1, overscanCountResolved)\n          : 1;\n\n      return [\n        Math.max(0, startIndex - overscanBackward),\n        Math.max(0, Math.min(rowCount - 1, stopIndex + overscanForward)),\n        startIndex,\n        stopIndex,\n      ];\n    }\n\n    _onScroll = (event: ScrollEvent): void => {\n      const {\n        clientHeight,\n        clientWidth,\n        scrollLeft,\n        scrollTop,\n        scrollHeight,\n        scrollWidth,\n      } = event.currentTarget;\n      this.setState(prevState => {\n        if (\n          prevState.scrollLeft === scrollLeft &&\n          prevState.scrollTop === scrollTop\n        ) {\n          // Scroll position may have been updated by cDM/cDU,\n          // In which case we don't need to trigger another render,\n          // And we don't want to update state.isScrolling.\n          return null;\n        }\n\n        const { direction } = this.props;\n\n        // TRICKY According to the spec, scrollLeft should be negative for RTL aligned elements.\n        // This is not the case for all browsers though (e.g. Chrome reports values as positive, measured relative to the left).\n        // It's also easier for this component if we convert offsets to the same format as they would be in for ltr.\n        // So the simplest solution is to determine which browser behavior we're dealing with, and convert based on it.\n        let calculatedScrollLeft = scrollLeft;\n        if (direction === 'rtl') {\n          switch (getRTLOffsetType()) {\n            case 'negative':\n              calculatedScrollLeft = -scrollLeft;\n              break;\n            case 'positive-descending':\n              calculatedScrollLeft = scrollWidth - clientWidth - scrollLeft;\n              break;\n          }\n        }\n\n        // Prevent Safari's elastic scrolling from causing visual shaking when scrolling past bounds.\n        calculatedScrollLeft = Math.max(\n          0,\n          Math.min(calculatedScrollLeft, scrollWidth - clientWidth)\n        );\n        const calculatedScrollTop = Math.max(\n          0,\n          Math.min(scrollTop, scrollHeight - clientHeight)\n        );\n\n        return {\n          isScrolling: true,\n          horizontalScrollDirection:\n            prevState.scrollLeft < scrollLeft ? 'forward' : 'backward',\n          scrollLeft: calculatedScrollLeft,\n          scrollTop: calculatedScrollTop,\n          verticalScrollDirection:\n            prevState.scrollTop < scrollTop ? 'forward' : 'backward',\n          scrollUpdateWasRequested: false,\n        };\n      }, this._resetIsScrollingDebounced);\n    };\n\n    _outerRefSetter = (ref: any): void => {\n      const { outerRef } = this.props;\n\n      this._outerRef = ((ref: any): HTMLDivElement);\n\n      if (typeof outerRef === 'function') {\n        outerRef(ref);\n      } else if (\n        outerRef != null &&\n        typeof outerRef === 'object' &&\n        outerRef.hasOwnProperty('current')\n      ) {\n        outerRef.current = ref;\n      }\n    };\n\n    _resetIsScrollingDebounced = () => {\n      if (this._resetIsScrollingTimeoutId !== null) {\n        cancelTimeout(this._resetIsScrollingTimeoutId);\n      }\n\n      this._resetIsScrollingTimeoutId = requestTimeout(\n        this._resetIsScrolling,\n        IS_SCROLLING_DEBOUNCE_INTERVAL\n      );\n    };\n\n    _resetIsScrolling = () => {\n      this._resetIsScrollingTimeoutId = null;\n\n      this.setState({ isScrolling: false }, () => {\n        // Clear style cache after state update has been committed.\n        // This way we don't break pure sCU for items that don't use isScrolling param.\n        this._getItemStyleCache(-1);\n      });\n    };\n  };\n}\n\nconst validateSharedProps = (\n  {\n    children,\n    direction,\n    height,\n    innerTagName,\n    outerTagName,\n    overscanColumnsCount,\n    overscanCount,\n    overscanRowsCount,\n    width,\n  }: Props<any>,\n  { instance }: State\n): void => {\n  if (process.env.NODE_ENV !== 'production') {\n    if (typeof overscanCount === 'number') {\n      if (devWarningsOverscanCount && !devWarningsOverscanCount.has(instance)) {\n        devWarningsOverscanCount.add(instance);\n        console.warn(\n          'The overscanCount prop has been deprecated. ' +\n            'Please use the overscanColumnCount and overscanRowCount props instead.'\n        );\n      }\n    }\n\n    if (\n      typeof overscanColumnsCount === 'number' ||\n      typeof overscanRowsCount === 'number'\n    ) {\n      if (\n        devWarningsOverscanRowsColumnsCount &&\n        !devWarningsOverscanRowsColumnsCount.has(instance)\n      ) {\n        devWarningsOverscanRowsColumnsCount.add(instance);\n        console.warn(\n          'The overscanColumnsCount and overscanRowsCount props have been deprecated. ' +\n            'Please use the overscanColumnCount and overscanRowCount props instead.'\n        );\n      }\n    }\n\n    if (innerTagName != null || outerTagName != null) {\n      if (devWarningsTagName && !devWarningsTagName.has(instance)) {\n        devWarningsTagName.add(instance);\n        console.warn(\n          'The innerTagName and outerTagName props have been deprecated. ' +\n            'Please use the innerElementType and outerElementType props instead.'\n        );\n      }\n    }\n\n    if (children == null) {\n      throw Error(\n        'An invalid \"children\" prop has been specified. ' +\n          'Value should be a React component. ' +\n          `\"${children === null ? 'null' : typeof children}\" was specified.`\n      );\n    }\n\n    switch (direction) {\n      case 'ltr':\n      case 'rtl':\n        // Valid values\n        break;\n      default:\n        throw Error(\n          'An invalid \"direction\" prop has been specified. ' +\n            'Value should be either \"ltr\" or \"rtl\". ' +\n            `\"${direction}\" was specified.`\n        );\n    }\n\n    if (typeof width !== 'number') {\n      throw Error(\n        'An invalid \"width\" prop has been specified. ' +\n          'Grids must specify a number for width. ' +\n          `\"${width === null ? 'null' : typeof width}\" was specified.`\n      );\n    }\n\n    if (typeof height !== 'number') {\n      throw Error(\n        'An invalid \"height\" prop has been specified. ' +\n          'Grids must specify a number for height. ' +\n          `\"${height === null ? 'null' : typeof height}\" was specified.`\n      );\n    }\n  }\n};\n","// @flow\n\nimport memoizeOne from 'memoize-one';\nimport { createElement, PureComponent } from 'react';\nimport { cancelTimeout, requestTimeout } from './timer';\nimport { getRTLOffsetType } from './domHelpers';\n\nimport type { TimeoutID } from './timer';\n\nexport type ScrollToAlign = 'auto' | 'smart' | 'center' | 'start' | 'end';\n\ntype itemSize = number | ((index: number) => number);\n// TODO Deprecate directions \"horizontal\" and \"vertical\"\ntype Direction = 'ltr' | 'rtl' | 'horizontal' | 'vertical';\ntype Layout = 'horizontal' | 'vertical';\n\ntype RenderComponentProps<T> = {|\n  data: T,\n  index: number,\n  isScrolling?: boolean,\n  style: Object,\n|};\ntype RenderComponent<T> = React$ComponentType<$Shape<RenderComponentProps<T>>>;\n\ntype ScrollDirection = 'forward' | 'backward';\n\ntype onItemsRenderedCallback = ({\n  overscanStartIndex: number,\n  overscanStopIndex: number,\n  visibleStartIndex: number,\n  visibleStopIndex: number,\n}) => void;\ntype onScrollCallback = ({\n  scrollDirection: ScrollDirection,\n  scrollOffset: number,\n  scrollUpdateWasRequested: boolean,\n}) => void;\n\ntype ScrollEvent = SyntheticEvent<HTMLDivElement>;\ntype ItemStyleCache = { [index: number]: Object };\n\ntype OuterProps = {|\n  children: React$Node,\n  className: string | void,\n  onScroll: ScrollEvent => void,\n  style: {\n    [string]: mixed,\n  },\n|};\n\ntype InnerProps = {|\n  children: React$Node,\n  style: {\n    [string]: mixed,\n  },\n|};\n\nexport type Props<T> = {|\n  children: RenderComponent<T>,\n  className?: string,\n  direction: Direction,\n  height: number | string,\n  initialScrollOffset?: number,\n  innerRef?: any,\n  innerElementType?: string | React$AbstractComponent<InnerProps, any>,\n  innerTagName?: string, // deprecated\n  itemCount: number,\n  itemData: T,\n  itemKey?: (index: number, data: T) => any,\n  itemSize: itemSize,\n  layout: Layout,\n  onItemsRendered?: onItemsRenderedCallback,\n  onScroll?: onScrollCallback,\n  outerRef?: any,\n  outerElementType?: string | React$AbstractComponent<OuterProps, any>,\n  outerTagName?: string, // deprecated\n  overscanCount: number,\n  style?: Object,\n  useIsScrolling: boolean,\n  width: number | string,\n|};\n\ntype State = {|\n  instance: any,\n  isScrolling: boolean,\n  scrollDirection: ScrollDirection,\n  scrollOffset: number,\n  scrollUpdateWasRequested: boolean,\n|};\n\ntype GetItemOffset = (\n  props: Props<any>,\n  index: number,\n  instanceProps: any\n) => number;\ntype GetItemSize = (\n  props: Props<any>,\n  index: number,\n  instanceProps: any\n) => number;\ntype GetEstimatedTotalSize = (props: Props<any>, instanceProps: any) => number;\ntype GetOffsetForIndexAndAlignment = (\n  props: Props<any>,\n  index: number,\n  align: ScrollToAlign,\n  scrollOffset: number,\n  instanceProps: any\n) => number;\ntype GetStartIndexForOffset = (\n  props: Props<any>,\n  offset: number,\n  instanceProps: any\n) => number;\ntype GetStopIndexForStartIndex = (\n  props: Props<any>,\n  startIndex: number,\n  scrollOffset: number,\n  instanceProps: any\n) => number;\ntype InitInstanceProps = (props: Props<any>, instance: any) => any;\ntype ValidateProps = (props: Props<any>) => void;\n\nconst IS_SCROLLING_DEBOUNCE_INTERVAL = 150;\n\nconst defaultItemKey = (index: number, data: any) => index;\n\n// In DEV mode, this Set helps us only log a warning once per component instance.\n// This avoids spamming the console every time a render happens.\nlet devWarningsDirection = null;\nlet devWarningsTagName = null;\nif (process.env.NODE_ENV !== 'production') {\n  if (typeof window !== 'undefined' && typeof window.WeakSet !== 'undefined') {\n    devWarningsDirection = new WeakSet();\n    devWarningsTagName = new WeakSet();\n  }\n}\n\nexport default function createListComponent({\n  getItemOffset,\n  getEstimatedTotalSize,\n  getItemSize,\n  getOffsetForIndexAndAlignment,\n  getStartIndexForOffset,\n  getStopIndexForStartIndex,\n  initInstanceProps,\n  shouldResetStyleCacheOnItemSizeChange,\n  validateProps,\n}: {|\n  getItemOffset: GetItemOffset,\n  getEstimatedTotalSize: GetEstimatedTotalSize,\n  getItemSize: GetItemSize,\n  getOffsetForIndexAndAlignment: GetOffsetForIndexAndAlignment,\n  getStartIndexForOffset: GetStartIndexForOffset,\n  getStopIndexForStartIndex: GetStopIndexForStartIndex,\n  initInstanceProps: InitInstanceProps,\n  shouldResetStyleCacheOnItemSizeChange: boolean,\n  validateProps: ValidateProps,\n|}) {\n  return class List<T> extends PureComponent<Props<T>, State> {\n    _instanceProps: any = initInstanceProps(this.props, this);\n    _outerRef: ?HTMLDivElement;\n    _resetIsScrollingTimeoutId: TimeoutID | null = null;\n\n    static defaultProps = {\n      direction: 'ltr',\n      itemData: undefined,\n      layout: 'vertical',\n      overscanCount: 2,\n      useIsScrolling: false,\n    };\n\n    state: State = {\n      instance: this,\n      isScrolling: false,\n      scrollDirection: 'forward',\n      scrollOffset:\n        typeof this.props.initialScrollOffset === 'number'\n          ? this.props.initialScrollOffset\n          : 0,\n      scrollUpdateWasRequested: false,\n    };\n\n    // Always use explicit constructor for React components.\n    // It produces less code after transpilation. (#26)\n    // eslint-disable-next-line no-useless-constructor\n    constructor(props: Props<T>) {\n      super(props);\n    }\n\n    static getDerivedStateFromProps(\n      nextProps: Props<T>,\n      prevState: State\n    ): $Shape<State> | null {\n      validateSharedProps(nextProps, prevState);\n      validateProps(nextProps);\n      return null;\n    }\n\n    scrollTo(scrollOffset: number): void {\n      scrollOffset = Math.max(0, scrollOffset);\n\n      this.setState(prevState => {\n        if (prevState.scrollOffset === scrollOffset) {\n          return null;\n        }\n        return {\n          scrollDirection:\n            prevState.scrollOffset < scrollOffset ? 'forward' : 'backward',\n          scrollOffset: scrollOffset,\n          scrollUpdateWasRequested: true,\n        };\n      }, this._resetIsScrollingDebounced);\n    }\n\n    scrollToItem(index: number, align: ScrollToAlign = 'auto'): void {\n      const { itemCount } = this.props;\n      const { scrollOffset } = this.state;\n\n      index = Math.max(0, Math.min(index, itemCount - 1));\n\n      this.scrollTo(\n        getOffsetForIndexAndAlignment(\n          this.props,\n          index,\n          align,\n          scrollOffset,\n          this._instanceProps\n        )\n      );\n    }\n\n    componentDidMount() {\n      const { direction, initialScrollOffset, layout } = this.props;\n\n      if (typeof initialScrollOffset === 'number' && this._outerRef != null) {\n        const outerRef = ((this._outerRef: any): HTMLElement);\n        // TODO Deprecate direction \"horizontal\"\n        if (direction === 'horizontal' || layout === 'horizontal') {\n          outerRef.scrollLeft = initialScrollOffset;\n        } else {\n          outerRef.scrollTop = initialScrollOffset;\n        }\n      }\n\n      this._callPropsCallbacks();\n    }\n\n    componentDidUpdate() {\n      const { direction, layout } = this.props;\n      const { scrollOffset, scrollUpdateWasRequested } = this.state;\n\n      if (scrollUpdateWasRequested && this._outerRef != null) {\n        const outerRef = ((this._outerRef: any): HTMLElement);\n\n        // TODO Deprecate direction \"horizontal\"\n        if (direction === 'horizontal' || layout === 'horizontal') {\n          if (direction === 'rtl') {\n            // TRICKY According to the spec, scrollLeft should be negative for RTL aligned elements.\n            // This is not the case for all browsers though (e.g. Chrome reports values as positive, measured relative to the left).\n            // So we need to determine which browser behavior we're dealing with, and mimic it.\n            switch (getRTLOffsetType()) {\n              case 'negative':\n                outerRef.scrollLeft = -scrollOffset;\n                break;\n              case 'positive-ascending':\n                outerRef.scrollLeft = scrollOffset;\n                break;\n              default:\n                const { clientWidth, scrollWidth } = outerRef;\n                outerRef.scrollLeft = scrollWidth - clientWidth - scrollOffset;\n                break;\n            }\n          } else {\n            outerRef.scrollLeft = scrollOffset;\n          }\n        } else {\n          outerRef.scrollTop = scrollOffset;\n        }\n      }\n\n      this._callPropsCallbacks();\n    }\n\n    componentWillUnmount() {\n      if (this._resetIsScrollingTimeoutId !== null) {\n        cancelTimeout(this._resetIsScrollingTimeoutId);\n      }\n    }\n\n    render() {\n      const {\n        children,\n        className,\n        direction,\n        height,\n        innerRef,\n        innerElementType,\n        innerTagName,\n        itemCount,\n        itemData,\n        itemKey = defaultItemKey,\n        layout,\n        outerElementType,\n        outerTagName,\n        style,\n        useIsScrolling,\n        width,\n      } = this.props;\n      const { isScrolling } = this.state;\n\n      // TODO Deprecate direction \"horizontal\"\n      const isHorizontal =\n        direction === 'horizontal' || layout === 'horizontal';\n\n      const onScroll = isHorizontal\n        ? this._onScrollHorizontal\n        : this._onScrollVertical;\n\n      const [startIndex, stopIndex] = this._getRangeToRender();\n\n      const items = [];\n      if (itemCount > 0) {\n        for (let index = startIndex; index <= stopIndex; index++) {\n          items.push(\n            createElement(children, {\n              data: itemData,\n              key: itemKey(index, itemData),\n              index,\n              isScrolling: useIsScrolling ? isScrolling : undefined,\n              style: this._getItemStyle(index),\n            })\n          );\n        }\n      }\n\n      // Read this value AFTER items have been created,\n      // So their actual sizes (if variable) are taken into consideration.\n      const estimatedTotalSize = getEstimatedTotalSize(\n        this.props,\n        this._instanceProps\n      );\n\n      return createElement(\n        outerElementType || outerTagName || 'div',\n        {\n          className,\n          onScroll,\n          ref: this._outerRefSetter,\n          style: {\n            position: 'relative',\n            height,\n            width,\n            overflow: 'auto',\n            WebkitOverflowScrolling: 'touch',\n            willChange: 'transform',\n            direction,\n            ...style,\n          },\n        },\n        createElement(innerElementType || innerTagName || 'div', {\n          children: items,\n          ref: innerRef,\n          style: {\n            height: isHorizontal ? '100%' : estimatedTotalSize,\n            pointerEvents: isScrolling ? 'none' : undefined,\n            width: isHorizontal ? estimatedTotalSize : '100%',\n          },\n        })\n      );\n    }\n\n    _callOnItemsRendered: (\n      overscanStartIndex: number,\n      overscanStopIndex: number,\n      visibleStartIndex: number,\n      visibleStopIndex: number\n    ) => void;\n    _callOnItemsRendered = memoizeOne(\n      (\n        overscanStartIndex: number,\n        overscanStopIndex: number,\n        visibleStartIndex: number,\n        visibleStopIndex: number\n      ) =>\n        ((this.props.onItemsRendered: any): onItemsRenderedCallback)({\n          overscanStartIndex,\n          overscanStopIndex,\n          visibleStartIndex,\n          visibleStopIndex,\n        })\n    );\n\n    _callOnScroll: (\n      scrollDirection: ScrollDirection,\n      scrollOffset: number,\n      scrollUpdateWasRequested: boolean\n    ) => void;\n    _callOnScroll = memoizeOne(\n      (\n        scrollDirection: ScrollDirection,\n        scrollOffset: number,\n        scrollUpdateWasRequested: boolean\n      ) =>\n        ((this.props.onScroll: any): onScrollCallback)({\n          scrollDirection,\n          scrollOffset,\n          scrollUpdateWasRequested,\n        })\n    );\n\n    _callPropsCallbacks() {\n      if (typeof this.props.onItemsRendered === 'function') {\n        const { itemCount } = this.props;\n        if (itemCount > 0) {\n          const [\n            overscanStartIndex,\n            overscanStopIndex,\n            visibleStartIndex,\n            visibleStopIndex,\n          ] = this._getRangeToRender();\n          this._callOnItemsRendered(\n            overscanStartIndex,\n            overscanStopIndex,\n            visibleStartIndex,\n            visibleStopIndex\n          );\n        }\n      }\n\n      if (typeof this.props.onScroll === 'function') {\n        const {\n          scrollDirection,\n          scrollOffset,\n          scrollUpdateWasRequested,\n        } = this.state;\n        this._callOnScroll(\n          scrollDirection,\n          scrollOffset,\n          scrollUpdateWasRequested\n        );\n      }\n    }\n\n    // Lazily create and cache item styles while scrolling,\n    // So that pure component sCU will prevent re-renders.\n    // We maintain this cache, and pass a style prop rather than index,\n    // So that List can clear cached styles and force item re-render if necessary.\n    _getItemStyle: (index: number) => Object;\n    _getItemStyle = (index: number): Object => {\n      const { direction, itemSize, layout } = this.props;\n\n      const itemStyleCache = this._getItemStyleCache(\n        shouldResetStyleCacheOnItemSizeChange && itemSize,\n        shouldResetStyleCacheOnItemSizeChange && layout,\n        shouldResetStyleCacheOnItemSizeChange && direction\n      );\n\n      let style;\n      if (itemStyleCache.hasOwnProperty(index)) {\n        style = itemStyleCache[index];\n      } else {\n        const offset = getItemOffset(this.props, index, this._instanceProps);\n        const size = getItemSize(this.props, index, this._instanceProps);\n\n        // TODO Deprecate direction \"horizontal\"\n        const isHorizontal =\n          direction === 'horizontal' || layout === 'horizontal';\n\n        const isRtl = direction === 'rtl';\n        const offsetHorizontal = isHorizontal ? offset : 0;\n        itemStyleCache[index] = style = {\n          position: 'absolute',\n          left: isRtl ? undefined : offsetHorizontal,\n          right: isRtl ? offsetHorizontal : undefined,\n          top: !isHorizontal ? offset : 0,\n          height: !isHorizontal ? size : '100%',\n          width: isHorizontal ? size : '100%',\n        };\n      }\n\n      return style;\n    };\n\n    _getItemStyleCache: (_: any, __: any, ___: any) => ItemStyleCache;\n    _getItemStyleCache = memoizeOne((_: any, __: any, ___: any) => ({}));\n\n    _getRangeToRender(): [number, number, number, number] {\n      const { itemCount, overscanCount } = this.props;\n      const { isScrolling, scrollDirection, scrollOffset } = this.state;\n\n      if (itemCount === 0) {\n        return [0, 0, 0, 0];\n      }\n\n      const startIndex = getStartIndexForOffset(\n        this.props,\n        scrollOffset,\n        this._instanceProps\n      );\n      const stopIndex = getStopIndexForStartIndex(\n        this.props,\n        startIndex,\n        scrollOffset,\n        this._instanceProps\n      );\n\n      // Overscan by one item in each direction so that tab/focus works.\n      // If there isn't at least one extra item, tab loops back around.\n      const overscanBackward =\n        !isScrolling || scrollDirection === 'backward'\n          ? Math.max(1, overscanCount)\n          : 1;\n      const overscanForward =\n        !isScrolling || scrollDirection === 'forward'\n          ? Math.max(1, overscanCount)\n          : 1;\n\n      return [\n        Math.max(0, startIndex - overscanBackward),\n        Math.max(0, Math.min(itemCount - 1, stopIndex + overscanForward)),\n        startIndex,\n        stopIndex,\n      ];\n    }\n\n    _onScrollHorizontal = (event: ScrollEvent): void => {\n      const { clientWidth, scrollLeft, scrollWidth } = event.currentTarget;\n      this.setState(prevState => {\n        if (prevState.scrollOffset === scrollLeft) {\n          // Scroll position may have been updated by cDM/cDU,\n          // In which case we don't need to trigger another render,\n          // And we don't want to update state.isScrolling.\n          return null;\n        }\n\n        const { direction } = this.props;\n\n        let scrollOffset = scrollLeft;\n        if (direction === 'rtl') {\n          // TRICKY According to the spec, scrollLeft should be negative for RTL aligned elements.\n          // This is not the case for all browsers though (e.g. Chrome reports values as positive, measured relative to the left).\n          // It's also easier for this component if we convert offsets to the same format as they would be in for ltr.\n          // So the simplest solution is to determine which browser behavior we're dealing with, and convert based on it.\n          switch (getRTLOffsetType()) {\n            case 'negative':\n              scrollOffset = -scrollLeft;\n              break;\n            case 'positive-descending':\n              scrollOffset = scrollWidth - clientWidth - scrollLeft;\n              break;\n          }\n        }\n\n        // Prevent Safari's elastic scrolling from causing visual shaking when scrolling past bounds.\n        scrollOffset = Math.max(\n          0,\n          Math.min(scrollOffset, scrollWidth - clientWidth)\n        );\n\n        return {\n          isScrolling: true,\n          scrollDirection:\n            prevState.scrollOffset < scrollLeft ? 'forward' : 'backward',\n          scrollOffset,\n          scrollUpdateWasRequested: false,\n        };\n      }, this._resetIsScrollingDebounced);\n    };\n\n    _onScrollVertical = (event: ScrollEvent): void => {\n      const { clientHeight, scrollHeight, scrollTop } = event.currentTarget;\n      this.setState(prevState => {\n        if (prevState.scrollOffset === scrollTop) {\n          // Scroll position may have been updated by cDM/cDU,\n          // In which case we don't need to trigger another render,\n          // And we don't want to update state.isScrolling.\n          return null;\n        }\n\n        // Prevent Safari's elastic scrolling from causing visual shaking when scrolling past bounds.\n        const scrollOffset = Math.max(\n          0,\n          Math.min(scrollTop, scrollHeight - clientHeight)\n        );\n\n        return {\n          isScrolling: true,\n          scrollDirection:\n            prevState.scrollOffset < scrollOffset ? 'forward' : 'backward',\n          scrollOffset,\n          scrollUpdateWasRequested: false,\n        };\n      }, this._resetIsScrollingDebounced);\n    };\n\n    _outerRefSetter = (ref: any): void => {\n      const { outerRef } = this.props;\n\n      this._outerRef = ((ref: any): HTMLDivElement);\n\n      if (typeof outerRef === 'function') {\n        outerRef(ref);\n      } else if (\n        outerRef != null &&\n        typeof outerRef === 'object' &&\n        outerRef.hasOwnProperty('current')\n      ) {\n        outerRef.current = ref;\n      }\n    };\n\n    _resetIsScrollingDebounced = () => {\n      if (this._resetIsScrollingTimeoutId !== null) {\n        cancelTimeout(this._resetIsScrollingTimeoutId);\n      }\n\n      this._resetIsScrollingTimeoutId = requestTimeout(\n        this._resetIsScrolling,\n        IS_SCROLLING_DEBOUNCE_INTERVAL\n      );\n    };\n\n    _resetIsScrolling = () => {\n      this._resetIsScrollingTimeoutId = null;\n\n      this.setState({ isScrolling: false }, () => {\n        // Clear style cache after state update has been committed.\n        // This way we don't break pure sCU for items that don't use isScrolling param.\n        this._getItemStyleCache(-1, null);\n      });\n    };\n  };\n}\n\n// NOTE: I considered further wrapping individual items with a pure ListItem component.\n// This would avoid ever calling the render function for the same index more than once,\n// But it would also add the overhead of a lot of components/fibers.\n// I assume people already do this (render function returning a class component),\n// So my doing it would just unnecessarily double the wrappers.\n\nconst validateSharedProps = (\n  {\n    children,\n    direction,\n    height,\n    layout,\n    innerTagName,\n    outerTagName,\n    width,\n  }: Props<any>,\n  { instance }: State\n): void => {\n  if (process.env.NODE_ENV !== 'production') {\n    if (innerTagName != null || outerTagName != null) {\n      if (devWarningsTagName && !devWarningsTagName.has(instance)) {\n        devWarningsTagName.add(instance);\n        console.warn(\n          'The innerTagName and outerTagName props have been deprecated. ' +\n            'Please use the innerElementType and outerElementType props instead.'\n        );\n      }\n    }\n\n    // TODO Deprecate direction \"horizontal\"\n    const isHorizontal = direction === 'horizontal' || layout === 'horizontal';\n\n    switch (direction) {\n      case 'horizontal':\n      case 'vertical':\n        if (devWarningsDirection && !devWarningsDirection.has(instance)) {\n          devWarningsDirection.add(instance);\n          console.warn(\n            'The direction prop should be either \"ltr\" (default) or \"rtl\". ' +\n              'Please use the layout prop to specify \"vertical\" (default) or \"horizontal\" orientation.'\n          );\n        }\n        break;\n      case 'ltr':\n      case 'rtl':\n        // Valid values\n        break;\n      default:\n        throw Error(\n          'An invalid \"direction\" prop has been specified. ' +\n            'Value should be either \"ltr\" or \"rtl\". ' +\n            `\"${direction}\" was specified.`\n        );\n    }\n\n    switch (layout) {\n      case 'horizontal':\n      case 'vertical':\n        // Valid values\n        break;\n      default:\n        throw Error(\n          'An invalid \"layout\" prop has been specified. ' +\n            'Value should be either \"horizontal\" or \"vertical\". ' +\n            `\"${layout}\" was specified.`\n        );\n    }\n\n    if (children == null) {\n      throw Error(\n        'An invalid \"children\" prop has been specified. ' +\n          'Value should be a React component. ' +\n          `\"${children === null ? 'null' : typeof children}\" was specified.`\n      );\n    }\n\n    if (isHorizontal && typeof width !== 'number') {\n      throw Error(\n        'An invalid \"width\" prop has been specified. ' +\n          'Horizontal lists must specify a number for width. ' +\n          `\"${width === null ? 'null' : typeof width}\" was specified.`\n      );\n    } else if (!isHorizontal && typeof height !== 'number') {\n      throw Error(\n        'An invalid \"height\" prop has been specified. ' +\n          'Vertical lists must specify a number for height. ' +\n          `\"${height === null ? 'null' : typeof height}\" was specified.`\n      );\n    }\n  }\n};\n","// @flow\n\nimport createListComponent from './createListComponent';\n\nimport type { Props, ScrollToAlign } from './createListComponent';\n\nconst DEFAULT_ESTIMATED_ITEM_SIZE = 50;\n\ntype VariableSizeProps = {|\n  estimatedItemSize: number,\n  ...Props<any>,\n|};\n\ntype itemSizeGetter = (index: number) => number;\n\ntype ItemMetadata = {|\n  offset: number,\n  size: number,\n|};\ntype InstanceProps = {|\n  itemMetadataMap: { [index: number]: ItemMetadata },\n  estimatedItemSize: number,\n  lastMeasuredIndex: number,\n|};\n\nconst getItemMetadata = (\n  props: Props<any>,\n  index: number,\n  instanceProps: InstanceProps\n): ItemMetadata => {\n  const { itemSize } = ((props: any): VariableSizeProps);\n  const { itemMetadataMap, lastMeasuredIndex } = instanceProps;\n\n  if (index > lastMeasuredIndex) {\n    let offset = 0;\n    if (lastMeasuredIndex >= 0) {\n      const itemMetadata = itemMetadataMap[lastMeasuredIndex];\n      offset = itemMetadata.offset + itemMetadata.size;\n    }\n\n    for (let i = lastMeasuredIndex + 1; i <= index; i++) {\n      let size = ((itemSize: any): itemSizeGetter)(i);\n\n      itemMetadataMap[i] = {\n        offset,\n        size,\n      };\n\n      offset += size;\n    }\n\n    instanceProps.lastMeasuredIndex = index;\n  }\n\n  return itemMetadataMap[index];\n};\n\nconst findNearestItem = (\n  props: Props<any>,\n  instanceProps: InstanceProps,\n  offset: number\n) => {\n  const { itemMetadataMap, lastMeasuredIndex } = instanceProps;\n\n  const lastMeasuredItemOffset =\n    lastMeasuredIndex > 0 ? itemMetadataMap[lastMeasuredIndex].offset : 0;\n\n  if (lastMeasuredItemOffset >= offset) {\n    // If we've already measured items within this range just use a binary search as it's faster.\n    return findNearestItemBinarySearch(\n      props,\n      instanceProps,\n      lastMeasuredIndex,\n      0,\n      offset\n    );\n  } else {\n    // If we haven't yet measured this high, fallback to an exponential search with an inner binary search.\n    // The exponential search avoids pre-computing sizes for the full set of items as a binary search would.\n    // The overall complexity for this approach is O(log n).\n    return findNearestItemExponentialSearch(\n      props,\n      instanceProps,\n      Math.max(0, lastMeasuredIndex),\n      offset\n    );\n  }\n};\n\nconst findNearestItemBinarySearch = (\n  props: Props<any>,\n  instanceProps: InstanceProps,\n  high: number,\n  low: number,\n  offset: number\n): number => {\n  while (low <= high) {\n    const middle = low + Math.floor((high - low) / 2);\n    const currentOffset = getItemMetadata(props, middle, instanceProps).offset;\n\n    if (currentOffset === offset) {\n      return middle;\n    } else if (currentOffset < offset) {\n      low = middle + 1;\n    } else if (currentOffset > offset) {\n      high = middle - 1;\n    }\n  }\n\n  if (low > 0) {\n    return low - 1;\n  } else {\n    return 0;\n  }\n};\n\nconst findNearestItemExponentialSearch = (\n  props: Props<any>,\n  instanceProps: InstanceProps,\n  index: number,\n  offset: number\n): number => {\n  const { itemCount } = props;\n  let interval = 1;\n\n  while (\n    index < itemCount &&\n    getItemMetadata(props, index, instanceProps).offset < offset\n  ) {\n    index += interval;\n    interval *= 2;\n  }\n\n  return findNearestItemBinarySearch(\n    props,\n    instanceProps,\n    Math.min(index, itemCount - 1),\n    Math.floor(index / 2),\n    offset\n  );\n};\n\nconst getEstimatedTotalSize = (\n  { itemCount }: Props<any>,\n  { itemMetadataMap, estimatedItemSize, lastMeasuredIndex }: InstanceProps\n) => {\n  let totalSizeOfMeasuredItems = 0;\n\n  // Edge case check for when the number of items decreases while a scroll is in progress.\n  // https://github.com/bvaughn/react-window/pull/138\n  if (lastMeasuredIndex >= itemCount) {\n    lastMeasuredIndex = itemCount - 1;\n  }\n\n  if (lastMeasuredIndex >= 0) {\n    const itemMetadata = itemMetadataMap[lastMeasuredIndex];\n    totalSizeOfMeasuredItems = itemMetadata.offset + itemMetadata.size;\n  }\n\n  const numUnmeasuredItems = itemCount - lastMeasuredIndex - 1;\n  const totalSizeOfUnmeasuredItems = numUnmeasuredItems * estimatedItemSize;\n\n  return totalSizeOfMeasuredItems + totalSizeOfUnmeasuredItems;\n};\n\nconst VariableSizeList = createListComponent({\n  getItemOffset: (\n    props: Props<any>,\n    index: number,\n    instanceProps: InstanceProps\n  ): number => getItemMetadata(props, index, instanceProps).offset,\n\n  getItemSize: (\n    props: Props<any>,\n    index: number,\n    instanceProps: InstanceProps\n  ): number => instanceProps.itemMetadataMap[index].size,\n\n  getEstimatedTotalSize,\n\n  getOffsetForIndexAndAlignment: (\n    props: Props<any>,\n    index: number,\n    align: ScrollToAlign,\n    scrollOffset: number,\n    instanceProps: InstanceProps\n  ): number => {\n    const { direction, height, layout, width } = props;\n\n    // TODO Deprecate direction \"horizontal\"\n    const isHorizontal = direction === 'horizontal' || layout === 'horizontal';\n    const size = (((isHorizontal ? width : height): any): number);\n    const itemMetadata = getItemMetadata(props, index, instanceProps);\n\n    // Get estimated total size after ItemMetadata is computed,\n    // To ensure it reflects actual measurements instead of just estimates.\n    const estimatedTotalSize = getEstimatedTotalSize(props, instanceProps);\n\n    const maxOffset = Math.max(\n      0,\n      Math.min(estimatedTotalSize - size, itemMetadata.offset)\n    );\n    const minOffset = Math.max(\n      0,\n      itemMetadata.offset - size + itemMetadata.size\n    );\n\n    if (align === 'smart') {\n      if (\n        scrollOffset >= minOffset - size &&\n        scrollOffset <= maxOffset + size\n      ) {\n        align = 'auto';\n      } else {\n        align = 'center';\n      }\n    }\n\n    switch (align) {\n      case 'start':\n        return maxOffset;\n      case 'end':\n        return minOffset;\n      case 'center':\n        return Math.round(minOffset + (maxOffset - minOffset) / 2);\n      case 'auto':\n      default:\n        if (scrollOffset >= minOffset && scrollOffset <= maxOffset) {\n          return scrollOffset;\n        } else if (scrollOffset < minOffset) {\n          return minOffset;\n        } else {\n          return maxOffset;\n        }\n    }\n  },\n\n  getStartIndexForOffset: (\n    props: Props<any>,\n    offset: number,\n    instanceProps: InstanceProps\n  ): number => findNearestItem(props, instanceProps, offset),\n\n  getStopIndexForStartIndex: (\n    props: Props<any>,\n    startIndex: number,\n    scrollOffset: number,\n    instanceProps: InstanceProps\n  ): number => {\n    const { direction, height, itemCount, layout, width } = props;\n\n    // TODO Deprecate direction \"horizontal\"\n    const isHorizontal = direction === 'horizontal' || layout === 'horizontal';\n    const size = (((isHorizontal ? width : height): any): number);\n    const itemMetadata = getItemMetadata(props, startIndex, instanceProps);\n    const maxOffset = scrollOffset + size;\n\n    let offset = itemMetadata.offset + itemMetadata.size;\n    let stopIndex = startIndex;\n\n    while (stopIndex < itemCount - 1 && offset < maxOffset) {\n      stopIndex++;\n      offset += getItemMetadata(props, stopIndex, instanceProps).size;\n    }\n\n    return stopIndex;\n  },\n\n  initInstanceProps(props: Props<any>, instance: any): InstanceProps {\n    const { estimatedItemSize } = ((props: any): VariableSizeProps);\n\n    const instanceProps = {\n      itemMetadataMap: {},\n      estimatedItemSize: estimatedItemSize || DEFAULT_ESTIMATED_ITEM_SIZE,\n      lastMeasuredIndex: -1,\n    };\n\n    instance.resetAfterIndex = (\n      index: number,\n      shouldForceUpdate?: boolean = true\n    ) => {\n      instanceProps.lastMeasuredIndex = Math.min(\n        instanceProps.lastMeasuredIndex,\n        index - 1\n      );\n\n      // We could potentially optimize further by only evicting styles after this index,\n      // But since styles are only cached while scrolling is in progress-\n      // It seems an unnecessary optimization.\n      // It's unlikely that resetAfterIndex() will be called while a user is scrolling.\n      instance._getItemStyleCache(-1);\n\n      if (shouldForceUpdate) {\n        instance.forceUpdate();\n      }\n    };\n\n    return instanceProps;\n  },\n\n  shouldResetStyleCacheOnItemSizeChange: false,\n\n  validateProps: ({ itemSize }: Props<any>): void => {\n    if (process.env.NODE_ENV !== 'production') {\n      if (typeof itemSize !== 'function') {\n        throw Error(\n          'An invalid \"itemSize\" prop has been specified. ' +\n            'Value should be a function. ' +\n            `\"${itemSize === null ? 'null' : typeof itemSize}\" was specified.`\n        );\n      }\n    }\n  },\n});\n\nexport default VariableSizeList;\n","// @flow\n\nimport createListComponent from './createListComponent';\n\nimport type { Props, ScrollToAlign } from './createListComponent';\n\nconst FixedSizeList = createListComponent({\n  getItemOffset: ({ itemSize }: Props<any>, index: number): number =>\n    index * ((itemSize: any): number),\n\n  getItemSize: ({ itemSize }: Props<any>, index: number): number =>\n    ((itemSize: any): number),\n\n  getEstimatedTotalSize: ({ itemCount, itemSize }: Props<any>) =>\n    ((itemSize: any): number) * itemCount,\n\n  getOffsetForIndexAndAlignment: (\n    { direction, height, itemCount, itemSize, layout, width }: Props<any>,\n    index: number,\n    align: ScrollToAlign,\n    scrollOffset: number\n  ): number => {\n    // TODO Deprecate direction \"horizontal\"\n    const isHorizontal = direction === 'horizontal' || layout === 'horizontal';\n    const size = (((isHorizontal ? width : height): any): number);\n    const lastItemOffset = Math.max(\n      0,\n      itemCount * ((itemSize: any): number) - size\n    );\n    const maxOffset = Math.min(\n      lastItemOffset,\n      index * ((itemSize: any): number)\n    );\n    const minOffset = Math.max(\n      0,\n      index * ((itemSize: any): number) - size + ((itemSize: any): number)\n    );\n\n    if (align === 'smart') {\n      if (\n        scrollOffset >= minOffset - size &&\n        scrollOffset <= maxOffset + size\n      ) {\n        align = 'auto';\n      } else {\n        align = 'center';\n      }\n    }\n\n    switch (align) {\n      case 'start':\n        return maxOffset;\n      case 'end':\n        return minOffset;\n      case 'center': {\n        // \"Centered\" offset is usually the average of the min and max.\n        // But near the edges of the list, this doesn't hold true.\n        const middleOffset = Math.round(\n          minOffset + (maxOffset - minOffset) / 2\n        );\n        if (middleOffset < Math.ceil(size / 2)) {\n          return 0; // near the beginning\n        } else if (middleOffset > lastItemOffset + Math.floor(size / 2)) {\n          return lastItemOffset; // near the end\n        } else {\n          return middleOffset;\n        }\n      }\n      case 'auto':\n      default:\n        if (scrollOffset >= minOffset && scrollOffset <= maxOffset) {\n          return scrollOffset;\n        } else if (scrollOffset < minOffset) {\n          return minOffset;\n        } else {\n          return maxOffset;\n        }\n    }\n  },\n\n  getStartIndexForOffset: (\n    { itemCount, itemSize }: Props<any>,\n    offset: number\n  ): number =>\n    Math.max(\n      0,\n      Math.min(itemCount - 1, Math.floor(offset / ((itemSize: any): number)))\n    ),\n\n  getStopIndexForStartIndex: (\n    { direction, height, itemCount, itemSize, layout, width }: Props<any>,\n    startIndex: number,\n    scrollOffset: number\n  ): number => {\n    // TODO Deprecate direction \"horizontal\"\n    const isHorizontal = direction === 'horizontal' || layout === 'horizontal';\n    const offset = startIndex * ((itemSize: any): number);\n    const size = (((isHorizontal ? width : height): any): number);\n    const numVisibleItems = Math.ceil(\n      (size + scrollOffset - offset) / ((itemSize: any): number)\n    );\n    return Math.max(\n      0,\n      Math.min(\n        itemCount - 1,\n        startIndex + numVisibleItems - 1 // -1 is because stop index is inclusive\n      )\n    );\n  },\n\n  initInstanceProps(props: Props<any>): any {\n    // Noop\n  },\n\n  shouldResetStyleCacheOnItemSizeChange: true,\n\n  validateProps: ({ itemSize }: Props<any>): void => {\n    if (process.env.NODE_ENV !== 'production') {\n      if (typeof itemSize !== 'number') {\n        throw Error(\n          'An invalid \"itemSize\" prop has been specified. ' +\n            'Value should be a number. ' +\n            `\"${itemSize === null ? 'null' : typeof itemSize}\" was specified.`\n        );\n      }\n    }\n  },\n});\n\nexport default FixedSizeList;\n","// @flow\n\n// Pulled from react-compat\n// https://github.com/developit/preact-compat/blob/7c5de00e7c85e2ffd011bf3af02899b63f699d3a/src/index.js#L349\nexport default function shallowDiffers(prev: Object, next: Object): boolean {\n  for (let attribute in prev) {\n    if (!(attribute in next)) {\n      return true;\n    }\n  }\n  for (let attribute in next) {\n    if (prev[attribute] !== next[attribute]) {\n      return true;\n    }\n  }\n  return false;\n}\n","// @flow\n\nimport shallowDiffers from './shallowDiffers';\n\n// Custom comparison function for React.memo().\n// It knows to compare individual style props and ignore the wrapper object.\n// See https://reactjs.org/docs/react-api.html#reactmemo\nexport default function areEqual(\n  prevProps: Object,\n  nextProps: Object\n): boolean {\n  const { style: prevStyle, ...prevRest } = prevProps;\n  const { style: nextStyle, ...nextRest } = nextProps;\n\n  return (\n    !shallowDiffers(prevStyle, nextStyle) && !shallowDiffers(prevRest, nextRest)\n  );\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport DSInput from '../Input';\n\nconst DSTextBox = ({\n  containerProps = {},\n  autoFocus = false,\n  disabled = false,\n  maxLength = 255,\n  minLength = 0,\n  fluidWidth = false,\n  placeholder,\n  value = '',\n  hasError = false,\n  readOnly = false,\n  innerRef = null,\n  type = 'text',\n  min = undefined,\n  max = undefined,\n  clearable = false,\n  leftComponent = null,\n  rightComponent = null,\n  required = false,\n  variant,\n  ...otherProps\n}) => (\n  <DSInput\n    {...otherProps}\n    aria-label={otherProps['aria-label'] || 'Text Box'}\n    autoFocus={autoFocus}\n    clearable={clearable}\n    containerProps={containerProps}\n    disabled={disabled}\n    fluidWidth={fluidWidth}\n    hasError={hasError}\n    innerRef={innerRef}\n    leftComponent={leftComponent}\n    max={max}\n    maxLength={maxLength}\n    min={min}\n    minLength={minLength}\n    placeholder={placeholder}\n    readOnly={readOnly}\n    required={required}\n    rightComponent={rightComponent}\n    role=\"textbox\"\n    type={type}\n    value={value}\n    variant={variant}\n  />\n);\n\nDSTextBox.propTypes = {\n  containerProps: PropTypes.shape({}),\n  /**\n   * Whether the text box uses auto focus or not\n   */\n  autoFocus: PropTypes.bool,\n  /**\n   * Whether the text box is disabled or not\n   */\n  disabled: PropTypes.bool,\n  /**\n   * Max length for the text box\n   */\n  maxLength: PropTypes.number,\n  /**\n   * Min length for the text box\n   */\n  minLength: PropTypes.number,\n  /**\n   * Make the content of the text box fit the container or not\n   */\n  fluidWidth: PropTypes.bool,\n  /**\n   * Placeholder for the text box\n   */\n  placeholder: PropTypes.string,\n  /**\n   * Default value once the component is initialized\n   */\n  value: PropTypes.string,\n  /**\n   * Whether the text box has error or not\n   */\n  hasError: PropTypes.bool,\n  /**\n   * Whether the text box is read only or not\n   */\n  readOnly: PropTypes.bool,\n  min: PropTypes.number,\n  max: PropTypes.number,\n  /**\n   * Whether the text box is clearable or not\n   */\n  clearable: PropTypes.bool,\n  /**\n   * Component to be added at the left side of the text box\n   */\n  leftComponent: PropTypes.element,\n  /**\n   * Component to be added at the right side of the text box\n   */\n  rightComponent: PropTypes.element,\n  /**\n   * Whether the text box is required or not\n   */\n  required: PropTypes.bool,\n  /**\n   * [\n   *  'variant-default',\n   *  'variant-focus',\n   *  'variant-active',\n   *  'variant-disabled',\n   * ]\n   */\n  variant: PropTypes.string,\n};\n\nexport default DSTextBox;\n","import { useContext, useEffect } from 'react';\nimport FocusGroupContext from './FocusGroupContext';\n\nexport default function useFocusGroupItem(ref = {}, props) {\n  const { register, unregister, ...otherActions } =\n    useContext(FocusGroupContext) || {};\n\n  useEffect(() => {\n    if (ref.current && register) register(ref.current, props);\n    return () => {\n      if (ref.current && unregister) unregister(ref.current);\n    };\n  });\n\n  // if the focus item is not wrapped with the focus provider then return null\n  if (!register) return {};\n  return otherActions;\n}\n\nexport const useFocusGroupWithState = (ref = {}, props) => {\n  const { register, unregister, ...otherActions } =\n    useContext(FocusGroupContext) || {};\n\n  useEffect(() => {\n    if (ref && register) register(ref, props);\n    return () => {\n      if (ref && unregister) unregister(ref);\n    };\n  }, [ref]);\n\n  // if the focus item is not wrapped with the focus provider then return null\n  if (!register) return {};\n  return otherActions;\n};\n","/* eslint-disable */\nimport createIcon from './utils/createIcon';\n\nexport default createIcon({\n  paths: [\n    'M9.496 12c-.828 0-1.5-.672-1.5-1.5S8.668 9 9.496 9s1.5.672 1.5 1.5-.672 1.5-1.5 1.5zM9.496 7c-.828 0-1.5-.672-1.5-1.5S8.668 4 9.496 4s1.5.672 1.5 1.5-.672 1.5-1.5 1.5zM9.496 17c-.828 0-1.5-.672-1.5-1.5s.672-1.5 1.5-1.5 1.5.672 1.5 1.5-.672 1.5-1.5 1.5z',\n  ],\n  height: 20,\n  width: 20,\n});\n","/* eslint-disable */\nimport createIcon from './utils/createIcon';\n\nexport default createIcon({\n  paths: [\n    'M18.869 19.162l-5.943-6.484c1.339-1.401 2.075-3.233 2.075-5.178 0-2.003-.78-3.887-2.197-5.303S9.504 0 7.501 0 3.614.78 2.198 2.197.001 5.497.001 7.5s.78 3.887 2.197 5.303S5.498 15 7.501 15c1.726 0 3.362-.579 4.688-1.645l5.943 6.483a.497.497 0 0 0 .369.162.4997.4997 0 0 0 .369-.837l-.001-.001zM1 7.5C1 3.916 3.916 1 7.5 1S14 3.916 14 7.5 11.084 14 7.5 14 1 11.084 1 7.5z',\n  ],\n  height: 20,\n  width: 20,\n});\n","import React, { cloneElement, useCallback, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { addOrRemove, runAll } from '@elliemae/ds-utilities/utils';\nimport useDerivedStateFromProps from '@elliemae/ds-utilities/hooks/useDerivedStateFromProps';\n\nexport function useCheckableGroup({\n  children,\n  active: activeProp,\n  multi,\n  onCheck = () => null,\n}) {\n  const [active, setActive] = useDerivedStateFromProps(activeProp);\n\n  const handleCheck = ({ target: { value } }, item) => {\n    setActive(prevActive => {\n      const nextActive = multi ? addOrRemove(prevActive, value) : value;\n      onCheck(nextActive, item);\n      return nextActive;\n    });\n  };\n\n  return React.Children.map(children, child => {\n    const { props } = child;\n    const checked = Array.isArray(active)\n      ? active.indexOf(props.name) !== -1\n      : active === props.name;\n\n    return cloneElement(child, {\n      ...props,\n      checked,\n      onClick: runAll(handleCheck, props.onClick),\n    });\n  });\n}\n\nfunction CheckableGroup({\n  active = [],\n  multi = false, // checkbox or radio\n  children,\n}) {\n  return useCheckableGroup({ active, multi, children });\n}\n\nCheckableGroup.propTypes = {\n  /* The item (if multi false) or items (if multi true) selected */\n  active: PropTypes.arrayOf(PropTypes.string),\n  /* Whether is multi select or not */\n  multi: PropTypes.bool,\n  /* Handler when a user checks an item */\n  onCheck: PropTypes.func,\n};\n\nexport default CheckableGroup;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { debounce } from '@elliemae/ds-utilities/utils';\n\nconst withSearchable = (WrappedComponent) => {\n  class Searchable extends Component {\n    debouncedSearch = debounce(this.handleSearch, 200);\n\n    constructor(props) {\n      super(props);\n      this.state = {\n        value: props.value,\n      };\n      this.handleSearch = this.handleSearch.bind(this);\n      this.handleKeyUp = this.handleKeyUp.bind(this);\n      this.handleChange = this.handleChange.bind(this);\n      this.buttonRef = React.createRef();\n    }\n\n    static getDerivedStateFromProps(nextProps, { prevPropValue }) {\n      if (nextProps.value !== prevPropValue) {\n        return {\n          value: nextProps.value,\n          prevPropValue: nextProps.value,\n        };\n      }\n      return null;\n    }\n\n    handleKeyUp(e) {\n      const { onKeyUp, searchOnEnter } = this.props;\n      const { key } = e;\n      if (searchOnEnter && key === 'Enter') {\n        this.handleSearch();\n      }\n      onKeyUp(e);\n    }\n\n    handleSearch() {\n      const { onSearch, property, clearOnSearch, searchOnEnter } = this.props;\n      const { value } = this.state;\n\n      if (clearOnSearch) this.setState({ value: '' });\n      if (searchOnEnter && !value) return;\n      onSearch({\n        query: { [property]: value },\n        property,\n        value,\n      });\n    }\n\n    handleChange({ target }) {\n      const { value } = target;\n      const { searchOnEnter, onChange } = this.props;\n      onChange(value);\n      this.setState({ value }, () => {\n        if (!searchOnEnter) this.debouncedSearch();\n      });\n    }\n\n    render() {\n      const { value } = this.state;\n      const { containerProps, ...rest } = this.props;\n\n      return (\n        <WrappedComponent\n          {...rest}\n          buttonRef={this.buttonRef}\n          containerProps={containerProps}\n          onChange={this.handleChange}\n          onKeyUp={this.handleKeyUp}\n          onSearch={this.handleSearch}\n          value={value}\n        />\n      );\n    }\n  }\n\n  Searchable.defaultProps = {\n    onChange: () => null,\n    onSearch: () => null,\n    onKeyUp: () => null,\n    property: 'all',\n    searchOnEnter: true,\n    clearOnSearch: false,\n    containerProps: {},\n  };\n\n  Searchable.propTypes = {\n    containerProps: PropTypes.shape({}),\n    onChange: PropTypes.func,\n    onSearch: PropTypes.func,\n    onKeyUp: PropTypes.func,\n    property: PropTypes.string,\n    searchOnEnter: PropTypes.bool,\n    clearOnSearch: PropTypes.bool,\n    value: PropTypes.string,\n  };\n\n  return Searchable;\n};\n\nexport default withSearchable;\n","/* eslint-disable react/no-unused-state */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Search from '@elliemae/ds-icons/Search';\nimport DSButton from '../../Button';\nimport DSTextBox from '../TextBox';\nimport withSearchable from './withSearchable';\n\nconst SearchBoxImpl = ({\n  containerProps,\n  placeholder,\n  className,\n  disabled,\n  disableButton,\n  innerRef,\n  showIcon,\n  style,\n  onChange,\n  onKeyUp,\n  onSearch,\n  onBlur,\n  readOnly,\n  value,\n  clearable,\n}) => (\n  <DSTextBox\n    className={className}\n    clearable={clearable}\n    containerProps={containerProps}\n    disabled={disabled}\n    innerRef={innerRef}\n    onChange={onChange}\n    onKeyUp={onKeyUp}\n    onBlur={onBlur}\n    placeholder={placeholder}\n    readOnly={readOnly}\n    rightComponent={\n      showIcon && (\n        <DSButton\n          disabled={disabled || disableButton}\n          buttonType=\"text\"\n          icon={<Search />}\n          iconSize=\"s\"\n          onClick={onSearch}\n          type=\"secondary\"\n          style={{ borderColor: '#A9B1BE', borderLeft: 'none' }}\n        />\n      )\n    }\n    style={style}\n    value={value}\n  />\n);\n\nSearchBoxImpl.propTypes = {\n  containerProps: PropTypes.shape({}),\n  className: PropTypes.string,\n  innerRef: PropTypes.any,\n  style: PropTypes.objectOf(PropTypes.string),\n  placeholder: PropTypes.string,\n  onKeyUp: PropTypes.func,\n  onSearch: PropTypes.func,\n  onChange: PropTypes.func,\n  onBlur: PropTypes.func,\n  value: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.number,\n    PropTypes.object,\n  ]),\n  showIcon: PropTypes.bool,\n  disabled: PropTypes.bool,\n  disableButton: PropTypes.bool,\n  readOnly: PropTypes.bool,\n  clearable: PropTypes.bool,\n};\n\nexport default withSearchable(SearchBoxImpl);\n","/* eslint-disable */\nimport createIcon from './utils/createIcon';\n\nexport default createIcon({\n  paths: [\n    'M12 10.5a.503.503 0 0 0-.109-.313l-4-5a.5013.5013 0 0 0-.703-.078c-.214.173-.25.488-.078.703l3.75 4.688-3.75 4.688c-.172.218-.136.531.078.703.216.172.53.138.703-.078l4-5A.501.501 0 0 0 12 10.5z',\n  ],\n  height: 20,\n  width: 20,\n});\n","/* eslint-disable */\nimport createIcon from './utils/createIcon';\n\nexport default createIcon({\n  paths: ['M7.5 12.875L4.625 10l-.875.875 3.75 3.75 8.75-8.75L15.375 5z'],\n  height: 20,\n  width: 20,\n});\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport SearchBoxImpl from './SearchBoxImpl';\n\nconst DSSearchBox = ({\n  containerProps = {},\n  innerRef = undefined,\n  className = '',\n  disabled = false,\n  disableButton = false,\n  searchIcon = 'search',\n  style = {},\n  property = 'all',\n  placeholder = 'Search all', // todo: i18nize this\n  searchOnEnter = true,\n  clearOnSearch = false,\n  onKeyUp = () => null,\n  onSearch = () => null,\n  onChange = () => null,\n  onBlur = () => null,\n  readOnly = false,\n  value = undefined,\n  showIcon = true,\n}) => (\n  <SearchBoxImpl\n    className={className}\n    clearOnSearch={clearOnSearch}\n    containerProps={containerProps}\n    disabled={disabled}\n    disableButton={disableButton}\n    innerRef={innerRef}\n    onKeyUp={onKeyUp}\n    onSearch={onSearch}\n    onChange={onChange}\n    onBlur={onBlur}\n    placeholder={placeholder}\n    property={property}\n    readOnly={readOnly}\n    searchIcon={searchIcon}\n    searchOnEnter={searchOnEnter}\n    showIcon={showIcon}\n    style={style}\n    value={value}\n  />\n);\n\nDSSearchBox.propTypes = {\n  containerProps: PropTypes.shape({}),\n  className: PropTypes.string,\n  innerRef: PropTypes.any,\n  /**\n   * Icon to use in the search button\n   */\n  searchIcon: PropTypes.string,\n  /**\n   * Set style to the search box\n   */\n  style: PropTypes.objectOf(PropTypes.string),\n  property: PropTypes.string,\n  /**\n   * Placeholder for the search box\n   */\n  placeholder: PropTypes.string,\n  /**\n   * Whether to trigger the search once the enter is pressed\n   */\n  searchOnEnter: PropTypes.bool,\n  /**\n   * Whether to clear the input on search\n   */\n  clearOnSearch: PropTypes.bool,\n  /**\n   * Allows a function that is triggered once in the search box a keyboard key is released\n   */\n  onKeyUp: PropTypes.func,\n  /**\n   * Allows a function that is triggered once the search is clicked\n   */\n  onSearch: PropTypes.func,\n  /**\n   * Allows a function that is triggered on change\n   */\n  onChange: PropTypes.func,\n  /**\n   * Function that is triggered on blur\n   */\n  onBlur: PropTypes.func,\n  /**\n   * Selected default active value\n   */\n  value: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.number,\n    PropTypes.object,\n  ]),\n  /**\n   * Whether to show an icon or not\n   */\n  showIcon: PropTypes.bool,\n  /**\n   * Disables the search input and button\n   */\n  disabled: PropTypes.bool,\n  /**\n   * Disables the search button\n   */\n  disableButton: PropTypes.bool,\n  readOnly: PropTypes.bool,\n};\n\nexport default DSSearchBox;\n","const ICONS_SIZES = {\n  XXS: 'xxs',\n  XS: 'xs',\n  S: 's',\n  M: 'm',\n  L: 'l',\n  XL: 'xl',\n  XXL: 'xxl',\n};\n\nexport default ICONS_SIZES;\n","import React, { cloneElement } from 'react';\n\nexport default (children, extraProps = {}) =>\n  React.Children.map(\n    children,\n    component =>\n      component\n        ? cloneElement(component, {\n            ...extraProps,\n            ...component.props,\n            className: `${component.props.className} toolbar-item`,\n          })\n        : component,\n    null,\n  );\n","import React from 'react';\nimport { aggregatedClasses } from '@elliemae/ds-classnames';\nimport styled from 'styled-components';\nimport DSSeparator from '../../Separator';\n\nconst blockName = 'menu-separator';\nconst Li = styled.li`\n  display: flex;\n  align-items: flex-start;\n  flex-direction: column;\n`;\n\nconst Title = aggregatedClasses('h5')(blockName, 'title');\nconst MenuSeparator = ({ title, showSeparator = true }) => (\n  <Li>\n    {showSeparator && <DSSeparator />}\n    {title && <Title>{title}</Title>}\n  </Li>\n);\n\nexport default MenuSeparator;\n","import { useMemo } from 'react';\n\nconst calculateHeight = (itemHeight, amountItemsInWindow, itemsLength) => {\n  const realAmountItemsInWindow =\n    itemsLength < amountItemsInWindow ? itemsLength : amountItemsInWindow;\n  return itemHeight * realAmountItemsInWindow;\n};\n\nexport default function useHeightByAmountOfItems({\n  itemHeight,\n  amountItems,\n  items,\n}) {\n  const calculatedHeight = useMemo(\n    () => calculateHeight(itemHeight, amountItems, items.length),\n    [amountItems, items],\n  );\n\n  return calculatedHeight;\n}\n","import React from 'react';\nimport { FixedSizeList as List } from 'react-window';\nimport useHeightByAmountOfItems from './utils/useHeightByAmountOfItems';\n\nconst MenuItem = ({ data, index, style }) => (\n  <div key={index} style={style}>\n    {data[index]}\n  </div>\n);\n\n// eslint-disable-next-line no-unused-vars\nfunction resolveComputation(items, cb, timeout = 1000) {\n  return () =>\n    new Promise(resolve => {\n      const doResolve = result => {\n        cb(result);\n        resolve(result);\n      };\n      let result = 0;\n      const timer = setTimeout(() => doResolve(result), timeout);\n      items.forEach(option => {\n        result =\n          option.props.label.length > result\n            ? option.props.label.length\n            : result;\n      });\n\n      clearTimeout(timer);\n      doResolve(result);\n    });\n}\n\nexport default function VirtualMenuList({\n  items,\n  itemHeight = 32,\n  amountItemsInWindow = 5,\n  width,\n  height,\n}) {\n  const computedListHeight = useHeightByAmountOfItems({\n    amountItems: amountItemsInWindow,\n    itemHeight,\n    items,\n  });\n\n  return (\n    <List\n      height={height || computedListHeight}\n      itemCount={items.length}\n      itemData={items}\n      itemSize={itemHeight}\n      width={width}\n    >\n      {MenuItem}\n    </List>\n  );\n}\n","import React from 'react';\n\nexport default React.createContext();\n","import React, { useEffect, useMemo, useState, useRef, useContext } from 'react';\nimport { aggregatedClasses } from '@elliemae/ds-classnames';\nimport { focusGroupManagerHoc } from '@elliemae/ds-shared/FocusGroup';\nimport PropTypes from 'prop-types';\nimport DSSearchBox from '../../form/SearchBox';\nimport VirtualMenuList from '../VirtualMenuList';\nimport MenuContext from '../MenuContext';\n\nconst SearchBoxWrapper = aggregatedClasses('div')(\n  'menu-search-group',\n  'search-wrapper',\n);\nconst NoOptionsWrapper = aggregatedClasses('div')(\n  'menu-search-group',\n  'no-options',\n);\n\nfunction SearchableGroup({\n  children,\n  amountItemsInWindow = 5,\n  searchTerm: searchTermProp = '',\n  noOptionsText = 'No options',\n  height,\n  width,\n  focusOnOpen = false,\n}) {\n  const searchRef = useRef(null);\n  const [searchTerm, setSearchTerm] = useState(searchTermProp);\n\n  useEffect(() => {\n    if (searchRef.current) searchRef.current.focus();\n  }, []);\n\n  const { visible } = useContext(MenuContext) || {};\n\n  useEffect(() => {\n    if (focusOnOpen && visible) {\n      setTimeout(() => {\n        if (searchRef.current) searchRef.current.focus();\n      }, 0);\n    }\n  }, [focusOnOpen, visible]);\n\n  const filteredChildren = useMemo(\n    () =>\n      children.filter(\n        child =>\n          !searchTerm ||\n          child.props.label.toLowerCase().startsWith(searchTerm.toLowerCase()),\n      ),\n    [children, searchTerm],\n  );\n\n  return (\n    <>\n      <SearchBoxWrapper>\n        <DSSearchBox\n          innerRef={searchRef}\n          onSearch={({ value }) => setSearchTerm(value)}\n          searchOnEnter={false}\n          showIcon={false}\n          value={searchTerm}\n        />\n      </SearchBoxWrapper>\n      {!filteredChildren.length && (\n        <NoOptionsWrapper>{noOptionsText}</NoOptionsWrapper>\n      )}\n      <VirtualMenuList\n        amountItemsInWindow={amountItemsInWindow}\n        height={height}\n        items={filteredChildren}\n        width={width}\n      />\n    </>\n  );\n}\n\nSearchableGroup.propTypes = {\n  /** The amount of items that are going to be rendered in the group */\n  amountItemsInWindow: PropTypes.number,\n  /** A search term */\n  searchTerm: PropTypes.string,\n  /** Text to show when there's no options to show */\n  noOptionsText: PropTypes.string,\n};\n\nexport default focusGroupManagerHoc(SearchableGroup);\n","import React from 'react';\nimport CheckableGroup from '@elliemae/ds-shared/CheckableGroup';\n\nfunction CheckboxGroup(props) {\n  return <CheckableGroup {...props} multi />;\n}\n\nCheckboxGroup.propTypes = {};\n\nexport default CheckboxGroup;\n","import React from 'react';\nimport CheckableGroup from '@elliemae/ds-shared/CheckableGroup';\n\nfunction RadioGroup(props) {\n  return <CheckableGroup {...props} multi={false} />;\n}\n\nRadioGroup.propTypes = {};\n\nexport default RadioGroup;\n","/* eslint-disable import/no-cycle */\nimport React, { useRef } from 'react';\nimport ChevronRight from '@elliemae/ds-icons/ChevronSmallRight';\nimport VerticalElipsis from '@elliemae/ds-icons/MoreOptionsVert';\nimport { useFocusGroupItem } from '@elliemae/ds-shared/FocusGroup';\nimport DSButton, { BUTTON_VARIANT } from '../../Button';\nimport DSPopper from '../../Popper';\nimport { useHiddenController } from '../../Hidden';\nimport Menu from '../Menu';\nimport MenuItem from './MenuItem';\n\nfunction SubMenu({\n  noAddon,\n  leftAddon = undefined,\n  label = undefined,\n  interactionType = 'hover',\n  children: subitems,\n  rightAddonType,\n  disabledAddonInactive,\n  checkableProps = {},\n  customRenderer,\n  onClick,\n  closeMenu,\n  id,\n}) {\n  const itemRef = useRef(null);\n  const focusOnOpen = useRef(false);\n  const { visible = false, onShow, onHide } = useHiddenController(undefined, {\n    interaction: 'click',\n  });\n\n  const { focusItemByNode } = useFocusGroupItem();\n  // todo: create a menu state to handle all related menu things\n  const handleShowSubItemsWithMouse = e => {\n    e.stopPropagation();\n    onShow();\n    focusOnOpen.current = true;\n  };\n  const handleShowWithMouse = e => {\n    if (onClick) onClick(e);\n  };\n  const handleShowWithMouseHover = () => {\n    onShow();\n    focusOnOpen.current = false;\n  };\n\n  const handleShowWithKeyboard = () => {\n    onShow();\n    focusOnOpen.current = true;\n  };\n\n  const hoverHandlers =\n    interactionType === 'hover'\n      ? {\n          onMouseEnter: handleShowWithMouseHover,\n          onMouseLeave: onHide,\n        }\n      : {\n          onClick: handleShowWithMouse,\n        };\n\n  const rightAddon =\n    rightAddonType === 'elipsis' ? (\n      <DSButton\n        aria-label=\"vertical-elipsis\"\n        buttonType=\"text\"\n        leftIcon={\n          <VerticalElipsis\n            className=\"submenu-arrow\"\n            color={['brand-primary', 600]}\n            size=\"s\"\n          />\n        }\n        onClick={e => handleShowSubItemsWithMouse(e)}\n        size=\"m\"\n        variant={BUTTON_VARIANT.DEFAULT}\n      />\n    ) : (\n      <ChevronRight\n        className=\"submenu-arrow\"\n        color={['brand-primary', 600]}\n        size=\"sm\"\n      />\n    );\n\n  return (\n    <>\n      <DSPopper\n        contentComponent={\n          <Menu\n            focusKeyBindings={{\n              ArrowLeft: [() => focusItemByNode(itemRef.current), 'exit'],\n            }}\n            focusOnOpen={focusOnOpen.current}\n            onExitFocusGroup={onHide}\n            {...hoverHandlers}\n            closeMenu={closeMenu}\n            visible={visible}\n          >\n            {subitems}\n          </Menu>\n        }\n        interactionType={interactionType}\n        isOpen={visible}\n        onOpen={opening => (opening ? onShow() : onHide())}\n        placement=\"right-start\"\n        showArrow={false}\n        triggerComponent={\n          <MenuItem\n            customRenderer={customRenderer}\n            disabledAddonInactive={disabledAddonInactive}\n            id={id}\n            innerRef={itemRef}\n            label={label}\n            leftAddon={leftAddon}\n            noAddon={noAddon}\n            {...hoverHandlers}\n            onKeyDown={e => {\n              if (\n                e.key === 'ArrowRight' ||\n                e.key === 'Enter' ||\n                e.keyCode === 32\n              ) {\n                handleShowWithKeyboard();\n              }\n            }}\n            rightAddon={rightAddon}\n            {...checkableProps}\n          />\n        }\n      />\n    </>\n  );\n}\n\nexport default SubMenu;\n","import React, { useMemo } from 'react';\nimport { useCheckableGroup } from '@elliemae/ds-shared/CheckableGroup';\nimport SearchableGroup from './SearchableGroup';\nimport { menuItemFactory } from './menuItemFactory';\nimport VirtualMenuList from '../VirtualMenuList';\n\nconst noop = () => null;\n\nfunction SelectionGroup({\n  multi = false,\n  searchable = false,\n  focusOnOpen = false,\n  onSelect = noop,\n  children,\n  items = undefined,\n  active = multi ? [] : '',\n  width,\n  height,\n}) {\n  const renderedItems = useMemo(\n    () =>\n      items &&\n      items.map(item => {\n        const Component = menuItemFactory(multi ? 'checkbox' : 'radio');\n        return (\n          <Component\n            {...item}\n            key={item.name || item.id || item.key}\n            item={item}\n            name={item.id || item.name}\n          />\n        );\n      }),\n    [items],\n  );\n  const decoratedGroupChildren = useCheckableGroup({\n    children: renderedItems || children,\n    multi,\n    active,\n    onCheck: onSelect,\n  });\n\n  if (searchable) {\n    return (\n      <SearchableGroup\n        focusOnOpen={focusOnOpen}\n        height={height}\n        items={items}\n        width={width}\n      >\n        {decoratedGroupChildren}\n      </SearchableGroup>\n    );\n  }\n  return (\n    <VirtualMenuList\n      height={height}\n      items={decoratedGroupChildren}\n      width={width}\n    />\n  );\n}\n\nexport default SelectionGroup;\n","import React from 'react';\nimport DSCheckbox from '../../form/Checkbox';\nimport MenuItemCheckable from './MenuItemCheckable';\n\nfunction MenuItemCheckbox({ checked, ...rest }) {\n  return (\n    <MenuItemCheckable\n      {...rest}\n      leftAddon={<DSCheckbox checked={checked} />}\n      role=\"menuitemcheckbox\"\n    />\n  );\n}\n\nexport default MenuItemCheckbox;\n","/* eslint-disable import/no-cycle */\nimport React from 'react';\nimport { isFunction } from '@elliemae/ds-utilities/utils';\n\nimport Separator from './Separator';\nimport MenuItem from './MenuItem';\nimport SubMenu from './SubMenu';\nimport SelectionGroup from './SelectionGroup';\nimport MenuItemCheckbox from './MenuItemCheckbox';\nimport MenuItemRadio from './MenuItemRadio';\n\nconst itemTypes = {\n  separator: Separator,\n  menuitem: MenuItem,\n  radio: MenuItemRadio,\n  checkbox: MenuItemCheckbox,\n  submenu: SubMenu,\n  'selection-group': SelectionGroup,\n};\n\nconst fallback = {\n  SelectionGroup: 'selection-group',\n};\n\nexport function menuItemFactory(\n  type = '',\n  items,\n  defaultItem = itemTypes.menuitem,\n) {\n  const itemsObject = items || itemTypes;\n  const parsedType = fallback[type] || type.toLowerCase();\n  return itemsObject[parsedType] || defaultItem;\n}\n\nexport function renderMenuItems(options, factory = menuItemFactory) {\n  return options.map((option, index) => {\n    if (isFunction(option.renderer)) {\n      return option.renderer({\n        key: option.id,\n        item: option,\n      });\n    }\n    const ItemComponent = factory(option.type);\n    const children =\n      option.subItems && renderMenuItems(option.subItems, factory);\n    return (\n      <ItemComponent\n        {...option}\n        key={option.id || index}\n        item={option}\n        onClick={null}\n        onMouseDown={option.onClick}\n        // onClick callback called in onMouseDown due to events order issue\n      >\n        {children}\n      </ItemComponent>\n    );\n  });\n}\n","/* eslint-disable import/no-cycle */\nimport React, { useRef, useMemo, useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport { omit } from 'lodash';\nimport { aggregatedClasses } from '@elliemae/ds-classnames';\nimport { mergeRefs } from '@elliemae/ds-utilities/system';\nimport { useFocusGroupItem } from '@elliemae/ds-shared/FocusGroup';\nimport { runAll } from '@elliemae/ds-utilities/utils';\nimport DSTruncatedTooltipText from '../../TruncatedTooltipText';\nimport { renderMenuItems } from './menuItemFactory';\nimport SubMenu from './SubMenu';\nimport MenuContext from '../MenuContext';\n\nconst noop = () => null;\n\nconst blockName = 'menu-item';\n\nconst Content = aggregatedClasses('div')(blockName, 'content');\nconst Addon = aggregatedClasses('div')(\n  blockName,\n  'addon',\n  ({ empty, fixedItem }) => ({ empty, fixedItem }),\n);\n\nconst renderAddon = (addon, fixedItem, addonId) => (\n  <Addon key={addonId} classProps={{ fixedItem }}>\n    {addon}\n  </Addon>\n);\n\nconst renderAddons = (addons, fixedItem) =>\n  Array.isArray(addons)\n    ? addons.map(renderAddon)\n    : renderAddon(addons, fixedItem);\n\nconst Wrapper = aggregatedClasses('li')(\n  blockName,\n  null,\n  ({ disabled, disabledAddonInactive, customRenderer, fixedItem, type }) => ({\n    disabled,\n    disabledAddonInactive,\n    customRenderer,\n    fixedItem,\n    [`menu-type-${type}`]: type,\n  }),\n);\nconst calculateSize = (length = 0) => {\n  if (length > 45) return 45 * 7;\n  return length * 7;\n};\nfunction MenuItem(props) {\n  const {\n    innerRef,\n    as = 'li',\n    role = 'menuitem',\n    leftAddon = null,\n    rightAddon = undefined,\n    disabledAddonInactive = undefined,\n    label = undefined,\n    children,\n    tabIndex = -1,\n    onKeyDown = noop,\n    fixedItem = false,\n    noAddon,\n    disabled = false,\n    customRenderer,\n    maxOption,\n    closeMenu,\n    style,\n    ...otherProps\n  } = props;\n\n  const menuCxt = useContext(MenuContext);\n  const ref = useRef(null);\n  useFocusGroupItem(ref);\n  if (otherProps.subItems) {\n    return (\n      <SubMenu {...props} closeMenu={menuCxt.closeMenu}>\n        {renderMenuItems(otherProps.subItems)}\n      </SubMenu>\n    );\n  }\n\n  const wrapperProps = useMemo(() => omit(otherProps, ['icon']), [otherProps]);\n\n  const onClick = (...args) => {\n    if (wrapperProps.onClick) wrapperProps.onClick(...args);\n    if (wrapperProps.closeOnClick && menuCxt.closeMenu) {\n      menuCxt.closeMenu(...args);\n    }\n  };\n\n  return (\n    <Wrapper\n      as={as}\n      classProps={{\n        disabled,\n        disabledAddonInactive,\n        customRenderer,\n        fixedItem,\n        type: otherProps.type,\n      }}\n      id={otherProps.id}\n      innerRef={\n        otherProps.type !== 'disabled' ? mergeRefs(innerRef, ref) : innerRef\n      }\n      onKeyDown={\n        !fixedItem &&\n        runAll(e => {\n          if (e.key === ' ' || e.key === 'Enter') {\n            e.preventDefault();\n            e.target.dispatchEvent(\n              new MouseEvent('click', {\n                view: window,\n                bubbles: true,\n                cancelable: false,\n              }),\n            );\n          }\n        }, onKeyDown)\n      }\n      role={role}\n      style={style}\n      tabIndex={tabIndex}\n      {...wrapperProps}\n      onClick={onClick}\n    >\n      {!noAddon && renderAddons(leftAddon, fixedItem)}\n      {label && (\n        <Content\n          style={\n            maxOption > 0\n              ? {\n                  width: `${calculateSize(maxOption)}px`,\n                  maxWidth: `${calculateSize(maxOption)}px`,\n                }\n              : undefined\n          }\n        >\n          <DSTruncatedTooltipText value={label} />\n        </Content>\n      )}\n      {customRenderer}\n      {rightAddon && renderAddons(rightAddon)}\n      {children}\n    </Wrapper>\n  );\n}\n\nMenuItem.propTypes = {\n  /** Renders the MenuItem with a specific html element */\n  as: PropTypes.element,\n  /** Renders the passed element to the left */\n  leftAddon: PropTypes.element,\n  /** Renders the passed element to the right */\n  rightAddon: PropTypes.element,\n  /** Label for the menu item */\n  label: PropTypes.string,\n};\n\nexport default MenuItem;\n","/* eslint-disable import/no-cycle */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Checkmark from '@elliemae/ds-icons/Checkmark';\nimport { runAll } from '@elliemae/ds-utilities/utils';\nimport MenuItem from './MenuItem';\n\n// TODO: where to move this?\nfunction useCheckable({ checked }) {\n  return {\n    checked,\n    'aria-checked': checked,\n  };\n}\n\n/**\n * Reuses the same props as the MenuItem\n *\n * @param root0\n * @param root0.role\n * @param root0.checked\n * @param root0.name\n * @param root0.checkIcon\n * @param root0.children\n * @param root0.leftAddon\n * @param root0.item\n */\nfunction MenuItemCheckable({\n  role = 'menuitemcheckbox',\n  checked = false,\n  name = '',\n  checkIcon = <Checkmark color={['brand-primary', 600]} />,\n  children,\n  leftAddon,\n  item = undefined,\n  ...otherProps\n}) {\n  const checkableProps = useCheckable({ checked, name });\n  const handleClick = () =>\n    runAll(otherProps.onClick, checkableProps.onClick)(\n      { target: { value: name, checked } },\n      item,\n    );\n\n  const checkAddon =\n    leftAddon ||\n    (checkableProps.checked ? (\n      <div className=\"checkable-mark\">{checkIcon}</div>\n    ) : (\n      <div />\n    ));\n  return (\n    <MenuItem\n      {...item}\n      {...otherProps}\n      {...checkableProps}\n      customRenderer={\n        item && item.customRenderer ? item.customRenderer : () => {}\n      }\n      items={otherProps.subItems}\n      leftAddon={checkAddon}\n      onClick={handleClick}\n      role={role}\n    />\n  );\n}\n\nMenuItemCheckable.propTypes = {\n  /** Whether the item is checked or not */\n  checked: PropTypes.bool,\n  /** A custom item when the item is checked */\n  checkIcon: PropTypes.element,\n};\nexport default MenuItemCheckable;\n","import React from 'react';\nimport MenuItemCheckable from './MenuItemCheckable';\n\nfunction MenuItemRadio(props) {\n  return <MenuItemCheckable {...props} role=\"menuitemradio\" />;\n}\n\nMenuItemRadio.propTypes = {\n  ...MenuItemCheckable.propTypes,\n};\n\nexport default MenuItemRadio;\n","/* eslint-disable max-lines */\n/* eslint-disable react/prop-types */\n/* eslint-disable import/no-cycle */\nimport React, { useContext, useEffect, useMemo, useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport { omit } from 'lodash';\nimport { aggregatedClasses } from '@elliemae/ds-classnames';\nimport { animated } from 'react-spring/web.cjs';\nimport { useOnClickOutside } from '@elliemae/ds-utilities/hooks';\nimport { mergeRefs } from '@elliemae/ds-utilities/system';\nimport {\n  focusGroupManagerHoc,\n  FocusGroupContext,\n} from '@elliemae/ds-shared/FocusGroup';\nimport { useHiddenTransition } from '../Hidden';\nimport MenuItemRadio from './MenuItems/MenuItemRadio';\nimport MenuItemCheckbox from './MenuItems/MenuItemCheckbox';\nimport CheckboxGroup from './MenuItems/CheckboxGroup';\nimport RadioGroup from './MenuItems/RadioGroup';\nimport Separator from './MenuItems/Separator';\nimport MenuItem from './MenuItems/MenuItem';\nimport SubMenu from './MenuItems/SubMenu';\nimport SearchableGroup from './MenuItems/SearchableGroup';\nimport SelectionGroup from './MenuItems/SelectionGroup';\nimport { renderMenuItems, menuItemFactory } from './MenuItems/menuItemFactory';\nimport MenuContext from './MenuContext';\n\nconst RESPONSIVE_HEIHGT_MARGIN = 120;\n\nconst blockName = 'menu';\n\nconst noop = () => {};\n\nconst MenuComponent = aggregatedClasses('div')(\n  blockName,\n  '',\n  ({ menuComboBox, type }) => ({\n    'menu-combo-box': menuComboBox,\n    [`type-${type}`]: type,\n  }),\n);\n\n/**\n * todo: -- IDEA -- each menu could have an overlay based on an overlay stack context so we can\n * capture the context of the clicks on very nested components\n */\n\nconst isChildOfType = (child, type) => child.type.name === type;\n\nfunction DSMenu({\n  containerProps = {},\n  innerRef,\n  as: MenuTag = animated.ul,\n  children = undefined,\n  onClickOutside = noop,\n  // handlers from hidden\n  visible = undefined,\n  focusOnOpen = false,\n  maxOption = 0,\n  style = {},\n  minWidth = undefined,\n  maxWidth = undefined,\n  closeMenu,\n  responsiveHeight = false,\n  ...otherProps\n}) {\n  const menuRef = useRef(null);\n  const { focusFirst } = useContext(FocusGroupContext);\n  const { destroyed, ...hiddenProps } = useHiddenTransition({ visible, style });\n\n  // force no addon to the children if the menu doesn't have any item with leftAddon like SelectionGroup\n  const nextChildren = useMemo(() => {\n    const forceLeftAddon = React.Children.toArray(children).some(\n      (child) =>\n        isChildOfType(child, 'SelectionGroup') ||\n        isChildOfType(child, 'MenuItemCheckbox') ||\n        isChildOfType(child, 'MenuItemRadio') ||\n        child.props.leftAddon,\n    );\n\n    return React.Children.map(\n      children,\n      (child) =>\n        child &&\n        React.cloneElement(child, {\n          ...child.props,\n          noAddon: !forceLeftAddon ? true : undefined,\n          maxOption,\n          closeMenu,\n        }),\n    );\n  }, [children]);\n\n  useOnClickOutside(menuRef, onClickOutside);\n\n  useEffect(() => {\n    if (focusOnOpen && visible) {\n      setTimeout(() => {\n        focusFirst();\n      }, 0);\n    }\n  }, [visible, focusOnOpen]);\n  // todo: find out a better approach to this\n  return !hiddenProps.destroyed ? (\n    <MenuContext.Provider value={{ visible, closeMenu }}>\n      <MenuComponent\n        data-testid=\"em-ds-menu\"\n        {...containerProps}\n        as={MenuTag}\n        classProps={{ ...(otherProps.classProps || {}), type: otherProps.type }}\n        innerRef={mergeRefs(innerRef, menuRef)}\n        role=\"menu\"\n        {...omit(otherProps, ['scheduleUpdate'])}\n        {...hiddenProps}\n      >\n        {/* eslint-disable indent */}\n        <div\n          className=\"menu-component-internal-wrapper\"\n          style={{\n            ...style,\n            minWidth,\n            maxWidth,\n            ...(responsiveHeight\n              ? {\n                  overflowY: 'scroll',\n                  maxHeight: responsiveHeight\n                    ? `${window.innerHeight - RESPONSIVE_HEIHGT_MARGIN}px`\n                    : undefined,\n                }\n              : {}),\n          }}\n        >\n          {/* eslint-enable indent */}\n          {nextChildren}\n        </div>\n      </MenuComponent>\n    </MenuContext.Provider>\n  ) : null;\n}\n\nconst WrappedMenu = focusGroupManagerHoc(DSMenu, { loop: true });\n\nDSMenu.propTypes = {\n  containerProps: PropTypes.shape({}),\n  /** Renders the menu with a specific html element */\n  as: PropTypes.element,\n  /** Handler when a user clicks outside the menu */\n  onClickOutside: PropTypes.func,\n  /** Whether the menu is visible or not */\n  visible: PropTypes.bool,\n  /** When set to true, it's going to focus the first item */\n  focusOnOpen: PropTypes.bool,\n  /** Customize menu minWidth. Can be undefined or 'number' */\n  minWidth: PropTypes.number,\n  /** Customize menu maxWidth. Can be undefined or 'number' */\n  maxWidth: PropTypes.number,\n};\n\n// todo: add a handler to get this kind of exports for documentation\nWrappedMenu.Item = MenuItem;\nWrappedMenu.ItemCheckbox = MenuItemCheckbox;\nWrappedMenu.ItemRadio = MenuItemRadio;\nWrappedMenu.SubMenu = SubMenu;\nWrappedMenu.Separator = Separator;\nWrappedMenu.CheckboxGroup = CheckboxGroup;\nWrappedMenu.RadioGroup = RadioGroup;\nWrappedMenu.SearchableGroup = SearchableGroup;\nWrappedMenu.SelectionGroup = SelectionGroup;\n\nexport { menuItemFactory, renderMenuItems };\nexport default WrappedMenu;\n","import { useRef } from 'react';\n\nexport default function useExecutionDelay(startFn, cleanFn, delayTime) {\n  const startTimer = useRef();\n  const closeTimer = useRef();\n\n  const startFunction = (...args) => {\n    clearTimeout(closeTimer.current);\n    startTimer.current = setTimeout(() => startFn(...args), delayTime);\n  };\n\n  const cleanFunction = (...args) => {\n    clearTimeout(startTimer.current);\n    closeTimer.current = setTimeout(() => cleanFn(...args), 30);\n  };\n  return [startFunction, cleanFunction];\n}\n","/* eslint-disable react/display-name */\nimport React from 'react';\nimport FocusGroupManager from './FocusGroupManager';\n\nexport default function FocusGroupHoc(WrappedComponent, options = {}) {\n  return ({\n    onExitFocusGroup,\n    onFocusPrevGroup,\n    focusKeyBindings,\n    ...props\n  }) => (\n    <FocusGroupManager\n      keyBindings={focusKeyBindings}\n      onExitFocusGroup={onExitFocusGroup}\n      onFocusPrevGroup={onFocusPrevGroup}\n      {...options}\n    >\n      <WrappedComponent {...props} {...options} />\n    </FocusGroupManager>\n  );\n}\n","import React from 'react';\n\nexport default React.createContext();\n","/* eslint-disable react/prop-types */\n/* eslint-disable indent */\nimport React, { useCallback, useMemo, useState } from 'react';\nimport { runAll, toggleInObject } from '@elliemae/ds-utilities/utils';\nimport DropdownMenuContext from './DropdownMenuContext';\n\nconst noop = () => null;\n\nfunction DropdownMenuProvider({\n  onSelectMenuItem = noop,\n  onOpenMenu = noop,\n  onClose,\n  children,\n  isOpen,\n  selection,\n  singleGroupSelection,\n  onSelectChange = noop,\n}) {\n  const [isMenuOpen, setMenuOpen] = useState(isOpen);\n\n  const closeMenu = useCallback(() => {\n    setMenuOpen(false);\n    onOpenMenu(false);\n    onClose();\n  });\n  const openMenu = useCallback(() => {\n    setMenuOpen(true);\n    onOpenMenu(true);\n  });\n\n  const handleItemClick = ({ item, group }) => {\n    let activeState;\n    // reset selection if single selection group is activated\n    let nextSelection = !singleGroupSelection ? selection : {};\n\n    if (group) {\n      activeState = group.active;\n      nextSelection = {\n        ...nextSelection,\n        [group.id]: activeState,\n      };\n    } else {\n      const selectionItem = group || item;\n      activeState = selectionItem.active || selectionItem.checked;\n\n      // can be toggled (radio with unselection)\n      nextSelection = Array.isArray(activeState)\n        ? {\n            ...nextSelection,\n            [selectionItem.id]: activeState,\n          }\n        : toggleInObject(\n            nextSelection,\n            selectionItem.id,\n            item.label || activeState || true,\n          );\n    }\n    onSelectChange({\n      item,\n      group,\n      selection: nextSelection,\n    });\n    // todo: just pass item on item and group when selection callback,\n    //  use onSelectchange for nextSelection\n    onSelectMenuItem(item, activeState, nextSelection);\n  };\n\n  const handleCloseOnClick = useCallback(({ item, group = {} }) => {\n    if (item.closeOnClick !== undefined) {\n      if (item.closeOnClick) closeMenu();\n      return;\n    }\n    if (group.closeOnClick !== undefined) {\n      if (group.closeOnClick) closeMenu();\n    }\n  }, []);\n\n  const valueProvider = useMemo(\n    () => ({\n      onItemClick: runAll(handleItemClick, handleCloseOnClick),\n      closeMenu,\n      openMenu,\n      isMenuOpen,\n      selection,\n    }),\n    [isMenuOpen, selection],\n  );\n  return (\n    <DropdownMenuContext.Provider value={valueProvider}>\n      {children}\n    </DropdownMenuContext.Provider>\n  );\n}\n\nexport default DropdownMenuProvider;\n","/* eslint-disable react/display-name */\nimport React, { useContext } from 'react';\nimport { runAll, get } from '@elliemae/ds-utilities/utils';\nimport DropdownMenuContext from './DropdownMenuContext';\n\nconst noop = () => null;\n\nfunction MenuItemGroupSelectionHOC(WrappedComponent, handlerName = 'onSelect') {\n  return ({ item = {}, ...restProps }) => {\n    const { onItemClick, selection } = useContext(DropdownMenuContext);\n    const propHandler = restProps[handlerName] || noop;\n    const handler = {\n      [handlerName]: (active, itemOption) =>\n        runAll(\n          item.onSelect,\n          onItemClick,\n          propHandler,\n        )({ item: itemOption, group: { ...item, active } }),\n    };\n    return (\n      <WrappedComponent\n        {...restProps}\n        {...(selection\n          ? { active: get(selection, [item.id]) || item.active }\n          : {})}\n        {...handler}\n      />\n    );\n  };\n}\n\nexport default MenuItemGroupSelectionHOC;\n","/* eslint-disable react/display-name */\nimport React, { useContext } from 'react';\nimport { runAll, get } from '@elliemae/ds-utilities/utils';\nimport DropdownMenuContext from './DropdownMenuContext';\n\nconst noop = () => null;\n\nconst defaultConfig = { type: 'default', handlerName: 'onClick' };\n\nfunction MenuItemClickableHOC(WrappedComponent, config) {\n  return ({ item = {}, ...restProps }) => {\n    const { type, handlerName } = { ...defaultConfig, ...config };\n    const { onItemClick, selection } = useContext(DropdownMenuContext);\n    const propHandler = restProps[handlerName] || noop;\n    const handler = {\n      [handlerName]: () => runAll(onItemClick, propHandler)({ item, type }),\n    };\n    return (\n      <WrappedComponent\n        {...restProps}\n        {...(type === 'selectable' && selection\n          ? { checked: get(selection, [item.id]) }\n          : {})}\n        {...handler}\n      />\n    );\n  };\n}\n\nexport default MenuItemClickableHOC;\n","import {\n  Menu,\n  renderMenuItems,\n  menuItemFactory,\n} from '@elliemae/ds-basic/Menu';\n\nimport MenuItemClickableHOC from './MenuItemClickableHOC';\nimport MenuItemGroupSelectionHOC from './MenuItemGroupSelectionHOC';\n\nconst itemTypes = {\n  separator: Menu.Separator,\n  menuitem: MenuItemClickableHOC(Menu.Item),\n  radio: MenuItemClickableHOC(Menu.ItemRadio, { type: 'selectable' }),\n  checkbox: MenuItemClickableHOC(Menu.ItemCheckbox, { type: 'selectable' }),\n  submenu: Menu.SubMenu,\n  'selection-group': MenuItemGroupSelectionHOC(Menu.SelectionGroup),\n};\n\nexport const factory = type =>\n  menuItemFactory(type, itemTypes, itemTypes.menuitem);\nexport const renderOptions = options => renderMenuItems(options, factory);\n","import React from 'react';\nimport styled from 'styled-components';\nimport { DSCircularProgressIndicator } from '@elliemae/ds-basic/CircularProgressIndicator';\n\nconst Wrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  height: 56px;\n`;\n\nconst LoadingIndicator = () => (\n  <Wrapper>\n    <DSCircularProgressIndicator size=\"m\" />\n  </Wrapper>\n);\n\nexport default LoadingIndicator;\n","import React, { useContext, useEffect, useMemo, useState } from 'react';\nimport getComponentFromProps from '@elliemae/ds-utilities/getComponentFromProps';\nimport DSPopper from '@elliemae/ds-basic/Popper';\nimport { Menu } from '@elliemae/ds-basic/Menu';\nimport { convertPropToCssClassName } from '@elliemae/ds-classnames';\nimport { runAll, isFunction } from '@elliemae/ds-utilities/utils';\nimport DropdownMenuContext from './DropdownMenuContext';\nimport { renderOptions, factory } from './decoratedMenuItemFactory';\nimport LoadingIndicator from './DropdownMenuLoadingIndicator';\n\nconst blockName = 'menu';\n\nconst getMax = options => {\n  let max = 0;\n  options.forEach(o => {\n    if (o && o.label && String(o.label).length > max)\n      max = String(o.label).length;\n  });\n  return max;\n};\n\nconst DropdownMenuRenderer = ({\n  containerProps,\n  className,\n  options = [],\n  triggerComponent,\n  placement,\n  interactionType,\n  preventOverflow,\n  customMenu,\n  contentOffset,\n  contentStyle,\n  isOpen,\n  children,\n  menuProps,\n  referenceNode,\n  focusOnOpen: focusOnOpenProp,\n  onClickOutsideMenu,\n  responsiveHeight,\n  itemsRenderer,\n  maxWidth,\n  minWidth,\n  zIndex,\n  type,\n  loading,\n}) => {\n  const [focusOnOpen, setFocusOnOpenMenu] = useState(focusOnOpenProp);\n  const { isMenuOpen, openMenu, closeMenu } = useContext(DropdownMenuContext);\n  const maxOption = useMemo(() => {\n    let max = 0;\n    options.forEach(o => {\n      if (o && o.label && String(o.label).length > max)\n        max = String(o.label).length;\n      if (o && o.items) {\n        const nestedMax = getMax(o.items);\n        if (nestedMax > max) max = nestedMax;\n      }\n    });\n    return max;\n  }, [options]);\n\n  const optionsRendererd = useMemo(() => {\n    if (options[0] && options[0].type === 'separator') {\n      options[0].showSeparator = false;\n    }\n    return isFunction(itemsRenderer)\n      ? itemsRenderer(options, factory)\n      : renderOptions(options);\n  }, [options]);\n\n  const dropdownBlockName = convertPropToCssClassName(blockName);\n\n  const menuContent = () => {\n    if (loading) return <LoadingIndicator />;\n    if (children) return children;\n    if (optionsRendererd) return optionsRendererd;\n  };\n\n  const MenuComponent = customMenu ? (\n    getComponentFromProps(customMenu, {\n      options,\n      focusOnOpen,\n      maxOption,\n      ...menuProps,\n      closeMenu,\n      loading,\n    })\n  ) : (\n    <Menu\n      closeMenu={closeMenu}\n      focusOnOpen={focusOnOpen}\n      maxOption={type === 'phone' ? maxOption : undefined}\n      maxWidth={maxWidth}\n      minWidth={minWidth}\n      onClickOutside={onClickOutsideMenu}\n      onExitFocusGroup={closeMenu}\n      responsiveHeight={responsiveHeight}\n      type={type}\n      visible\n      {...menuProps}\n    >\n      {menuContent()}\n    </Menu>\n  );\n\n  useEffect(() => {\n    setFocusOnOpenMenu(focusOnOpenProp);\n  });\n\n  return (\n    <DSPopper\n      blockName={dropdownBlockName}\n      containerProps={containerProps}\n      contentComponent={MenuComponent}\n      contentOffset={contentOffset}\n      contentStyle={contentStyle}\n      interactionType={interactionType}\n      isOpen={isOpen !== undefined ? isOpen : isMenuOpen}\n      onOpen={opening => (opening ? openMenu() : closeMenu())}\n      placement={placement}\n      preventOverflow={preventOverflow}\n      referenceNode={referenceNode}\n      showArrow={false}\n      triggerComponent={getComponentFromProps(triggerComponent, {\n        onClick:\n          interactionType === 'hover'\n            ? runAll(openMenu, triggerComponent.props.onClick)\n            : runAll(\n                !isMenuOpen ? openMenu : closeMenu,\n                triggerComponent.props.onClick,\n              ),\n        onMouseEnter: interactionType === 'hover' ? openMenu : undefined,\n        onKeyDown: e => {\n          if (e.key === 'ArrowDown' || e.key === ' ') {\n            e.preventDefault();\n            setFocusOnOpenMenu(true);\n            openMenu();\n          }\n        },\n        className: `${triggerComponent.props.className} ${className}`,\n      })}\n      zIndex={zIndex || menuProps.zIndex}\n    />\n  );\n};\n\nexport default DropdownMenuRenderer;\n","import React from 'react';\nimport DropdownMenuProvider from './DropdownMenuProvider';\nimport DropdownMenuRenderer from './DropdownMenuRenderer';\n\nfunction DropdownMenuWrapper(props) {\n  return (\n    <DropdownMenuProvider {...props}>\n      <DropdownMenuRenderer {...props} />\n    </DropdownMenuProvider>\n  );\n}\n\nexport default DropdownMenuWrapper;\n","export const Position = {\n  AUTO: 'auto',\n  AUTO_START: 'auto-start',\n  AUTO_END: 'auto-end',\n  BOTTOM: 'bottom',\n  BOTTOM_START: 'bottom-start',\n  BOTTOM_END: 'bottom-end',\n  LEFT: 'left',\n  LEFT_END: 'left-end',\n  LEFT_START: 'left-start',\n  RIGHT: 'right',\n  RIGHT_END: 'right-end',\n  RIGHT_START: 'right-start',\n  TOP: 'top',\n  TOP_START: 'top-start',\n  TOP_END: 'top-end',\n};\n\nexport const positions = [\n  Position.AUTO_START,\n  Position.AUTO_END,\n  Position.AUTO,\n  Position.TOP_START,\n  Position.TOP,\n  Position.TOP_END,\n  Position.RIGHT_START,\n  Position.RIGHT,\n  Position.RIGHT_END,\n  Position.BOTTOM_START,\n  Position.BOTTOM,\n  Position.BOTTOM_END,\n  Position.LEFT_START,\n  Position.LEFT,\n  Position.LEFT_END,\n];\n","export const Interaction = {\n  CLICK: 'click',\n  HOVER: 'hover',\n};\n\nexport const interactions = [Interaction.CLICK, Interaction.HOVER];\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { TooltipTextProvider } from '@elliemae/ds-basic/TruncatedTooltipText';\n// todo: docgen handlers at the moment don't get data from alias\nimport { positions, Position } from '../../../ds-basic/src/Popper/positions';\nimport {\n  interactions,\n  Interaction,\n} from '../../../ds-basic/src/Popper/interaction';\nimport DropdownMenuWrapper from './DropdownMenuWrapper';\n\nconst noop = () => null;\n\nconst DSDropdownMenu = ({\n  containerProps = {},\n  className = '',\n  contentStyle = null,\n  options = [],\n  onSelectMenuItem = noop,\n  onOpenMenu = noop,\n  onClickOutsideMenu = noop,\n  preventOverflow = 'viewport',\n  placement = Position.BOTTOM_START,\n  interactionType = Interaction.CLICK,\n  triggerComponent = noop,\n  customMenu = null,\n  isOpen = undefined,\n  selection = {},\n  menuProps = {},\n  referenceNode = undefined,\n  focusOnOpen = false,\n  onClose = noop,\n  itemsRenderer = undefined,\n  responsiveHeight = false,\n  singleGroupSelection = false,\n  onSelectChange = noop,\n  minWidth = undefined,\n  maxWidth = undefined,\n  zIndex,\n  type,\n  loading = false,\n}) => (\n  <TooltipTextProvider>\n    <DropdownMenuWrapper\n      className={className}\n      containerProps={containerProps}\n      contentStyle={contentStyle}\n      customMenu={customMenu}\n      focusOnOpen={focusOnOpen}\n      interactionType={interactionType}\n      isOpen={isOpen}\n      itemsRenderer={itemsRenderer}\n      maxWidth={maxWidth}\n      menuProps={menuProps}\n      minWidth={minWidth}\n      onClickOutsideMenu={onClickOutsideMenu}\n      onClose={onClose}\n      onOpenMenu={onOpenMenu}\n      onSelectChange={onSelectChange}\n      onSelectMenuItem={onSelectMenuItem}\n      options={options}\n      placement={placement}\n      preventOverflow={preventOverflow}\n      referenceNode={referenceNode}\n      responsiveHeight={responsiveHeight}\n      selection={selection}\n      singleGroupSelection={singleGroupSelection}\n      triggerComponent={triggerComponent}\n      type={type}\n      zIndex={zIndex}\n      loading={loading}\n    />\n  </TooltipTextProvider>\n);\n\nDSDropdownMenu.propTypes = {\n  containerProps: PropTypes.shape({}),\n  /** Object style passed to the menu */\n  contentStyle: PropTypes.shape({}),\n  /** Options items for the dropdown menu. Check menu item types */\n  options: PropTypes.arrayOf(\n    PropTypes.shape({\n      type: PropTypes.string,\n      id: PropTypes.string,\n      label: PropTypes.string,\n    }),\n  ),\n  /** Handler when user clicks on a menu item */\n  onSelectMenuItem: PropTypes.func,\n  /** Handler when the menu shows up */\n  onOpenMenu: PropTypes.func,\n  /** Handler when user clicks outside the menu */\n  onClickOutsideMenu: PropTypes.func,\n  /** Prevent to move the menu outside of the container defined when interacting with the page */\n  preventOverflow: PropTypes.oneOf(['viewport', 'scrollParent', 'window']),\n  /** Menu placement */\n  placement: PropTypes.oneOf(positions),\n  /** How to open the menu with click, hover */\n  interactionType: PropTypes.oneOf(interactions),\n  /** The component that is going to open / close the menu */\n  triggerComponent: PropTypes.element,\n  /** Custom menu component */\n  customMenu: PropTypes.element,\n  /** Whether the menu is open or not */\n  isOpen: PropTypes.bool,\n  /** Selection state. Ex: { [itemId]: '{bool}', [idMultiSelectionItem]: '{string}' } */\n  selection: PropTypes.shape({}),\n  /** Props object passed to the menu component */\n  menuProps: PropTypes.shape({}),\n  /** Customize the items render */\n  itemsRenderer: PropTypes.func,\n  /** Customize menu format. Can be undefined or 'phone' */\n  type: PropTypes.string,\n  /** Customize menu minWidth. Can be undefined or 'number' */\n  minWidth: PropTypes.number,\n  /** Customize menu maxWidth. Can be undefined or 'number' */\n  maxWidth: PropTypes.number,\n  /** Make the menu responsive, it uses a margin of 120 px */\n  responsiveHeight: PropTypes.bool,\n  /** Customize menu zIndex. Can be undefined or 'number' */\n  zIndex: PropTypes.number,\n  className: PropTypes.string,\n  focusOnOpen: PropTypes.bool,\n  loading: PropTypes.bool,\n  referenceNode: PropTypes.any,\n  onClose: PropTypes.func,\n  onSelectChange: PropTypes.func,\n  singleGroupSelection: PropTypes.bool,\n};\n\nexport default DSDropdownMenu;\n","import React, { useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport { aggregatedClasses } from '@elliemae/ds-classnames';\nimport FocusGroupProvider from '@elliemae/ds-shared/FocusGroup/FocusGroupManager';\nimport { mergeRefs } from '@elliemae/ds-utilities/system';\nimport decorateToolbarChildren from './decorateToolbarChildren';\nimport Item from './ToolbarItem';\nimport ToolbarGroup from './ToolbarGroup';\nimport Divider from './ToolbarDivider';\n\nconst blockName = 'toolbar';\n\nconst ToolbarContainer = aggregatedClasses('div')(\n  blockName,\n  null,\n  ({ withDepth, alignment, size }) => ({\n    'without-depth': !withDepth,\n    [alignment]: !!alignment,\n    [size]: size,\n  }),\n);\n\nconst DSToolbar = ({\n  containerProps = {},\n  innerRef,\n  withDepth = true,\n  alignment = 'right', // left || right\n  autoFocusOnMount = true,\n  children = [],\n  size = 'normal',\n  ...otherProps\n}) => {\n  const containerRef = useRef(null);\n  return (\n    <FocusGroupProvider\n      autoFocusOnMount={autoFocusOnMount}\n      getContainer={() => containerRef.current}\n      keyBindings={{\n        Tab: 'next',\n      }}\n      orientation=\"horizontal\"\n    >\n      <ToolbarContainer\n        {...containerProps}\n        {...otherProps}\n        classProps={{ withDepth, alignment, size }}\n        innerRef={mergeRefs(innerRef, containerRef)}\n      >\n        {decorateToolbarChildren(children)}\n      </ToolbarContainer>\n    </FocusGroupProvider>\n  );\n};\n\nDSToolbar.propTypes = {\n  containerProps: PropTypes.shape({}),\n  /** Shows a shadow rear the toolbar */\n  withDepth: PropTypes.bool,\n  /** Aligns the toolbar to the left or right */\n  alignment: PropTypes.oneOf(['right', 'left']),\n  /** Toolbar size */\n  size: PropTypes.oneOf(['normal', 'compact']),\n};\n\nexport { Item as ToolbarItem, ToolbarGroup, Divider as ToolbarDivider };\n\nexport default DSToolbar;\n","export const SearchableTreePlugin = 'tree-searchable';\n"],"sourceRoot":""}
{"version":3,"sources":["../../../../src/TextBox/DSTextBox.tsx","../../../src/CloseXsmall.tsx","../../../src/Search.tsx","../../../../src/SearchBox/useSearch.tsx","../../../../src/SearchBox/SButton.tsx","../../../../src/SearchBox/styled.tsx","../../../../src/SearchBox/props.tsx","../../../../src/SearchBox/defaultProps.tsx","../../../src/decorateToolbarChildren.tsx","../../../../src/SearchBox/DSSearchBox.tsx","../../../src/DSToolbar.tsx","../../../src/DSIconColor.tsx","../../../../../src/plugins/searchable/SearchableTreePlugin.tsx","../../../../src/SearchBox/SearchBoxToggle.tsx"],"names":["DSTextBox","containerProps","autoFocus","disabled","maxLength","minLength","fluidWidth","placeholder","value","hasError","readOnly","innerRef","type","min","max","clearable","leftComponent","rightComponent","required","variant","disableTooltip","otherProps","aria-label","role","props","PropTypes","describe","DSTextBoxWithSchema","createIcon","paths","height","width","handleSearch","onSearchButtonClick","setValue","searchOnEnter","onSearch","query","property","useSearch","params","onKeyUp","clearOnSearch","onChange","useState","debouncedSearch","useCallback","debounce","useEffect","searchWithParams","clickedSearchButton","handleChange","target","handleClear","handleKeyUp","e","key","searchValue","Button","styled","focus","SButton","icon","onClick","data-testid","SearchBoxTextBox","searchBoxProps","className","style","onBlur","showIcon","disableButton","defaultProps","undefined","children","extraProps","component","cloneElement","DSSearchBox","shouldShowClearIcon","shouldShowSearchIcon","shouldShowAnyIcon","PureSearchboxIcon","Icon","handleOnClick","color","DSIconColors","PRIMARY","position","zIndex","SearchBoxWithSchema","ToolbarContainer","withDepth","alignment","size","DSToolbar","autoFocusOnMount","containerRef","useRef","getContainer","keyBindings","Tab","orientation","classProps","mergeRefs","decorateToolbarChildren","toolbarProps","ToolbarWithSchema","NEUTRAL","WHITE","DANGER","WARNING","SUCCESS","SearchableTreePlugin","SearchWrap","SearchBoxToggle","rest","isOpen","setOpen","show","setShow","computedWidth","button","buttonType","onTransitionEnd"],"mappings":"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","file":"static/js/47.f62ea0ee.chunk.js","sourcesContent":["import React from 'react';\nimport { PropTypes, describe } from 'react-desc';\nimport DSInput from '../Input';\n\nconst DSTextBox = ({\n  containerProps = {},\n  autoFocus = false,\n  disabled = false,\n  maxLength = 255,\n  minLength = 0,\n  fluidWidth = false,\n  placeholder,\n  value = '',\n  hasError = false,\n  readOnly = false,\n  innerRef = null,\n  type = 'text',\n  min = undefined,\n  max = undefined,\n  clearable = false,\n  leftComponent = null,\n  rightComponent = null,\n  required = false,\n  variant,\n  disableTooltip,\n  ...otherProps\n}) => (\n  <DSInput\n    {...otherProps}\n    aria-label={otherProps['aria-label'] || 'Text Box'}\n    autoFocus={autoFocus}\n    clearable={clearable}\n    containerProps={containerProps}\n    disabled={disabled}\n    fluidWidth={fluidWidth}\n    hasError={hasError}\n    innerRef={innerRef}\n    leftComponent={leftComponent}\n    max={max}\n    maxLength={maxLength}\n    min={min}\n    minLength={minLength}\n    placeholder={placeholder}\n    readOnly={readOnly}\n    required={required}\n    rightComponent={rightComponent}\n    role=\"textbox\"\n    type={type}\n    value={value}\n    variant={variant}\n    disableTooltip={disableTooltip}\n  />\n);\n\nconst props = {\n  /** inject props at textbox wrapper */\n  containerProps: PropTypes.shape({}).description(\n    'inject props at textbox wrapper',\n  ),\n  /**\n   * Whether the text box uses auto focus or not\n   */\n  autoFocus: PropTypes.bool.description(\n    'Whether the text box uses auto focus or not',\n  ),\n  /**\n   * Whether the text box is disabled or not\n   */\n  disabled: PropTypes.bool.description(\n    'Whether the text box is disabled or not',\n  ),\n  /**\n   * Max length for the text box\n   */\n  maxLength: PropTypes.number.description('Max length for the text box'),\n  /**\n   * Min length for the text box\n   */\n  minLength: PropTypes.number.description('Min length for the text box'),\n  /**\n   * Make the content of the text box fit the container or not\n   */\n  fluidWidth: PropTypes.bool.description(\n    'Make the content of the text box fit the container or not',\n  ),\n  /**\n   * Placeholder for the text box\n   */\n  placeholder: PropTypes.string.description('Placeholder for the text box'),\n  /**\n   * Default value once the component is initialized\n   */\n  value: PropTypes.string.description(\n    'Default value once the component is initialized',\n  ),\n  /**\n   * Whether the text box has error or not\n   */\n  hasError: PropTypes.bool.description('Whether the text box has error or not'),\n  /**\n   * Whether the text box is read only or not\n   */\n  readOnly: PropTypes.bool.description(\n    'Whether the text box is read only or not',\n  ),\n  /** html min prop for input */\n  min: PropTypes.number.description('html min prop for input'),\n  /** html max prop for input */\n  max: PropTypes.number.description('html max prop for input'),\n  /**\n   * Whether the text box is clearable or not\n   */\n  clearable: PropTypes.bool.description(\n    'Whether the text box is clearable or not',\n  ),\n  /**\n   * Component to be added at the left side of the text box\n   */\n  leftComponent: PropTypes.element.description(\n    'Component to be added at the left side of the text box',\n  ),\n  /**\n   * Component to be added at the right side of the text box\n   */\n  rightComponent: PropTypes.element.description(\n    'Component to be added at the right side of the text box',\n  ),\n  /**\n   * Whether the text box is required or not\n   */\n  required: PropTypes.bool.description(\n    'Whether the text box is required or not',\n  ),\n  /**\n   * [\n   *  'variant-default',\n   *  'variant-focus',\n   *  'variant-active',\n   *  'variant-disabled',\n   * ]\n   */\n  variant: PropTypes.string.description(\n    \"variant-default','variant-focus','variant-active','variant-disabled'\",\n  ),\n  /** html input type */\n  type: PropTypes.string.description('html input type'),\n  /** Internal ref */\n  innerRef: PropTypes.oneOfType([PropTypes.func, PropTypes.object]).description(\n    'internal ref',\n  ),\n  /** disableTooltip */\n  disableTooltip: PropTypes.bool\n    .description('Whether to show a tooltip or not when text does not fit')\n    .defaultValue(true),\n};\n\nDSTextBox.propTypes = props;\n\nconst DSTextBoxWithSchema = describe(DSTextBox);\n\nDSTextBoxWithSchema.propTypes = props;\n\nexport default DSTextBox;\nexport { DSTextBoxWithSchema };\n","/* eslint-disable */\nimport createIcon from './utils/createIcon';\n\nexport default createIcon({\n  paths: [\n    'M13.071 13.289l-2.828-2.828 2.828-2.828-.707-.707-2.828 2.828-2.828-2.828-.707.707 2.828 2.828-2.828 2.828.707.707 2.828-2.828 2.828 2.828z',\n  ],\n  height: 20,\n  width: 20,\n});\n","/* eslint-disable */\nimport createIcon from './utils/createIcon';\n\nexport default createIcon({\n  paths: [\n    'M18.869 19.162l-5.943-6.484c1.339-1.401 2.075-3.233 2.075-5.178 0-2.003-.78-3.887-2.197-5.303S9.504 0 7.501 0 3.614.78 2.198 2.197.001 5.497.001 7.5s.78 3.887 2.197 5.303S5.498 15 7.501 15c1.726 0 3.362-.579 4.688-1.645l5.943 6.483a.497.497 0 0 0 .369.162.4997.4997 0 0 0 .369-.837l-.001-.001zM1 7.5C1 3.916 3.916 1 7.5 1S14 3.916 14 7.5 11.084 14 7.5 14 1 11.084 1 7.5z',\n  ],\n  height: 20,\n  width: 20,\n});\n","import { useState, useEffect, useCallback } from 'react';\nimport { debounce } from '@elliemae/ds-utilities/utils';\n\n// eslint-disable-next-line max-params\nfunction handleSearch(\n  clearOnSearch,\n  setValue,\n  searchOnEnter,\n  value,\n  onSearch,\n  property,\n  clickTrigger,\n  onSearchButtonClick,\n) {\n  if (clickTrigger) {\n    onSearchButtonClick();\n  }\n  if (clearOnSearch) setValue('');\n  if (searchOnEnter && !value) return;\n  onSearch({\n    query: { [property]: value },\n    property,\n    value,\n  });\n}\n\nexport function useSearch(params = {}) {\n  const {\n    onKeyUp,\n    onSearch,\n    onSearchButtonClick,\n    property,\n    clearOnSearch,\n    searchOnEnter,\n    onChange,\n  } = params;\n  const [value, setValue] = useState(params.value);\n  const debouncedSearch = useCallback(debounce(handleSearch, 200), []);\n  // update state if prop changes\n  useEffect(() => {\n    if (value !== params.value) {\n      setValue(params.value);\n    }\n  }, [params.value]);\n\n  const searchWithParams = (clickedSearchButton = false) =>\n    handleSearch(\n      clearOnSearch,\n      setValue,\n      searchOnEnter,\n      value,\n      onSearch,\n      property,\n      clickedSearchButton,\n      onSearchButtonClick,\n    );\n\n  const handleChange = ({ target }) => {\n    onChange(target.value);\n    setValue(target.value);\n    if (!searchOnEnter) {\n      // Functional update to get latest value state, similar to this.setState callback\n      setValue((prevValue) => {\n        debouncedSearch(\n          clearOnSearch,\n          setValue,\n          searchOnEnter,\n          prevValue,\n          onSearch,\n          property,\n        );\n        return prevValue;\n      });\n    }\n  };\n\n  const handleClear = () => {\n    onChange('');\n    setValue('');\n    if (!searchOnEnter) {\n      // Functional update to get latest value state, similar to this.setState callback\n      setValue((prevValue) => {\n        debouncedSearch(\n          clearOnSearch,\n          setValue,\n          searchOnEnter,\n          prevValue,\n          onSearch,\n          property,\n        );\n        return prevValue;\n      });\n    }\n    debouncedSearch(\n      clearOnSearch,\n      setValue,\n      searchOnEnter,\n      value,\n      onSearch,\n      property,\n    );\n  };\n\n  const handleKeyUp = (e) => {\n    const { key } = e;\n    if (searchOnEnter && key === 'Enter') {\n      searchWithParams();\n    }\n    onKeyUp(e);\n  };\n\n  return {\n    searchValue: value,\n    handleChange,\n    handleSearch: searchWithParams,\n    handleKeyUp,\n    handleClear,\n  };\n}\n","import React from 'react';\nimport { PropTypes } from 'react-desc';\nimport styled from 'styled-components';\nimport { focus } from '@elliemae/ds-system';\n\nconst Button = styled.button`\n  all: unset;\n  position: absolute;\n  height: calc(100% - 2px);\n  width: 28px;\n  top: 1px;\n  right: 1px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  box-sizing: border-box;\n  cursor: pointer;\n  z-index: 1;\n  svg {\n    fill: ${(props) => props.theme.colors.brand['600']};\n  }\n  &:disabled {\n    color: #5d6775;\n    cursor: not-allowed;\n    svg {\n      fill: #5d6775;\n    }\n  }\n  &:focus {\n    ${focus()}\n  }\n`;\n\nconst SButton = ({ icon, disabled, onClick }) => (\n  <Button\n    data-testid=\"ds-searchbox-button\"\n    onClick={onClick}\n    disabled={disabled}\n    type=\"button\"\n  >\n    {icon}\n  </Button>\n);\n\nSButton.propTypes = {\n  /** click handler for button */\n  onClick: PropTypes.func.isRequired.description('click handler for button'),\n  /** ds icon to render inside button */\n  icon: PropTypes.node.isRequired.description(\n    'ds icon to render inside button',\n  ),\n  /** disable button */\n  disabled: PropTypes.bool.description('disable button'),\n};\n\nexport { SButton };\n","import styled from 'styled-components';\nimport DSTextBox from '../TextBox';\nexport const SearchBoxTextBox = styled(DSTextBox)`\n  padding-right: 33px;\n`;\n","import { PropTypes } from 'react-desc';\n\nexport const searchBoxProps = {\n  /** Set of Properties attached to the main container */\n  containerProps: PropTypes.object.description(\n    'Set of Properties attached to the main container',\n  ),\n  /** html class attribute */\n  className: PropTypes.string.description('html class attribute'),\n  /** ref to the components container */\n  innerRef: PropTypes.object.description('ref to the components container'),\n  /** Set style to the search box */\n  style: PropTypes.object.description('Set style to the search box'),\n  /** search property */\n  property: PropTypes.string.description('search property'),\n  /** Placeholder for the search box */\n  placeholder: PropTypes.string.description('Placeholder for the search box'),\n  /** Whether to trigger the search once the enter is pressed */\n  searchOnEnter: PropTypes.bool.description(\n    'Whether to trigger the search once the enter is pressed',\n  ),\n  /** Whether to clear the input on search */\n  clearOnSearch: PropTypes.bool.description(\n    'Whether to clear the input on search',\n  ),\n  /** function triggered once in the search box a keyboard key is released */\n  onKeyUp: PropTypes.func.description(\n    'function triggered once in the search box a keyboard key is released',\n  ),\n  /** function triggered once the search action begins (search icon click/ enter keypress) */\n  onSearch: PropTypes.func.description(\n    'unction triggered once the search action begins (search icon click/ enter keypress)',\n  ),\n  /** function triggered once the search icon is clicked */\n  onSearchButtonClick: PropTypes.func.description(\n    'function triggered once the search icon is clicked',\n  ),\n  /** function that is triggered on change */\n  onChange: PropTypes.func.description('function that is triggered on change'),\n  /** Function that is triggered on blur */\n  onBlur: PropTypes.func.description('Function that is triggered on blur'),\n  /** searchbox input value */\n  value: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.number,\n    PropTypes.object,\n  ]).description('searchbox input value'),\n  /** Whether to show an icon or not */\n  showIcon: PropTypes.bool.description('Whether to show an icon or not'),\n  /** Disables the search input and button */\n  disabled: PropTypes.bool.description('Disables the search input and button'),\n  /** Disables the search button */\n  disableButton: PropTypes.bool.description('Disables the search button'),\n  /** whether the input is read only or not */\n  readOnly: PropTypes.bool.description('whether the input is read only or not'),\n  /** Show clearable button */\n  clearable: PropTypes.bool.description('Show clearable button'),\n};\n\nexport const navSearchBoxProps = {\n  /** searchbox input value */\n  value: PropTypes.string.isRequired.description('searchbox input value'),\n  /** function that is triggered on change */\n  onChange: PropTypes.func.isRequired.description(\n    'function that is triggered on change',\n  ),\n  /** Function that is triggered on blur */\n  onBlur: PropTypes.func.description('Function that is triggered on blur'),\n  /** triggered on next chevron click */\n  onNext: PropTypes.func.isRequired.description(\n    'triggered on next chevron click',\n  ),\n  /** triggered on prev chevron click */\n  onPrevious: PropTypes.func.isRequired.description(\n    'triggered on prev chevron click',\n  ),\n  /** function that is triggered on clear button press */\n  onClear: PropTypes.func.isRequired.description(\n    'function that is triggered on clear button press',\n  ),\n  /** zero based index to show on search box, -1 hides navigation */\n  currentResultIndex: PropTypes.number.isRequired.description(\n    'zero based index to show on search box, -1 hides navigation',\n  ),\n  /** total items to navigate */\n  totalResults: PropTypes.number.isRequired.description(\n    'total items to navigate',\n  ),\n  /** Placeholder for the search box */\n  placeholder: PropTypes.string.description('Placeholder for the search box'),\n};\n","export const defaultProps = {\n  className: '',\n  clearable: false,\n  clearOnSearch: false,\n  containerProps: {},\n  disableButton: false,\n  disabled: false,\n  innerRef: undefined,\n  onBlur: () => null,\n  onChange: () => null,\n  onKeyUp: () => null,\n  onSearch: () => null,\n  onSearchButtonClick: () => null,\n  placeholder: 'Search all',\n  property: 'all',\n  readOnly: false,\n  searchOnEnter: true,\n  showIcon: true,\n  style: {},\n  value: undefined,\n};\n\nexport const navSearchBoxDefaultProps = {\n  placeholder: 'Search...',\n  currentResultIndex: -1,\n};\n","import React, { cloneElement } from 'react';\n\nexport default (children, extraProps = {}) =>\n  React.Children.map(\n    children,\n    component =>\n      component\n        ? cloneElement(component, {\n            ...extraProps,\n            ...component.props,\n            className: `${component.props.className} toolbar-item`,\n          })\n        : component,\n    null,\n  );\n","/* eslint-disable complexity */\nimport React from 'react';\nimport { describe } from 'react-desc';\nimport Search from '@elliemae/ds-icons/Search';\nimport { DSIconColors } from '@elliemae/ds-icon';\nimport CloseXsmall from '@elliemae/ds-icons/CloseXsmall';\nimport { SearchBoxTextBox } from './styled';\nimport { SButton } from './SButton';\nimport { useSearch } from './useSearch';\nimport { searchBoxProps } from './props';\nimport { defaultProps } from './defaultProps';\n\nconst DSSearchBox = ({\n  className,\n  clearable,\n  containerProps,\n  disableButton,\n  disabled,\n  innerRef,\n  onBlur,\n  onChange,\n  onKeyUp,\n  onSearch,\n  placeholder,\n  property,\n  readOnly,\n  searchOnEnter,\n  onSearchButtonClick,\n  showIcon,\n  style,\n  value,\n}) => {\n  const {\n    searchValue,\n    handleChange,\n    handleSearch,\n    handleKeyUp,\n    handleClear,\n  } = useSearch({\n    onChange,\n    onKeyUp,\n    onSearch,\n    onSearchButtonClick,\n    property,\n    searchOnEnter,\n    value,\n  });\n  const shouldShowClearIcon = showIcon && clearable && searchValue?.length > 0;\n  const shouldShowSearchIcon = !shouldShowClearIcon && showIcon;\n  const shouldShowAnyIcon = shouldShowClearIcon || shouldShowSearchIcon;\n\n  const PureSearchboxIcon = React.useMemo(() => {\n    let Icon = <Search />;\n    let handleOnClick = () => handleSearch(true);\n    if (!shouldShowAnyIcon) return null;\n    if (shouldShowClearIcon) {\n      Icon = <CloseXsmall color={DSIconColors.PRIMARY} />;\n      handleOnClick = handleClear;\n    }\n\n    return (\n      <SButton\n        disabled={disabled || disableButton}\n        icon={Icon}\n        onClick={handleOnClick}\n      />\n    );\n  }, [\n    shouldShowClearIcon,\n    shouldShowSearchIcon,\n    shouldShowAnyIcon,\n    disabled,\n    disableButton,\n    handleSearch,\n    handleClear,\n  ]);\n\n  return (\n    <div style={{ position: 'relative', zIndex: 0 }}>\n      <SearchBoxTextBox\n        className={className}\n        containerProps={containerProps}\n        disabled={disabled}\n        innerRef={innerRef}\n        onChange={handleChange}\n        onKeyUp={handleKeyUp}\n        onBlur={onBlur}\n        placeholder={placeholder}\n        readOnly={readOnly}\n        style={style}\n        value={searchValue}\n      />\n      {PureSearchboxIcon}\n    </div>\n  );\n};\n\nDSSearchBox.propTypes = searchBoxProps;\nDSSearchBox.defaultProps = defaultProps;\n\nconst SearchBoxWithSchema = describe(DSSearchBox);\nSearchBoxWithSchema.propTypes = searchBoxProps;\n\nexport { SearchBoxWithSchema };\nexport default DSSearchBox;\n","import React, { useRef } from 'react';\nimport { describe, PropTypes } from 'react-desc';\nimport { aggregatedClasses } from '@elliemae/ds-classnames';\nimport FocusGroupProvider from '@elliemae/ds-shared/FocusGroup/FocusGroupManager';\nimport { mergeRefs } from '@elliemae/ds-utilities/system';\nimport decorateToolbarChildren from './decorateToolbarChildren';\nimport Item from './ToolbarItem';\nimport ToolbarGroup from './ToolbarGroup';\nimport Divider from './ToolbarDivider';\n\nconst blockName = 'toolbar';\n\nconst ToolbarContainer = aggregatedClasses('div')(\n  blockName,\n  null,\n  ({ withDepth, alignment, size }) => ({\n    'without-depth': !withDepth,\n    [alignment]: !!alignment,\n    [size]: size,\n  }),\n);\n\nconst DSToolbar = ({\n  containerProps = {},\n  innerRef,\n  withDepth = true,\n  alignment = 'right', // left || right\n  autoFocusOnMount = true,\n  children = [],\n  size = 'normal',\n  ...otherProps\n}) => {\n  const containerRef = useRef(null);\n  return (\n    <FocusGroupProvider\n      autoFocusOnMount={autoFocusOnMount}\n      getContainer={() => containerRef.current}\n      keyBindings={{\n        Tab: 'next',\n      }}\n      orientation=\"horizontal\"\n    >\n      <ToolbarContainer\n        {...containerProps}\n        {...otherProps}\n        classProps={{ withDepth, alignment, size }}\n        innerRef={mergeRefs(innerRef, containerRef)}\n      >\n        {decorateToolbarChildren(children)}\n      </ToolbarContainer>\n    </FocusGroupProvider>\n  );\n};\n\nconst toolbarProps = {\n  containerProps: PropTypes.object.description(\n    'Set of Properties attached to the main container',\n  ),\n  withDepth: PropTypes.bool\n    .description('Shows a shadow rear the toolbar')\n    .defaultValue(true),\n  alignment: PropTypes.oneOf(['right', 'left'])\n    .description('Aligns the toolbar to the left or right')\n    .defaultValue('right'),\n  size: PropTypes.oneOf(['normal', 'compact'])\n    .description('Toolbar size')\n    .defaultValue('normal'),\n  autoFocusOnMount: PropTypes.bool\n    .description('Wheter to focus the component when it mounts or not')\n    .defaultValue(true),\n  children: PropTypes.oneOfType([\n    PropTypes.array,\n    PropTypes.func,\n    PropTypes.node,\n  ]).description('Toolbar items').isRequired,\n  innerRef: PropTypes.object.description(\n    'Ref to the Toolbar container element',\n  ),\n};\n\nDSToolbar.propTypes = toolbarProps;\n\nconst ToolbarWithSchema = describe(DSToolbar);\nToolbarWithSchema.propTypes = toolbarProps;\n\nexport {\n  DSToolbar,\n  Item as ToolbarItem,\n  ToolbarGroup,\n  Divider as ToolbarDivider,\n  ToolbarWithSchema,\n};\n\nexport default DSToolbar;\n","const ICONS_COLORS = {\n  NEUTRAL: ['neutral', '900'],\n  WHITE: ['neutral', '0'],\n  DANGER: ['danger', '900'],\n  WARNING: ['warning', '500'],\n  SUCCESS: ['success', '900'],\n  PRIMARY: ['brand-primary', '600'],\n};\n\nexport default ICONS_COLORS;\n","export const SearchableTreePlugin = 'tree-searchable';\n","import React, { useState } from 'react';\nimport styled from 'styled-components';\nimport SearchIcon from '@elliemae/ds-icons/Search';\nimport DSButton from '@elliemae/ds-button';\nimport DSSearchBox from './DSSearchBox';\n\nconst SEARCH_BUTTON_WIDTH = 26;\n\nconst SearchWrap = styled.div`\n  transition: width 200ms ease;\n  width: ${SEARCH_BUTTON_WIDTH}px;\n  height: 0;\n\n  ${(props) =>\n    !props.show\n      ? `\n        opacity:0;\n\n        & * {\n          width: ${SEARCH_BUTTON_WIDTH}px;\n          height: 0;\n          border: 0;\n        }\n      `\n      : ''}\n  ${(props) =>\n    props.isOpen ? `width: ${props.width};opacity: 1;height: auto;` : ''}\n`;\n\n// eslint-disable-next-line react/prop-types\nconst SearchBoxToggle = ({ onSearchButtonClick, width, ...rest }) => {\n  const [isOpen, setOpen] = useState(false);\n  const [show, setShow] = useState(true);\n  const computedWidth = typeof width === 'number' ? `${width}px` : width;\n  const button = (\n    <DSButton\n      onClick={() => {\n        setOpen(true);\n      }}\n      buttonType=\"text\"\n      icon={<SearchIcon />}\n    />\n  );\n  return (\n    <div>\n      {show && !isOpen && button}\n      <SearchWrap\n        show={!show || isOpen}\n        isOpen={isOpen}\n        width={computedWidth}\n        onTransitionEnd={() => {\n          setShow(!isOpen);\n        }}\n      >\n        <DSSearchBox\n          {...rest}\n          onSearchButtonClick={() => {\n            onSearchButtonClick();\n            setOpen(false);\n          }}\n        />\n      </SearchWrap>\n    </div>\n  );\n};\n\nSearchBoxToggle.defaultProps = {\n  onSearchButtonClick: () => null,\n  width: 300,\n};\n\nexport default SearchBoxToggle;\n"],"sourceRoot":""}
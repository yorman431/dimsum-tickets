{"version":3,"sources":["../../../../../src/form/Toggle/toggleHelper.js","../../../src/onClickHandlerForNonInteractiveElements.js","../../../../../src/form/Toggle/DSToggleRender.js","../../../../../src/form/Toggle/props.js","../../../../../src/form/Toggle/DSToggleImpl.js","../../../../../src/form/Toggle/DSToggle.js","../../../../src/Tooltip/TooltipType.js","../../../../src/Tooltip/DSTooltip.js","../../../src/constants.js"],"names":["cleanDrag","startPoint","isDragging","dragStartingPoints","checked","circleWidth","boxWidth","drag","onClickHandler","role","tabIndex","onClick","onKeyPress","event","keycode","containerProps","id","className","style","hasError","hide","readOnly","disabled","onBlur","onFocus","onChange","onMouseDown","onMouseEnter","onMouseLeave","onTouchCancel","onTouchEnd","onTouchMove","onTouchStart","labelOn","labelOff","dragStyle","containerRef","handRef","name","value","size","defaultState","convertPropToCssClassName","cssClassName","classNameBlock","classNameElement","allowChange","label","interactionType","title","triggerComponent","data-testid","aria-disabled","defaultChecked","defaultValue","onClickHandlerForNonInteractiveElements","ref","aria-checked","type","togglePropTypes","PropTypes","string","DSToggleImpl","move","clientX","calculateDrag","inside","isValidDrag","e","newCheck","window","props","React","this","prevProps","prevState","snapshot","state","currentCheckState","checkedProp","nodesInterval","setInterval","clearInterval","left","Component","DSToggle","otherProps","TooltipType","TooltipContainer","aggregatedClasses","TooltipText","DSTooltip","innerRef","placement","PopperPositions","TOP","delayClose","delayOpen","PopperInteractions","HOVER","isOpen","undefined","onOpen","springAnimationComponent","tooltipType","showArrow","zIndex","otherTooltipProps","tooltipBlockName","Content","blockName","contentComponent","getComponentFromProps","current","any"],"mappings":"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","file":"static/js/70.223b40bf.chunk.js","sourcesContent":["export const isValidDrag = ({\n  inside,\n  circleWidth,\n  drag,\n  checked,\n  boxWidth,\n}) => {\n  const difference = boxWidth - circleWidth;\n  return checked\n    ? !inside && -drag > difference / 2\n    : !inside && drag > boxWidth / 3;\n};\n\nexport const cleanDrag = () => ({\n  startPoint: null,\n  isDragging: false,\n});\n\n// eslint-disable-next-line complexity\nexport const calculateDrag = (\n  clientX,\n  { startPoint, checked, isDragging, boxWidth, circleWidth },\n) => {\n  if (!isDragging) return null;\n  const move = startPoint - clientX;\n  const drag = !checked ? clientX - startPoint : boxWidth - circleWidth - move;\n  if (!checked && clientX > 0 && clientX > startPoint && drag < boxWidth * 0.7)\n    return drag;\n  if (checked && clientX > 0 && clientX < startPoint && move < boxWidth * 0.7)\n    return drag;\n  return null;\n};\n\nexport const dragStartingPoints = (checked) => ({ circleWidth, boxWidth }) => {\n  if (checked) return { drag: boxWidth - circleWidth };\n  return {\n    drag: 0,\n  };\n};\n","/**\n * onClickHandler: callback\n *\n * @param onClickHandler\n */\nexport default onClickHandler => ({\n  role: 'button',\n  tabIndex: '0',\n  onClick: onClickHandler,\n  onKeyPress: event => {\n    event.stopPropagation();\n    const { keycode, key } = event;\n    if (key === 'Enter') onClickHandler(event);\n    else if (keycode === 13) onClickHandler(event);\n  },\n});\n","/* eslint-disable react/prop-types */\n/* eslint-disable complexity */\nimport React from 'react';\nimport onClickHandlerForNonInteractiveElements from '@elliemae/ds-utilities/onClickHandlerForNonInteractiveElements';\nimport { convertPropToCssClassName } from '@elliemae/ds-classnames';\nimport DSTooltip from '@elliemae/ds-basic/Tooltip';\n\nconst DSToggleRender = ({\n  containerProps,\n  id,\n  className = '',\n  style = {},\n  hasError = false,\n  hide,\n  readOnly = false,\n  disabled = false,\n  checked = false,\n  onBlur = () => null,\n  onFocus = () => null,\n  onChange = () => null,\n  onMouseDown = () => null,\n  onMouseEnter = () => null,\n  onMouseLeave = () => null,\n  onTouchCancel = () => null,\n  onTouchEnd = () => null,\n  onTouchMove = () => null,\n  onTouchStart = () => null,\n  labelOn = 'ON',\n  labelOff = 'OFF',\n  dragStyle = {},\n  containerRef = null,\n  handRef = null,\n  name = '',\n  value = '',\n  size = 's',\n  defaultState,\n}) => {\n  const {\n    cssClassName,\n    classNameBlock,\n    classNameElement,\n  } = convertPropToCssClassName('form-element-toggle', className, {\n    hasError,\n    readOnly,\n    disabled,\n    checked,\n    id,\n    size,\n  });\n  const allowChange = disabled || readOnly;\n\n  let label = checked ? (\n    <div className={classNameElement('icon-on')}>{labelOn}</div>\n  ) : (\n    <div className={classNameElement('icon-off')}>{labelOff}</div>\n  );\n\n  if (readOnly) {\n    label = (\n      <DSTooltip\n        interactionType=\"hover\"\n        title=\"Read Only\"\n        triggerComponent={label}\n      />\n    );\n  }\n\n  return (\n    <div\n      data-testid=\"em-ds-toggle\"\n      {...containerProps}\n      aria-disabled={disabled}\n      defaultChecked={checked}\n      defaultValue={value}\n      {...onClickHandlerForNonInteractiveElements(\n        allowChange ? null : onChange,\n      )}\n      ref={containerRef}\n      className={`${cssClassName} ${\n        defaultState ? 'default-state-checked' : ''\n      }${hide ? ' ds-form-element-toggle-hide' : ''}`}\n      onBlur={onBlur}\n      onFocus={onFocus}\n      // eslint-disable-next-line jsx-a11y/role-has-required-aria-props\n      aria-checked={checked}\n      role=\"checkbox\"\n      tabIndex={0}\n    >\n      <div className={classNameBlock('box')}>{label}</div>\n      <div\n        ref={handRef}\n        aria-checked={checked}\n        aria-disabled={disabled}\n        className={`${classNameElement('input')} ${\n          defaultState ? 'default-state-checked' : ''\n        }`}\n        onMouseDown={allowChange ? null : onMouseDown}\n        onMouseEnter={allowChange ? null : onMouseEnter}\n        onMouseLeave={allowChange ? null : onMouseLeave}\n        onTouchCancel={allowChange ? null : onTouchCancel}\n        onTouchEnd={allowChange ? null : onTouchEnd}\n        onTouchMove={allowChange ? null : onTouchMove}\n        onTouchStart={allowChange ? null : onTouchStart}\n        style={{\n          ...style,\n          ...dragStyle,\n        }}\n      />\n      <input\n        className={classNameElement('hidden-checkbox')}\n        defaultChecked={checked}\n        defaultValue={value}\n        name={name}\n        type=\"checkbox\"\n      />\n    </div>\n  );\n};\n\nexport default DSToggleRender;\n","import PropTypes from 'prop-types';\nimport { sizes } from '../../utils/prop-types';\n\nexport const togglePropTypes = {\n  /**\n   * Set of Properties attached to the main container\n   */\n  containerProps: PropTypes.shape({}),\n  /**\n   * Whether the toggle has error or not\n   */\n  hasError: PropTypes.bool,\n  /**\n   * Whether the toggle is read only or not\n   */\n  readOnly: PropTypes.bool,\n  /**\n   * Whether the toggle is disabled or not\n   */\n  disabled: PropTypes.bool,\n  /**\n   * Whether the toggle is checked or not\n   */\n  checked: PropTypes.bool,\n  /**\n   * Allows a function that is triggered once the toggle changes\n   */\n  onChange: PropTypes.func,\n  /**\n   * Label to show when the toggle is ON\n   */\n  labelOn: PropTypes.string,\n  /**\n   * Label to show when the toggle is OFF\n   */\n  labelOff: PropTypes.string,\n  /**\n   * Default value once the component is initialized\n   */\n  value: PropTypes.string,\n  /**\n   * ['s', 'm', 'l']\n   */\n  size: PropTypes.oneOf(sizes),\n  /**\n   * Input name\n   */\n  name: PropTypes.string,\n};\n","/* eslint-disable max-lines */\nimport React, { Component } from 'react';\nimport {\n  isValidDrag,\n  cleanDrag,\n  calculateDrag,\n  dragStartingPoints,\n} from './toggleHelper';\nimport DSToggleRender from './DSToggleRender';\nimport { togglePropTypes } from './props';\n\nclass DSToggleImpl extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      checked: props.checked || false,\n      inside: false,\n      isDragging: false,\n      // prevent draw of toggle before drag handle positioning calculations\n      hide: true,\n      drag: null,\n      startPoint: null,\n      circleWidth: null,\n      boxWidth: null,\n    };\n    this.circle = React.createRef();\n    this.box = React.createRef();\n  }\n\n  componentDidMount() {\n    this.verifyElements();\n  }\n\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    if (\n      this.state.hide &&\n      this.state.circleWidth &&\n      this.state.boxWidth &&\n      prevState.hide &&\n      this.state.drag !== null\n    ) {\n      // eslint-disable-next-line react/no-did-update-set-state\n      this.setState({ hide: false });\n    }\n    if (snapshot) {\n      this.verifyElements();\n    }\n  }\n\n  /**\n   * ******************************************************\n   * Drag\n   * ****************************************************** *\n   *\n   * @param clientX\n   */\n  onDragStart = (clientX) => {\n    const {\n      startPoint,\n      checked,\n      isDragging,\n      boxWidth,\n      circleWidth,\n    } = this.state;\n    // const { checked: checkedProp, } = this.props\n    const drag = calculateDrag(clientX, {\n      startPoint,\n      checked,\n      isDragging,\n      boxWidth,\n      circleWidth,\n    });\n    if (drag) this.setState({ drag });\n    // else this.setDragOnChange(checkedProp != null ? checkedProp : checked) // set initial position\n    else this.setDragOnChange(checked); // set initial position\n  };\n\n  onDragStop = (e) => {\n    const { checked } = this.state;\n    // const { checked: checkedProp, } = this.props\n    if (isValidDrag(this.state)) {\n      this.onChange(e);\n      this.setState(cleanDrag);\n      // } else this.setDragOnChange(checkedProp != null ? checkedProp : checked) // set initial position\n    } else this.setDragOnChange(checked); // set initial position\n  };\n\n  /**\n   * ******************************************************\n   * StandardEvents\n   * ****************************************************** *\n   *\n   * @param e\n   */\n  onBlur = (e) => {\n    const { onBlur, id } = this.props;\n    if (onBlur) onBlur(e, id);\n  };\n\n  onFocus = (e) => {\n    const { onFocus, id } = this.props;\n    if (onFocus) onFocus(e, id);\n  };\n\n  onChange = (e) => {\n    const { checked } = this.state;\n    const {\n      onChange,\n      id,\n      value,\n      // checked: checkedProp,\n    } = this.props;\n    const newCheck = !checked;\n    // this.setState({\n    //   checked: checkedProp != null ? checkedProp : newCheck,\n    // })\n    this.setState({\n      checked: newCheck,\n    });\n    e.target.value = value;\n    e.target.checked = newCheck;\n    e.checked = newCheck;\n    onChange(e, id);\n    // this.setDragOnChange(checkedProp != null ? checkedProp : newCheck) // set new position\n    this.setDragOnChange(newCheck); // set new position\n  };\n\n  /** ******************************************************\n      MouseEvents\n   ******************************************************* * */\n  onMouseEnter = () => {\n    this.setState({ inside: true });\n  };\n\n  onMouseLeave = () => {\n    this.setState({ inside: false });\n  };\n\n  onMouseMove = (event) => {\n    event.preventDefault();\n    this.onDragStart(event.clientX);\n  };\n\n  onMouseDown = (event) => {\n    this.onDragStart(event.clientX);\n    this.setState({ startPoint: event.clientX, isDragging: true });\n    window.addEventListener('mousemove', this.onMouseMove);\n    window.addEventListener('mouseup', this.onMouseUp);\n  };\n\n  onMouseUp = (event) => {\n    this.onDragStop(event);\n    window.removeEventListener('mousemove', this.onMouseMove);\n    window.removeEventListener('mouseup', this.onMouseUp);\n  };\n\n  /** ******************************************************\n      Touch\n   ******************************************************* * */\n  onTouchCancel = () => {\n    this.setState({ inside: false });\n  };\n\n  onTouchEnd = (event) => {\n    event.preventDefault();\n    this.onDragStop(event);\n  };\n\n  onTouchMove = (event) => {\n    this.onDragStart(event.touches[0].clientX);\n  };\n\n  onTouchStart = (event) => {\n    this.onDragStart(event.touches[0].clientX);\n    this.setState({ startPoint: event.touches[0].clientX, isDragging: true });\n  };\n\n  static getDerivedStateFromProps(props, state) {\n    if (props.checked === true || props.checked === false) {\n      return {\n        checked: props.checked,\n        ...dragStartingPoints(props.checked)(state),\n      };\n    }\n    return null;\n  }\n\n  getSnapshotBeforeUpdate(prevProps) {\n    const { size } = this.props;\n    if (prevProps.size !== size) {\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * ******************************************************\n   * other\n   * ****************************************************** *\n   *\n   * @param currentCheckState\n   */\n  setDragOnChange(currentCheckState) {\n    this.setState(dragStartingPoints(currentCheckState));\n  }\n\n  verifyElements() {\n    const { checked } = this.state;\n    const { checked: checkedProp } = this.props;\n    const nodesInterval = setInterval(() => {\n      // !important it checks when nodes are availables\n      if (\n        !this.circle ||\n        !this.box ||\n        !this.circle.current ||\n        !this.box.current\n      )\n        return;\n      const {\n        current: { clientWidth: circleWidth },\n      } = this.circle;\n      const {\n        current: { clientWidth: boxWidth },\n      } = this.box;\n      if (!circleWidth || !boxWidth || circleWidth === boxWidth) return;\n      this.setState({\n        boxWidth,\n        circleWidth,\n      });\n      this.setDragOnChange(checkedProp != null ? checkedProp : checked);\n      // this.setDragOnChange(checked)\n      clearInterval(nodesInterval);\n    }, 5);\n  }\n\n  render() {\n    const { checked, drag, inside, hide } = this.state;\n    const dragStyle =\n      drag !== null || checked || this.props.checked\n        ? { left: `${drag}px` }\n        : null;\n    return (\n      <DSToggleRender\n        {...this.props}\n        defaultState={this.props.checked}\n        checked={checked}\n        containerRef={this.box}\n        hide={hide}\n        dragStyle={dragStyle}\n        handRef={this.circle}\n        inside={inside}\n        onBlur={this.onBlur}\n        onChange={this.onChange}\n        onFocus={this.onFocus}\n        onMouseDown={this.onMouseDown}\n        onMouseEnter={this.onMouseEnter}\n        onMouseLeave={this.onMouseLeave}\n        onTouchCancel={this.onTouchCancel}\n        onTouchEnd={this.onTouchEnd}\n        onTouchMove={this.onTouchMove}\n        onTouchStart={this.onTouchStart}\n      />\n    );\n  }\n}\n\nDSToggleImpl.propTypes = togglePropTypes;\n\nexport default DSToggleImpl;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport ToggleImpl from './DSToggleImpl';\nimport { sizes } from '../../utils/prop-types';\n\nconst DSToggle = ({\n  containerProps = {},\n  hasError = false,\n  readOnly = false,\n  disabled = false,\n  checked = undefined,\n  labelOn = 'ON',\n  labelOff = 'OFF',\n  name = '',\n  value = '',\n  size = 's',\n  ...otherProps\n}) => (\n  <ToggleImpl\n    {...otherProps}\n    checked={checked}\n    containerProps={containerProps}\n    disabled={disabled}\n    hasError={hasError}\n    labelOff={labelOff}\n    labelOn={labelOn}\n    name={name}\n    readOnly={readOnly}\n    size={size}\n    value={value}\n  />\n);\n\nDSToggle.propTypes = {\n  /**\n   * Set of Properties attached to the main container\n   */\n  containerProps: PropTypes.shape({}),\n  /**\n   * Whether the toggle has error or not\n   */\n  hasError: PropTypes.bool,\n  /**\n   * Whether the toggle is read only or not\n   */\n  readOnly: PropTypes.bool,\n  /**\n   * Whether the toggle is disabled or not\n   */\n  disabled: PropTypes.bool,\n  /**\n   * Whether the toggle is checked or not\n   */\n  checked: PropTypes.bool,\n  /**\n   * Allows a function that is triggered once the toggle changes\n   */\n  onChange: PropTypes.func,\n  /**\n   * Label to show when the toggle is ON\n   */\n  labelOn: PropTypes.string,\n  /**\n   * Label to show when the toggle is OFF\n   */\n  labelOff: PropTypes.string,\n  /**\n   * Default value once the component is initialized\n   */\n  value: PropTypes.string,\n  /**\n   * ['s', 'm', 'l']\n   */\n  size: PropTypes.oneOf(sizes),\n  /**\n   * Input name\n   */\n  name: PropTypes.string,\n};\n\nexport default DSToggle;\n","export const TooltipType = {\n  TOOLTIP: 'tooltip',\n  TOOLBAR: 'toolbar',\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  aggregatedClasses,\n  convertPropToCssClassName,\n} from '@elliemae/ds-classnames';\nimport DSPopper, {\n  PopperPositions,\n  PopperInteractions,\n} from '@elliemae/ds-basic/Popper';\nimport getComponentFromProps from '@elliemae/ds-utilities/getComponentFromProps';\nimport {\n  DEFAULT_DELAY_OPEN,\n  DEFAULT_DELAY_CLOSE,\n} from '@elliemae/ds-shared/constants';\nimport { TooltipType } from './TooltipType';\nimport { interactions } from '../Popper/interaction';\nimport { positions } from '../Popper/positions';\n\nconst blockName = 'tooltip';\n\nconst TooltipContainer = aggregatedClasses('div')(blockName);\nconst TooltipText = aggregatedClasses('span')(blockName, 'text');\n\nconst DSTooltip = ({\n  containerProps = {},\n  innerRef,\n  placement = PopperPositions.TOP,\n  title = '',\n  delayClose = DEFAULT_DELAY_CLOSE,\n  delayOpen = DEFAULT_DELAY_OPEN,\n  interactionType = PopperInteractions.HOVER,\n  triggerComponent = null,\n  className = '',\n  isOpen = undefined,\n  onOpen = () => null,\n  springAnimationComponent = undefined,\n  tooltipType = TooltipType.TOOLTIP,\n  showArrow = true,\n  zIndex,\n  ...otherTooltipProps\n}) => {\n  const { cssClassName: tooltipBlockName } = convertPropToCssClassName(\n    blockName,\n  );\n\n  let Content = title;\n  if (typeof title === 'string') {\n    Content = <TooltipText>{title}</TooltipText>;\n  }\n\n  return (\n    <DSPopper\n      blockName={tooltipBlockName}\n      contentComponent={\n        <TooltipContainer\n          {...containerProps}\n          {...otherTooltipProps}\n          className={`tooltip-container--${tooltipType} ${className}`}\n          innerRef={innerRef}\n        >\n          {Content}\n        </TooltipContainer>\n      }\n      delayClose={delayClose}\n      delayOpen={delayOpen}\n      interactionType={interactionType}\n      isOpen={isOpen}\n      onOpen={onOpen}\n      placement={placement}\n      showArrow={tooltipType === TooltipType.TOOLTIP ? showArrow : false}\n      springAnimationComponent={springAnimationComponent}\n      triggerComponent={getComponentFromProps(triggerComponent)}\n      zIndex={zIndex}\n    />\n  );\n};\n\nDSTooltip.propTypes = {\n  containerProps: PropTypes.shape({}),\n  /** Tooltip position */\n  placement: PropTypes.oneOf(positions),\n  /** Tooltip content */\n  title: PropTypes.oneOfType([PropTypes.string, PropTypes.element]),\n  /** Delay to close the tooltip */\n  delayClose: PropTypes.string,\n  /** Delay to open the tooltip */\n  delayOpen: PropTypes.string,\n  /** A type indicating how to open/close the tooltip */\n  interactionType: PropTypes.oneOf(interactions),\n  /** The component that will trigger the open/close interaction */\n  triggerComponent: PropTypes.element,\n  /** Whether the tooltip is visible or not */\n  isOpen: PropTypes.bool,\n  /** Handler when the tooltip opens */\n  onOpen: PropTypes.func,\n  /** Spring animation component */\n  springAnimationComponent: PropTypes.element,\n  /** Whether to show an arrow or not */\n  showArrow: PropTypes.bool,\n  className: PropTypes.string,\n  tooltipType: PropTypes.string,\n  zIndex: PropTypes.number,\n  innerRef: PropTypes.oneOfType([\n    PropTypes.func,\n    PropTypes.shape({ current: PropTypes.any }),\n  ]),\n};\n\nexport { TooltipType, TooltipContainer, TooltipText };\nexport default DSTooltip;\n","export const DEFAULT_DELAY_OPEN = 200;\nexport const DEFAULT_DELAY_CLOSE = 300;\nexport const sizeOptions = ['small', 'medium', 'large', 'x-large'];\n"],"sourceRoot":""}
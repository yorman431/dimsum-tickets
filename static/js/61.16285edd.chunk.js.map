{"version":3,"sources":["DataGrid/customRenderers/ToggleCell.js","../../../../src/Toggle/toggleHelper.tsx","../../../src/onClickHandlerForNonInteractiveElements.tsx","../../../../src/Toggle/DSToggleRender.tsx","../../../../src/Toggle/props.tsx","../../../../src/Toggle/DSToggleImpl.tsx","../../../../src/Toggle/DSToggle.tsx","../../../src/TooltipType.tsx","../../../src/DSTooltip.tsx","../../../src/constants.tsx"],"names":["ToggleCell","customHandlers","onToggle","rowData","metaData","entityType","activeField","id","isChecked","get","dataProps","containerProps","onChange","useCallback","event","stopPropagation","checked","cleanDrag","startPoint","isDragging","dragStartingPoints","circleWidth","boxWidth","drag","onClickHandler","role","tabIndex","onClick","onKeyPress","keycode","className","style","hasError","hide","readOnly","disabled","onBlur","onFocus","onMouseDown","onMouseEnter","onMouseLeave","onTouchCancel","onTouchEnd","onTouchMove","onTouchStart","labelOn","labelOff","dragStyle","containerRef","handRef","name","value","size","defaultState","convertPropToCssClassName","cssClassName","classNameBlock","classNameElement","allowChange","label","interactionType","title","triggerComponent","data-testid","aria-disabled","defaultChecked","defaultValue","onClickHandlerForNonInteractiveElements","ref","aria-checked","type","togglePropTypes","PropTypes","string","DSToggleImpl","move","clientX","calculateDrag","inside","isValidDrag","e","newCheck","window","props","React","this","state","prevState","prevProps","checkedProp","nodesInterval","setInterval","clearInterval","left","Component","DSToggle","otherProps","undefined","describe","DSToggleWithSchema","TooltipType","TooltipContainer","aggregatedClasses","propsToRemoveFromFinalElement","TooltipText","DSTooltip","innerRef","placement","PopperPositions","TOP","delayClose","delayOpen","PopperInteractions","HOVER","isOpen","onOpen","springAnimationComponent","tooltipType","showArrow","zIndex","otherTooltipProps","tooltipBlockName","Content","blockName","contentComponent","getComponentFromProps","tooltipProps","TooltipWithSchema"],"mappings":"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","file":"static/js/61.16285edd.chunk.js","sourcesContent":["import React, { useCallback } from 'react';\nimport DSToggle from '@elliemae/ds-basic/form/Toggle';\nimport PropTypes from 'prop-types';\nimport { get } from 'lodash';\n\nconst ToggleCell = ({\n  customHandlers: { onToggle = () => {} },\n  metaData: { rowData },\n  entityType = 'workflow-rule',\n  activeField = 'active',\n}) => {\n  const { id } = rowData;\n  const isChecked = get(rowData, activeField);\n  const dataProps = {\n    'data-testid': `${entityType}-${activeField}-toggle`,\n    [`data-${entityType}Id`]: id,\n    containerProps: {\n      'data-testid': `${entityType}-${activeField}-toggle-container`,\n    },\n  };\n  const onChange = useCallback(\n    (event) => {\n      event.stopPropagation();\n      onToggle(rowData);\n    },\n    [onToggle, rowData],\n  );\n  return (\n    <DSToggle\n      {...dataProps}\n      checked={isChecked}\n      onChange={onChange}\n    />\n  );\n};\nToggleCell.propTypes = {\n  customHandlers: PropTypes.shape({\n    onToggle: PropTypes.func,\n  }),\n  metaData: PropTypes.shape({\n    rowData: PropTypes.object,\n  }),\n  entityType: PropTypes.string.isRequired,\n  activeField: PropTypes.string,\n  theme: PropTypes.object,\n};\n\nexport default ToggleCell;\n","export const isValidDrag = ({\n  inside,\n  circleWidth,\n  drag,\n  checked,\n  boxWidth,\n}) => {\n  const difference = boxWidth - circleWidth;\n  return checked\n    ? !inside && -drag > difference / 2\n    : !inside && drag > boxWidth / 3;\n};\n\nexport const cleanDrag = () => ({\n  startPoint: null,\n  isDragging: false,\n});\n\n// eslint-disable-next-line complexity\nexport const calculateDrag = (\n  clientX,\n  { startPoint, checked, isDragging, boxWidth, circleWidth },\n) => {\n  if (!isDragging) return null;\n  const move = startPoint - clientX;\n  const drag = !checked ? clientX - startPoint : boxWidth - circleWidth - move;\n  if (!checked && clientX > 0 && clientX > startPoint && drag < boxWidth * 0.7)\n    return drag;\n  if (checked && clientX > 0 && clientX < startPoint && move < boxWidth * 0.7)\n    return drag;\n  return null;\n};\n\nexport const dragStartingPoints = (checked) => ({ circleWidth, boxWidth }) => {\n  if (checked) return { drag: boxWidth - circleWidth };\n  return {\n    drag: 0,\n  };\n};\n","/**\n * onClickHandler: callback\n *\n * @param onClickHandler\n */\nexport default onClickHandler => ({\n  role: 'button',\n  tabIndex: '0',\n  onClick: onClickHandler,\n  onKeyPress: event => {\n    event.stopPropagation();\n    const { keycode, key } = event;\n    if (key === 'Enter') onClickHandler(event);\n    else if (keycode === 13) onClickHandler(event);\n  },\n});\n","/* eslint-disable react/prop-types */\n/* eslint-disable complexity */\nimport React from 'react';\nimport onClickHandlerForNonInteractiveElements from '@elliemae/ds-utilities/onClickHandlerForNonInteractiveElements';\nimport { convertPropToCssClassName } from '@elliemae/ds-classnames';\nimport DSTooltip from '@elliemae/ds-tooltip';\n\nconst DSToggleRender = ({\n  containerProps,\n  id,\n  className = '',\n  style = {},\n  hasError = false,\n  hide,\n  readOnly = false,\n  disabled = false,\n  checked = false,\n  onBlur = () => null,\n  onFocus = () => null,\n  onChange = () => null,\n  onMouseDown = () => null,\n  onMouseEnter = () => null,\n  onMouseLeave = () => null,\n  onTouchCancel = () => null,\n  onTouchEnd = () => null,\n  onTouchMove = () => null,\n  onTouchStart = () => null,\n  labelOn = 'ON',\n  labelOff = 'OFF',\n  dragStyle = {},\n  containerRef = null,\n  handRef = null,\n  name = '',\n  value = '',\n  size = 's',\n  defaultState,\n}) => {\n  const {\n    cssClassName,\n    classNameBlock,\n    classNameElement,\n  } = convertPropToCssClassName('form-element-toggle', className, {\n    hasError,\n    readOnly,\n    disabled,\n    checked,\n    id,\n    size,\n  });\n  const allowChange = disabled || readOnly;\n\n  let label = checked ? (\n    <div className={classNameElement('icon-on')}>{labelOn}</div>\n  ) : (\n    <div className={classNameElement('icon-off')}>{labelOff}</div>\n  );\n\n  if (readOnly) {\n    label = (\n      <DSTooltip\n        interactionType=\"hover\"\n        title=\"Read Only\"\n        triggerComponent={label}\n      />\n    );\n  }\n\n  return (\n    <div\n      data-testid=\"em-ds-toggle\"\n      {...containerProps}\n      aria-disabled={disabled}\n      defaultChecked={checked}\n      defaultValue={value}\n      {...onClickHandlerForNonInteractiveElements(\n        allowChange ? null : onChange,\n      )}\n      ref={containerRef}\n      className={`${cssClassName} ${\n        defaultState ? 'default-state-checked' : ''\n      }${hide ? ' ds-form-element-toggle-hide' : ''}`}\n      onBlur={onBlur}\n      onFocus={onFocus}\n      // eslint-disable-next-line jsx-a11y/role-has-required-aria-props\n      aria-checked={checked}\n      role=\"checkbox\"\n      tabIndex={0}\n    >\n      <div className={classNameBlock('box')}>{label}</div>\n      <div\n        ref={handRef}\n        aria-checked={checked}\n        aria-disabled={disabled}\n        className={`${classNameElement('input')} ${\n          defaultState ? 'default-state-checked' : ''\n        }`}\n        onMouseDown={allowChange ? null : onMouseDown}\n        onMouseEnter={allowChange ? null : onMouseEnter}\n        onMouseLeave={allowChange ? null : onMouseLeave}\n        onTouchCancel={allowChange ? null : onTouchCancel}\n        onTouchEnd={allowChange ? null : onTouchEnd}\n        onTouchMove={allowChange ? null : onTouchMove}\n        onTouchStart={allowChange ? null : onTouchStart}\n        style={{\n          ...style,\n          ...dragStyle,\n        }}\n      />\n      <input\n        className={classNameElement('hidden-checkbox')}\n        defaultChecked={checked}\n        defaultValue={value}\n        name={name}\n        type=\"checkbox\"\n      />\n    </div>\n  );\n};\n\nexport default DSToggleRender;\n","import PropTypes from 'prop-types';\nimport { dsBasicSizes } from '../../../../shared-configs/prop-types';\n\nexport const togglePropTypes = {\n  /**\n   * Set of Properties attached to the main container\n   */\n  containerProps: PropTypes.shape({}),\n  /**\n   * Whether the toggle has error or not\n   */\n  hasError: PropTypes.bool,\n  /**\n   * Whether the toggle is read only or not\n   */\n  readOnly: PropTypes.bool,\n  /**\n   * Whether the toggle is disabled or not\n   */\n  disabled: PropTypes.bool,\n  /**\n   * Whether the toggle is checked or not\n   */\n  checked: PropTypes.bool,\n  /**\n   * Allows a function that is triggered once the toggle changes\n   */\n  onChange: PropTypes.func,\n  /**\n   * Label to show when the toggle is ON\n   */\n  labelOn: PropTypes.string,\n  /**\n   * Label to show when the toggle is OFF\n   */\n  labelOff: PropTypes.string,\n  /**\n   * Default value once the component is initialized\n   */\n  value: PropTypes.string,\n  /**\n   * ['s', 'm', 'l']\n   */\n  size: PropTypes.oneOf(dsBasicSizes),\n  /**\n   * Input name\n   */\n  name: PropTypes.string,\n};\n","/* eslint-disable max-lines */\nimport React, { Component } from 'react';\nimport {\n  isValidDrag,\n  cleanDrag,\n  calculateDrag,\n  dragStartingPoints,\n} from './toggleHelper';\nimport DSToggleRender from './DSToggleRender';\nimport { togglePropTypes } from './props';\n\nclass DSToggleImpl extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      checked: props.checked || false,\n      inside: false,\n      isDragging: false,\n      // prevent draw of toggle before drag handle positioning calculations\n      hide: true,\n      drag: null,\n      startPoint: null,\n      circleWidth: null,\n      boxWidth: null,\n    };\n    this.circle = React.createRef();\n    this.box = React.createRef();\n  }\n\n  componentDidMount() {\n    this.verifyElements();\n  }\n\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    if (\n      this.state.hide &&\n      this.state.circleWidth &&\n      this.state.boxWidth &&\n      prevState.hide &&\n      this.state.drag !== null\n    ) {\n      // eslint-disable-next-line react/no-did-update-set-state\n      this.setState({ hide: false });\n    }\n    if (snapshot) {\n      this.verifyElements();\n    }\n  }\n\n  /**\n   * ******************************************************\n   * Drag\n   * ****************************************************** *\n   *\n   * @param clientX\n   */\n  onDragStart = (clientX) => {\n    const {\n      startPoint,\n      checked,\n      isDragging,\n      boxWidth,\n      circleWidth,\n    } = this.state;\n    // const { checked: checkedProp, } = this.props\n    const drag = calculateDrag(clientX, {\n      startPoint,\n      checked,\n      isDragging,\n      boxWidth,\n      circleWidth,\n    });\n    if (drag) this.setState({ drag });\n    // else this.setDragOnChange(checkedProp != null ? checkedProp : checked) // set initial position\n    else this.setDragOnChange(checked); // set initial position\n  };\n\n  onDragStop = (e) => {\n    const { checked } = this.state;\n    // const { checked: checkedProp, } = this.props\n    if (isValidDrag(this.state)) {\n      this.onChange(e);\n      this.setState(cleanDrag);\n      // } else this.setDragOnChange(checkedProp != null ? checkedProp : checked) // set initial position\n    } else this.setDragOnChange(checked); // set initial position\n  };\n\n  /**\n   * ******************************************************\n   * StandardEvents\n   * ****************************************************** *\n   *\n   * @param e\n   */\n  onBlur = (e) => {\n    const { onBlur, id } = this.props;\n    if (onBlur) onBlur(e, id);\n  };\n\n  onFocus = (e) => {\n    const { onFocus, id } = this.props;\n    if (onFocus) onFocus(e, id);\n  };\n\n  onChange = (e) => {\n    const { checked } = this.state;\n    const {\n      onChange,\n      id,\n      value,\n      // checked: checkedProp,\n    } = this.props;\n    const newCheck = !checked;\n    // this.setState({\n    //   checked: checkedProp != null ? checkedProp : newCheck,\n    // })\n    this.setState({\n      checked: newCheck,\n    });\n    e.target.value = value;\n    e.target.checked = newCheck;\n    e.checked = newCheck;\n    onChange(e, id);\n    // this.setDragOnChange(checkedProp != null ? checkedProp : newCheck) // set new position\n    this.setDragOnChange(newCheck); // set new position\n  };\n\n  /** ******************************************************\n      MouseEvents\n   ******************************************************* * */\n  onMouseEnter = () => {\n    this.setState({ inside: true });\n  };\n\n  onMouseLeave = () => {\n    this.setState({ inside: false });\n  };\n\n  onMouseMove = (event) => {\n    event.preventDefault();\n    this.onDragStart(event.clientX);\n  };\n\n  onMouseDown = (event) => {\n    this.onDragStart(event.clientX);\n    this.setState({ startPoint: event.clientX, isDragging: true });\n    window.addEventListener('mousemove', this.onMouseMove);\n    window.addEventListener('mouseup', this.onMouseUp);\n  };\n\n  onMouseUp = (event) => {\n    this.onDragStop(event);\n    window.removeEventListener('mousemove', this.onMouseMove);\n    window.removeEventListener('mouseup', this.onMouseUp);\n  };\n\n  /** ******************************************************\n      Touch\n   ******************************************************* * */\n  onTouchCancel = () => {\n    this.setState({ inside: false });\n  };\n\n  onTouchEnd = (event) => {\n    event.preventDefault();\n    this.onDragStop(event);\n  };\n\n  onTouchMove = (event) => {\n    this.onDragStart(event.touches[0].clientX);\n  };\n\n  onTouchStart = (event) => {\n    this.onDragStart(event.touches[0].clientX);\n    this.setState({ startPoint: event.touches[0].clientX, isDragging: true });\n  };\n\n  static getDerivedStateFromProps(props, state) {\n    if (props.checked === true || props.checked === false) {\n      return {\n        checked: props.checked,\n        ...dragStartingPoints(props.checked)(state),\n      };\n    }\n    return null;\n  }\n\n  getSnapshotBeforeUpdate(prevProps) {\n    const { size } = this.props;\n    if (prevProps.size !== size) {\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * ******************************************************\n   * other\n   * ****************************************************** *\n   *\n   * @param currentCheckState\n   */\n  setDragOnChange(currentCheckState) {\n    this.setState(dragStartingPoints(currentCheckState));\n  }\n\n  verifyElements() {\n    const { checked } = this.state;\n    const { checked: checkedProp } = this.props;\n    const nodesInterval = setInterval(() => {\n      // !important it checks when nodes are availables\n      if (\n        !this.circle ||\n        !this.box ||\n        !this.circle.current ||\n        !this.box.current\n      )\n        return;\n      const {\n        current: { clientWidth: circleWidth },\n      } = this.circle;\n      const {\n        current: { clientWidth: boxWidth },\n      } = this.box;\n      if (!circleWidth || !boxWidth || circleWidth === boxWidth) return;\n      this.setState({\n        boxWidth,\n        circleWidth,\n      });\n      this.setDragOnChange(checkedProp != null ? checkedProp : checked);\n      // this.setDragOnChange(checked)\n      clearInterval(nodesInterval);\n    }, 5);\n  }\n\n  render() {\n    const { checked, drag, inside, hide } = this.state;\n    const dragStyle =\n      drag !== null || checked || this.props.checked\n        ? { left: `${drag}px` }\n        : null;\n    return (\n      <DSToggleRender\n        {...this.props}\n        defaultState={this.props.checked}\n        checked={checked}\n        containerRef={this.box}\n        hide={hide}\n        dragStyle={dragStyle}\n        handRef={this.circle}\n        inside={inside}\n        onBlur={this.onBlur}\n        onChange={this.onChange}\n        onFocus={this.onFocus}\n        onMouseDown={this.onMouseDown}\n        onMouseEnter={this.onMouseEnter}\n        onMouseLeave={this.onMouseLeave}\n        onTouchCancel={this.onTouchCancel}\n        onTouchEnd={this.onTouchEnd}\n        onTouchMove={this.onTouchMove}\n        onTouchStart={this.onTouchStart}\n      />\n    );\n  }\n}\n\nDSToggleImpl.propTypes = togglePropTypes;\n\nexport default DSToggleImpl;\n","import React from 'react';\nimport { PropTypes, describe } from 'react-desc';\nimport ToggleImpl from './DSToggleImpl';\nimport { dsBasicSizes } from '../../../../shared-configs/prop-types';\n\nconst DSToggle = ({\n  containerProps,\n  hasError,\n  readOnly,\n  disabled,\n  checked,\n  labelOn,\n  labelOff,\n  name,\n  value,\n  size,\n  ...otherProps\n}) => (\n  <ToggleImpl\n    {...otherProps}\n    checked={checked}\n    containerProps={containerProps}\n    disabled={disabled}\n    hasError={hasError}\n    labelOff={labelOff}\n    labelOn={labelOn}\n    name={name}\n    readOnly={readOnly}\n    size={size}\n    value={value}\n  />\n);\n\nDSToggle.defaultProps = {\n  labelOn: 'ON',\n  labelOff: 'OFF',\n  size: 's',\n  hasError: false,\n  readOnly: false,\n  disabled: false,\n  checked: undefined,\n};\n\nconst props = {\n  /**\n   * Set of Properties attached to the main container\n   */\n  containerProps: PropTypes.shape({}).description(\n    'Set of Properties attached to the main container',\n  ),\n  /**\n   * Whether the toggle has error or not\n   */\n  hasError: PropTypes.bool.description('Whether the toggle has error or not'),\n  /**\n   * Whether the toggle is read only or not\n   */\n  readOnly: PropTypes.bool.description(\n    'Whether the toggle is read only or not',\n  ),\n  /**\n   * Whether the toggle is disabled or not\n   */\n  disabled: PropTypes.bool.description('Whether the toggle is disabled or not'),\n  /**\n   * Whether the toggle is checked or not\n   */\n  checked: PropTypes.bool.description('Whether the toggle is checked or not'),\n  /**\n   * Allows a function that is triggered once the toggle changes\n   */\n  onChange: PropTypes.func.description(\n    'Allows a function that is triggered once the toggle changes',\n  ),\n  /**\n   * Label to show when the toggle is ON\n   */\n  labelOn: PropTypes.string.description('Label to show when the toggle is ON'),\n  /**\n   * Label to show when the toggle is OFF\n   */\n  labelOff: PropTypes.string.description(\n    'Label to show when the toggle is OFF',\n  ),\n  /**\n   * Default value once the component is initialized\n   */\n  value: PropTypes.string.description(\n    'Default value once the component is initialized',\n  ),\n  /**\n   * ['s', 'm', 'l']\n   */\n  size: PropTypes.oneOf(dsBasicSizes).description(\"['s', 'm', 'l']\"),\n  /**\n   * Input name\n   */\n  name: PropTypes.string.description('Input name'),\n};\n\nDSToggle.propTypes = props;\n\nconst DSToggleWithSchema = describe(DSToggle);\n\nDSToggleWithSchema.propTypes = props;\n\nexport default DSToggle;\n\nexport { DSToggleWithSchema };\n","export const TooltipType = {\n  TOOLTIP: 'tooltip',\n  TOOLBAR: 'toolbar',\n};\n","/* eslint-disable max-lines */\nimport React from 'react';\nimport { describe, PropTypes } from 'react-desc';\nimport {\n  aggregatedClasses,\n  convertPropToCssClassName,\n} from '@elliemae/ds-classnames';\nimport getComponentFromProps from '@elliemae/ds-utilities/getComponentFromProps';\nimport {\n  DEFAULT_DELAY_OPEN,\n  DEFAULT_DELAY_CLOSE,\n} from '@elliemae/ds-shared/constants';\nimport DSPopper, {\n  PopperPositions,\n  PopperInteractions,\n} from '@elliemae/ds-popper';\nimport { interactions } from '@elliemae/ds-popper/interaction';\nimport { positions } from '@elliemae/ds-popper/positions';\nimport { TooltipType } from './TooltipType';\n\nconst blockName = 'tooltip';\n\nconst TooltipContainer = aggregatedClasses('div')(blockName, false, false, {\n  propsToRemoveFromFinalElement: ['isHovered', 'isDragged'],\n});\nconst TooltipText = aggregatedClasses('span')(blockName, 'text', false, {\n  propsToRemoveFromFinalElement: ['isHovered', 'isDragged'],\n});\n\nconst DSTooltip = ({\n  containerProps = {},\n  innerRef,\n  placement = PopperPositions.TOP,\n  title = '',\n  delayClose = DEFAULT_DELAY_CLOSE,\n  delayOpen = DEFAULT_DELAY_OPEN,\n  interactionType = PopperInteractions.HOVER,\n  triggerComponent = null,\n  className = '',\n  isOpen = undefined,\n  onOpen = () => null,\n  springAnimationComponent = undefined,\n  tooltipType = TooltipType.TOOLTIP,\n  showArrow = true,\n  zIndex,\n  ...otherTooltipProps\n}) => {\n  const { cssClassName: tooltipBlockName } = convertPropToCssClassName(\n    blockName,\n  );\n\n  let Content = title;\n  if (typeof title === 'string') {\n    Content = <TooltipText>{title}</TooltipText>;\n  }\n  return (\n    <DSPopper\n      blockName={tooltipBlockName}\n      contentComponent={\n        <TooltipContainer\n          {...containerProps}\n          {...otherTooltipProps}\n          className={`tooltip-container--${tooltipType} ${className}`}\n          innerRef={innerRef}\n        >\n          {Content}\n        </TooltipContainer>\n      }\n      delayClose={delayClose}\n      delayOpen={delayOpen}\n      interactionType={interactionType}\n      isOpen={isOpen}\n      onOpen={onOpen}\n      placement={placement}\n      showArrow={tooltipType === TooltipType.TOOLTIP ? showArrow : false}\n      springAnimationComponent={springAnimationComponent}\n      triggerComponent={getComponentFromProps(triggerComponent)}\n      zIndex={zIndex}\n    />\n  );\n};\n\nconst tooltipProps = {\n  containerProps: PropTypes.object.description(\n    'Set of Properties attached to the main container',\n  ),\n  placement: PropTypes.oneOf(positions)\n    .description('Tooltip position')\n    .defaultValue(PopperPositions.TOP),\n  title: PropTypes.oneOfType([PropTypes.string, PropTypes.element]).description(\n    'Tooltip content',\n  ).isRequired,\n  delayClose: PropTypes.string\n    .description('Delay to close the tooltip')\n    .defaultValue(DEFAULT_DELAY_CLOSE),\n  delayOpen: PropTypes.string\n    .description('Delay to open the tooltip ')\n    .defaultValue(DEFAULT_DELAY_OPEN),\n  interactionType: PropTypes.oneOf(interactions)\n    .description('A type indicating how to open/close the tooltip')\n    .defaultValue(PopperInteractions.HOVER),\n  triggerComponent: PropTypes.element.description(\n    'The component that will open/close the tooltip',\n  ).isRequired,\n  isOpen: PropTypes.bool\n    .description('Whether the tooltip is visible or not')\n    .defaultValue(undefined),\n  onOpen: PropTypes.func.description('Handler when the tooltip opens'),\n  springAnimationComponent: PropTypes.element.description(\n    'Spring animation component',\n  ),\n  showArrow: PropTypes.bool\n    .description('Whether to show an arrow or not')\n    .defaultValue(true),\n  className: PropTypes.string.description('css class'),\n  tooltipType: PropTypes.oneOf(['tooltip', 'toolbar'])\n    .description('Type of tooltip')\n    .defaultValue(TooltipType.TOOLTIP),\n  zIndex: PropTypes.number\n    .description('z-index value assigned to the tooltip')\n    .defaultValue(undefined),\n  innerRef: PropTypes.oneOfType([PropTypes.func, PropTypes.object]).description(\n    'Ref to the tooltip container element',\n  ),\n};\n\nDSTooltip.propTypes = tooltipProps;\n\nconst TooltipWithSchema = describe(DSTooltip);\nTooltipWithSchema.propTypes = tooltipProps;\n\nexport { DSTooltip, TooltipContainer, TooltipText, TooltipWithSchema };\nexport default DSTooltip;\n","export const DEFAULT_DELAY_OPEN = 200;\nexport const DEFAULT_DELAY_CLOSE = 300;\nexport const sizeOptions = ['small', 'medium', 'large', 'x-large'];\n"],"sourceRoot":""}
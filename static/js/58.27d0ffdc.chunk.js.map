{"version":3,"sources":["PageHeader/Toolbars/ThreeButtonsToolbar.js","../../../src/system.tsx","../../../src/decorateToolbarChildren.tsx","../../../src/DSToolbar.tsx"],"names":["memo","withDepth","data-testid","labelText","setRef","ref","value","isFunction","mergeRefs","refs","node","children","extraProps","component","cloneElement","className","ToolbarContainer","alignment","size","DSToolbar","containerProps","innerRef","autoFocusOnMount","otherProps","containerRef","useRef","getContainer","keyBindings","Tab","orientation","classProps","decorateToolbarChildren","toolbarProps","PropTypes","describe","ToolbarWithSchema"],"mappings":"iGAAA,6CAqBeA,0BAjBa,kBAC1B,kBAAC,IAAD,CAAWC,WAAW,GACpB,kBAAC,IAAD,CACEC,cAAY,8BACZC,UAAU,wBAEZ,kBAAC,IAAD,CACED,cAAY,8BACZC,UAAU,WAEZ,kBAAC,IAAD,CACED,cAAY,0BACZC,UAAU,kB,0HCdHC,EAAS,SAACC,EAAKC,GACtBC,qBAAJ,GACEF,KACSA,IACTA,cAIG,SAASG,IAAmB,2BAANC,EAAM,yBAANA,EAAM,gBACjC,OAAO,SAAAC,GACL,GACAD,WAAa,SAAAJ,GACPE,qBAAJ,GACEF,KACSA,IACTA,mB,yoBCfO,SAACM,GAAD,IAAWC,EAAX,iEACb,oBAEE,SAAAC,GAAS,OACPA,EACIC,uBAAaD,EAAW,EAAZ,UAEPA,EAFO,WAGVE,UAAW,GAAF,OAAKF,QAAL,8BALR,IAHE,Q,uJCUTG,G,UAAmB,mBAFzB,UAEyB,MAGvB,kBAAGf,EAAH,YAAcgB,EAAd,YAAyBC,EAAzB,iBACE,iBAAkBjB,GADpB,8CAOIkB,EAAY,SAAC,GASb,QARJC,sBAQI,MARa,GAQb,EAPJC,EAOI,EAPJA,SAOI,IANJpB,iBAMI,aALJgB,iBAKI,MALQ,QAKR,MAJJK,wBAII,aAHJX,gBAGI,MAHO,GAGP,MAFJO,YAEI,MAFG,SAEH,EADDK,EACC,0GACEC,EAAeC,iBAArB,MACA,OACE,uBACEH,iBADF,EAEEI,aAAc,kBAAMF,EAAN,SACdG,YAAa,CACXC,IAAK,QAEPC,YAAY,cAEZ,wCAGEC,WAAY,CAAE7B,UAAF,EAAagB,UAAb,EAAwBC,QACpCG,SAAUb,YAAUa,EAAUG,KAE7BO,YAfP,MAqBIC,EAAe,CACnBZ,eAAgBa,+BADG,oDAInBhC,UAAWgC,8EAJQ,GAOnBhB,UAAWgB,kBAAgB,CAAC,QAAjBA,6EAPQ,SAUnBf,KAAMe,kBAAgB,CAAC,SAAjBA,qDAVa,UAanBX,iBAAkBW,kGAbC,GAgBnBtB,SAAUsB,sBAAoB,CAC5BA,YAD4B,MAE5BA,YAF4B,KAG5BA,YAHQA,oCAhBS,WAqBnBZ,SAAUY,wEAKZd,cAE0Be,mBAASf,GACnCgB","file":"static/js/58.27d0ffdc.chunk.js","sourcesContent":["import React, { memo } from 'react';\nimport DSToolbar from '@elliemae/ds-basic/Toolbar';\nimport DSButton from '@elliemae/ds-basic/Button';\n\nconst ThreeButtonsToolbar = () => (\n  <DSToolbar withDepth={false}>\n    <DSButton\n      data-testid=\"workflow-rules-toggle-rules\"\n      labelText=\"Activate/Deactivate\"\n    />\n    <DSButton\n      data-testid=\"workflow-rules-delete-rules\"\n      labelText=\"Delete\"\n    />\n    <DSButton\n      data-testid=\"workflow-rules-add-rule\"\n      labelText=\"New Rule\"\n    />\n  </DSToolbar>\n);\n\nexport default memo(ThreeButtonsToolbar);\n","import { isFunction } from './utils';\n\nexport const setRef = (ref, value) => {\n  if (isFunction(ref)) {\n    ref(value);\n  } else if (ref) {\n    ref.current = value;\n  }\n};\n\nexport function mergeRefs(...refs) {\n  return node => {\n    if (!node) return;\n    refs.forEach(ref => {\n      if (isFunction(ref)) {\n        ref(node);\n      } else if (ref) {\n        ref.current = node;\n      }\n    });\n  };\n}\n\nexport function logger(log, message = '') {\n  // eslint-disable-next-line no-console\n  console.log(message, log);\n}\n","import React, { cloneElement } from 'react';\n\nexport default (children, extraProps = {}) =>\n  React.Children.map(\n    children,\n    component =>\n      component\n        ? cloneElement(component, {\n            ...extraProps,\n            ...component.props,\n            className: `${component.props.className} toolbar-item`,\n          })\n        : component,\n    null,\n  );\n","import React, { useRef } from 'react';\nimport { describe, PropTypes } from 'react-desc';\nimport { aggregatedClasses } from '@elliemae/ds-classnames';\nimport FocusGroupProvider from '@elliemae/ds-shared/FocusGroup/FocusGroupManager';\nimport { mergeRefs } from '@elliemae/ds-utilities/system';\nimport decorateToolbarChildren from './decorateToolbarChildren';\nimport Item from './ToolbarItem';\nimport ToolbarGroup from './ToolbarGroup';\nimport Divider from './ToolbarDivider';\n\nconst blockName = 'toolbar';\n\nconst ToolbarContainer = aggregatedClasses('div')(\n  blockName,\n  null,\n  ({ withDepth, alignment, size }) => ({\n    'without-depth': !withDepth,\n    [alignment]: !!alignment,\n    [size]: size,\n  }),\n);\n\nconst DSToolbar = ({\n  containerProps = {},\n  innerRef,\n  withDepth = true,\n  alignment = 'right', // left || right\n  autoFocusOnMount = true,\n  children = [],\n  size = 'normal',\n  ...otherProps\n}) => {\n  const containerRef = useRef(null);\n  return (\n    <FocusGroupProvider\n      autoFocusOnMount={autoFocusOnMount}\n      getContainer={() => containerRef.current}\n      keyBindings={{\n        Tab: 'next',\n      }}\n      orientation=\"horizontal\"\n    >\n      <ToolbarContainer\n        {...containerProps}\n        {...otherProps}\n        classProps={{ withDepth, alignment, size }}\n        innerRef={mergeRefs(innerRef, containerRef)}\n      >\n        {decorateToolbarChildren(children)}\n      </ToolbarContainer>\n    </FocusGroupProvider>\n  );\n};\n\nconst toolbarProps = {\n  containerProps: PropTypes.object.description(\n    'Set of Properties attached to the main container',\n  ),\n  withDepth: PropTypes.bool\n    .description('Shows a shadow rear the toolbar')\n    .defaultValue(true),\n  alignment: PropTypes.oneOf(['right', 'left'])\n    .description('Aligns the toolbar to the left or right')\n    .defaultValue('right'),\n  size: PropTypes.oneOf(['normal', 'compact'])\n    .description('Toolbar size')\n    .defaultValue('normal'),\n  autoFocusOnMount: PropTypes.bool\n    .description('Wheter to focus the component when it mounts or not')\n    .defaultValue(true),\n  children: PropTypes.oneOfType([\n    PropTypes.array,\n    PropTypes.func,\n    PropTypes.node,\n  ]).description('Toolbar items').isRequired,\n  innerRef: PropTypes.object.description(\n    'Ref to the Toolbar container element',\n  ),\n};\n\nDSToolbar.propTypes = toolbarProps;\n\nconst ToolbarWithSchema = describe(DSToolbar);\nToolbarWithSchema.propTypes = toolbarProps;\n\nexport {\n  DSToolbar,\n  Item as ToolbarItem,\n  ToolbarGroup,\n  Divider as ToolbarDivider,\n  ToolbarWithSchema,\n};\n\nexport default DSToolbar;\n"],"sourceRoot":""}
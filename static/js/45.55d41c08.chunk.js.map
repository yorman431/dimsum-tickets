{"version":3,"sources":["PageHeader/Toolbars/ThreeButtonsToolbar.js","PageHeader/PUI-2920.js","../../../../src/Toolbar/decorateToolbarChildren.js","../../../../../../src/PageHeader/v2/components/blocks.js","../../../../src/Toolbar/DSToolbar.js","../../../../../src/form/RequiredMark/RequiredMark.js","../../../../../../src/PageHeader/v2/components/PageHeaderTitle/PageHeaderTitle.js","../../../../../../src/PageHeader/v2/components/PageHeaderMenu/PageHeaderMenu.js","../../../../../../src/PageHeader/v2/components/PageHeaderToolbar/PageHeaderToolbar.js","../../../../../../src/PageHeader/v2/components/PageHeaderBack/PageHeaderBack.js","../../../../../src/PageHeader/v2/PageHeader.js"],"names":["memo","withDepth","data-testid","labelText","pageTitle","toolbar","children","extraProps","component","cloneElement","className","blockName","PageHeaderTitleWrapper","aggregatedClasses","PageHeaderBackWrapper","PageHeaderSummaryWrapper","PageHeaderMenuWrapper","PageHeaderToolbarWrapper","ToolbarContainer","alignment","size","DSToolbar","containerProps","innerRef","autoFocusOnMount","otherProps","containerRef","useRef","getContainer","keyBindings","Tab","orientation","classProps","mergeRefs","decorateToolbarChildren","PropTypes","cssClassName","convertPropToCssClassName","required","optional","PageHeaderTitle","showMarker","rest","value","PageHeaderMenu","PageHeaderToolbar","PageHeaderBack","Container","theme","styled","ContainerWBorder","DSPageHeaderV2","breadcrumbs","backarrow","summary","menu","mainRow","compact","pageTitleRow","useState","activeEditing","setActiveEditing","activeEditingStyle","opacity","pointerEvents","cols","style","rows","onBlur","e","onFocus"],"mappings":"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","file":"static/js/45.55d41c08.chunk.js","sourcesContent":["import React, { memo } from 'react';\nimport DSToolbar from '@elliemae/ds-basic/Toolbar';\nimport DSButton from '@elliemae/ds-basic/Button';\n\nconst ThreeButtonsToolbar = () => (\n  <DSToolbar withDepth={false}>\n    <DSButton\n      data-testid=\"workflow-rules-toggle-rules\"\n      labelText=\"Activate/Deactivate\"\n    />\n    <DSButton\n      data-testid=\"workflow-rules-delete-rules\"\n      labelText=\"Delete\"\n    />\n    <DSButton\n      data-testid=\"workflow-rules-add-rule\"\n      labelText=\"New Rule\"\n    />\n  </DSToolbar>\n);\n\nexport default memo(ThreeButtonsToolbar);\n","import React, { memo } from 'react';\nimport {\n  DSPageHeaderV2,\n  PageHeaderTitle,\n} from '@elliemae/ds-basic/PageHeader';\nimport ThreeButtonsToolbar from './Toolbars/ThreeButtonsToolbar';\n\nconst WorkflowRulesHeader = () => (\n  <DSPageHeaderV2\n    pageTitle={<PageHeaderTitle>Automation Rules</PageHeaderTitle>}\n    toolbar={<ThreeButtonsToolbar />}\n  />\n);\n\nexport default memo(WorkflowRulesHeader);\n","import React, { cloneElement } from 'react';\n\nexport default (children, extraProps = {}) =>\n  React.Children.map(\n    children,\n    component =>\n      component\n        ? cloneElement(component, {\n            ...extraProps,\n            ...component.props,\n            className: `${component.props.className} toolbar-item`,\n          })\n        : component,\n    null,\n  );\n","import { cssPrefix } from '@elliemae/ds-classnames/aggregatedClasses';\nimport { aggregatedClasses } from '@elliemae/ds-classnames';\nimport DSInput from '@elliemae/ds-basic/form/Input';\n\nconst blockName = 'page-header-v2';\n\nexport const PageHeaderTitleWrapper = aggregatedClasses('div')(\n  `${blockName}-title`,\n  'title',\n);\nexport const EditableTitleComponent = aggregatedClasses(DSInput)(\n  `${blockName}-title`,\n  'editable-title',\n);\nexport const PageHeaderBackWrapper = aggregatedClasses('div')(\n  `${blockName}-back`,\n);\nexport const PageHeaderSummaryWrapper = aggregatedClasses('div')(\n  `${blockName}-summary`,\n);\nexport const PageHeaderMenuWrapper = aggregatedClasses('div')(\n  `${blockName}-menu`,\n);\nexport const PageHeaderToolbarWrapper = aggregatedClasses('div')(\n  `${blockName}-toolbar`,\n);\nexport { cssPrefix };\n","import React, { useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport { aggregatedClasses } from '@elliemae/ds-classnames';\nimport FocusGroupProvider from '@elliemae/ds-shared/FocusGroup/FocusGroupManager';\nimport { mergeRefs } from '@elliemae/ds-utilities/system';\nimport decorateToolbarChildren from './decorateToolbarChildren';\nimport Item from './ToolbarItem';\nimport ToolbarGroup from './ToolbarGroup';\nimport Divider from './ToolbarDivider';\n\nconst blockName = 'toolbar';\n\nconst ToolbarContainer = aggregatedClasses('div')(\n  blockName,\n  null,\n  ({ withDepth, alignment, size }) => ({\n    'without-depth': !withDepth,\n    [alignment]: !!alignment,\n    [size]: size,\n  }),\n);\n\nconst DSToolbar = ({\n  containerProps = {},\n  innerRef,\n  withDepth = true,\n  alignment = 'right', // left || right\n  autoFocusOnMount = true,\n  children = [],\n  size = 'normal',\n  ...otherProps\n}) => {\n  const containerRef = useRef(null);\n  return (\n    <FocusGroupProvider\n      autoFocusOnMount={autoFocusOnMount}\n      getContainer={() => containerRef.current}\n      keyBindings={{\n        Tab: 'next',\n      }}\n      orientation=\"horizontal\"\n    >\n      <ToolbarContainer\n        {...containerProps}\n        {...otherProps}\n        classProps={{ withDepth, alignment, size }}\n        innerRef={mergeRefs(innerRef, containerRef)}\n      >\n        {decorateToolbarChildren(children)}\n      </ToolbarContainer>\n    </FocusGroupProvider>\n  );\n};\n\nDSToolbar.propTypes = {\n  containerProps: PropTypes.shape({}),\n  /** Shows a shadow rear the toolbar */\n  withDepth: PropTypes.bool,\n  /** Aligns the toolbar to the left or right */\n  alignment: PropTypes.oneOf(['right', 'left']),\n  /** Toolbar size */\n  size: PropTypes.oneOf(['normal', 'compact']),\n};\n\nexport { Item as ToolbarItem, ToolbarGroup, Divider as ToolbarDivider };\n\nexport default DSToolbar;\n","import React from 'react';\nimport { convertPropToCssClassName } from '@elliemae/ds-classnames';\n\nconst { cssClassName } = convertPropToCssClassName('form-required-mark');\nconst RequiredMark = ({ required = false, optional = false }) => {\n  if (!required && !optional) return null;\n  if (required) {\n    return <span className={`${cssClassName}`}>&#9679;</span>;\n  }\n  return <span className={`${cssClassName} optional-mark`}>&#9900;</span>;\n};\n\nexport default RequiredMark;\n","import React from 'react';\nimport DSTruncatedTooltipText from '@elliemae/ds-basic/TruncatedTooltipText';\nimport RequiredMark from '@elliemae/ds-basic/form/RequiredMark';\nimport { PageHeaderTitleWrapper } from '../blocks';\n\nexport const PageHeaderTitle = ({ children, showMarker = false, ...rest }) => (\n  <PageHeaderTitleWrapper {...rest}>\n    <DSTruncatedTooltipText value={children} />\n    {showMarker && <RequiredMark required />}\n  </PageHeaderTitleWrapper>\n);\n","import React from 'react';\nimport { PageHeaderMenuWrapper } from '../blocks';\n\nexport const PageHeaderMenu = ({ children, ...rest }) => (\n  <PageHeaderMenuWrapper {...rest}>{children}</PageHeaderMenuWrapper>\n);\n","import React from 'react';\nimport { PageHeaderToolbarWrapper } from '../blocks';\n\nexport const PageHeaderToolbar = ({ children, ...rest }) => (\n  <PageHeaderToolbarWrapper {...rest}>{children}</PageHeaderToolbarWrapper>\n);\n","import React from 'react';\nimport { PageHeaderBackWrapper } from '../blocks';\n\nexport const PageHeaderBack = ({ children, ...rest }) => (\n  <PageHeaderBackWrapper {...rest}>{children}</PageHeaderBackWrapper>\n);\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { compact } from 'lodash';\nimport { Grid } from '@elliemae/ds-basic/Grid';\nimport styled from 'styled-components';\nimport theme from '@elliemae/ds-system/theme';\nimport { PageHeaderTitle } from './components/PageHeaderTitle/PageHeaderTitle';\nimport { PageHeaderEditableTitle } from './components/PageHeaderEditableTitle/PageHeaderEditableTitle';\nimport { PageHeaderSummary } from './components/PageHeaderSummary/PageHeaderSummary';\nimport { PageHeaderMenu } from './components/PageHeaderMenu/PageHeaderMenu';\nimport { PageHeaderToolbar } from './components/PageHeaderToolbar/PageHeaderToolbar';\nimport { PageHeaderBack } from './components/PageHeaderBack/PageHeaderBack';\nimport { cssPrefix } from './components/blocks';\n\nconst PageHeaderCustomRenderer = styled.div`\n  width: auto;\n  color: ${theme.colors.brand[800]};\n  font-style: italic;\n  font-size: 0.8rem;\n`;\n\nconst Container = styled.div`\n  width: 100%;\n  margin-bottom: 4px;\n`;\nconst ContainerWBorder = styled.div`\n  width: 100%;\n  padding-bottom: 4px;\n  border-bottom: solid 1px ${theme.colors.neutral[400]};\n`;\nconst getActiveEditing = editing =>\n  editing\n    ? {\n        opacity: 0.5,\n        pointerEvents: 'none',\n      }\n    : {};\n\nexport const DSPageHeaderV2 = ({\n  containerProps = {},\n  breadcrumbs = null,\n  pageTitle = null,\n  backarrow = null,\n  summary = null,\n  toolbar = null,\n  menu = null,\n}) => {\n  const wrapperRow = ['auto', 1];\n  const mainRow = compact([1, '268px']);\n  const pageTitleRow = compact(['auto', menu && '30px', summary && 'auto', 1]);\n  const [activeEditing, setActiveEditing] = useState(false);\n  const activeEditingStyle = getActiveEditing(activeEditing);\n  return (\n    <Container {...containerProps}>\n      <ContainerWBorder>\n        <Grid cols={wrapperRow}>\n          <Grid>\n            <PageHeaderBack style={activeEditingStyle}>\n              {backarrow}\n            </PageHeaderBack>\n          </Grid>\n          <Grid rows={['auto', 'auto']}>\n            <Grid\n              className={`${cssPrefix}-page-header-v2-breadcrumb`}\n              style={activeEditingStyle}\n            >\n              {breadcrumbs}\n            </Grid>\n            <Grid cols={mainRow}>\n              <Grid cols={pageTitleRow}>\n                {React.cloneElement(pageTitle, {\n                  onBlur: e => {\n                    setActiveEditing(false);\n                    if (pageTitle.props.onBlur) pageTitle.props.onBlur(e);\n                  },\n                  onFocus: e => {\n                    setActiveEditing(true);\n                    if (pageTitle.props.onFocus) pageTitle.props.onFocus(e);\n                  },\n                })}\n                {menu && <PageHeaderMenu>{menu}</PageHeaderMenu>}\n                {summary}\n                <div />\n              </Grid>\n              <Grid>\n                <PageHeaderToolbar>{toolbar}</PageHeaderToolbar>\n              </Grid>\n            </Grid>\n          </Grid>\n        </Grid>\n      </ContainerWBorder>\n    </Container>\n  );\n};\n\nDSPageHeaderV2.propTypes = {\n  containerProps: PropTypes.shape({}),\n};\n\nexport {\n  PageHeaderTitle,\n  PageHeaderEditableTitle,\n  PageHeaderSummary,\n  PageHeaderMenu,\n  PageHeaderCustomRenderer,\n};\n"],"sourceRoot":""}
{"version":3,"sources":["DataGrid/customHooks/useInputSearch.js"],"names":["useInputSearch","initialSearchText","filters","setFilters","inputProps","onSearch","searchOnKeyUp","useState","updateSearch","setUpdateSearch","searchInputValue","setSearchInputValue","reRenderSearch","value","clearSearch","handleSearch","useCallback","key","trim","onKeyUp","target","searchProps","shouldUpdateSearch"],"mappings":"iLAaO,MAAMA,EAAiB,EAC5BC,oBAAoB,GACpBC,UAAU,GACVC,aACAC,aAAa,GACbC,WACAC,iBAAgB,MACX,MAAD,EACoCC,mBAAS,GAD7C,mBACGC,EADH,KACiBC,EADjB,OAE4CF,mBAC9CN,GAHE,mBAEGS,EAFH,KAEqBC,EAFrB,KAKEC,EAAiB,IAAMH,EAAiBI,GAAUA,EAAQ,GAC1DC,EAAc,IAAMH,EAAoBV,GACxCc,EAAeC,sBACnB,EAAGH,QAAOI,UACHJ,EAAMK,QAIXb,EAASQ,GACLP,EAAeK,EAAoBE,GAClCC,KALS,cAARG,GAAqBd,EAAWD,IAOxC,CAACM,IAEGW,EAAUH,sBACd,EAAGI,QAAUP,SAASI,UACpB,GAAY,UAARA,EAAiBL,SAChB,IAAKN,EAAe,OACzBS,EAAa,CAAEF,QAAOI,SAExB,CAACF,IAGH,MAAO,CACLM,YAAY,2BACPjB,GADM,IAETe,UACAd,SAAUU,EACVF,MAAOH,IAETY,mBAAoBd,EACpBA,aAAcI,EACdE","file":"static/js/75.f3913019.chunk.js","sourcesContent":["/* eslint-disable react-hooks/exhaustive-deps */\nimport { useState, useCallback } from 'react';\n\n/**\n * Provides reusable search functionality\n *\n * @param data.initialSearchText\n * @param data.filters\n * @param data.setFilters\n * @param data.inputProps\n * @param data.onSearch\n * @param data.searchOnKeyUp\n */\nexport const useInputSearch = ({\n  initialSearchText = '',\n  filters = [],\n  setFilters,\n  inputProps = {},\n  onSearch,\n  searchOnKeyUp = false,\n}) => {\n  const [updateSearch, setUpdateSearch] = useState(0); // Allows to update filters in real time\n  const [searchInputValue, setSearchInputValue] = useState(\n    initialSearchText,\n  );\n  const reRenderSearch = () => setUpdateSearch((value) => value + 1);\n  const clearSearch = () => setSearchInputValue(initialSearchText);\n  const handleSearch = useCallback(\n    ({ value, key }) => {\n      if (!value.trim()) {\n        if (key === 'Backspace') setFilters(filters);\n        return;\n      }\n      onSearch(value);\n      if (searchOnKeyUp) setSearchInputValue(value);\n      else clearSearch();\n    },\n    [updateSearch],\n  );\n  const onKeyUp = useCallback(\n    ({ target: { value }, key }) => {\n      if (key === 'Enter') reRenderSearch();\n      else if (!searchOnKeyUp) return;\n      handleSearch({ value, key });\n    },\n    [handleSearch],\n  );\n\n  return {\n    searchProps: {\n      ...inputProps,\n      onKeyUp,\n      onSearch: handleSearch,\n      value: searchInputValue,\n    },\n    shouldUpdateSearch: updateSearch,\n    updateSearch: reRenderSearch,\n    clearSearch,\n  };\n};\n"],"sourceRoot":""}
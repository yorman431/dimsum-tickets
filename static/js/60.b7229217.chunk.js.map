{"version":3,"sources":["DataGrid/customRenderers/ToggleCell.js","DataGrid/customRenderers/CommentsCell.js","DataGrid/columns2.js"],"names":["ToggleCell","customHandlers","onToggle","rowData","metaData","entityType","activeField","id","isChecked","get","dataProps","containerProps","onChange","useCallback","event","stopPropagation","checked","CommentsCellHeader","CommentsCell","onCommentsClick","countField","totalComments","onClick","color","props","theme","colors","brand","buttonType","labelText","disabled","defaultCol","label","property","camelCase","visible","searchable","sortable","resizable","width","customRenderer","header","formatters","headerStyle","justifyContent","cellStyle"],"mappings":"iGAAA,2CA+CeA,UA1CI,SAAC,GAKb,IAAD,IAJJC,eAAkBC,gBAId,MAJyB,aAIzB,EAHQC,EAGR,EAHJC,SAAYD,QAGR,IAFJE,kBAEI,MAFS,gBAET,MADJC,mBACI,MADU,SACV,EACIC,EAAOJ,EAAPI,GACFC,EAAYC,cAAIN,EAASG,GACzBI,EAAY,CAChB,cAAc,GAAd,OAAkBL,EAAlB,YAAgCC,EAAhC,WACA,CAAC,QAAD,OAASD,EAAT,OAA0BE,EAC1BI,eAAgB,CACd,cAAc,GAAd,OAAkBN,EAAlB,YAAgCC,EAAhC,uBAGEM,EAAWC,uBACf,SAACC,GACCA,EAAMC,kBACNb,EAASC,KAEX,CAACD,EAAUC,IAEb,OACE,kBAAC,IAAD,iBACMO,EADN,CAEEM,QAASR,EACTI,SAAUA,O,iCC/BhB,uGAMaK,EAAqB,kBAAM,kBAAC,IAAD,OA+CzBC,UA7CM,SAAC,GAKf,IAAD,IAJJjB,eAAkBkB,uBAId,MAJgC,aAIhC,EAHQhB,EAGR,EAHJC,SAAYD,QAGR,IAFJE,kBAEI,MAFS,gBAET,MADJe,kBACI,MADS,gBACT,EACIb,EAAOJ,EAAPI,GACFc,EAAgBZ,cAAIN,EAASiB,EAAY,KACzCV,EAAY,CAChB,cAAc,GAAd,OAAkBL,EAAlB,YAAgCe,EAAhC,WACA,CAAC,QAAD,OAASf,EAAT,OAA0BE,EAC1BI,eAAgB,CACd,cAAc,GAAd,OAAkBN,EAAlB,YAAgCe,EAAhC,uBAGEE,EAAUT,uBACd,SAACC,GACCA,EAAMC,kBACNI,EAAgBhB,KAElB,CAACgB,EAAiBhB,IAEpB,OACE,kBAAC,IAAD,iBACMO,EADN,CAEEa,MAAO,SAACC,GAAD,OAAWA,EAAMC,MAAMC,OAAOC,MAAM,MAC3CC,WAAW,OACXC,UAAWR,EACXC,QAASA,EACTQ,SAA4B,MAAlBT,O,4FC9BVU,EAAa,eAACC,EAAD,uDAAS,QAAT,MAAsB,CACvCC,SAAUC,oBAAUF,GACpBA,QACAG,SAAS,EACTC,YAAY,EACZC,UAAU,EACVC,WAAW,IAKE,WAAC,2BAETP,EAAW,SAFH,IAGXQ,MAAO,QAHI,2BAMRR,EAAW,UANH,IAOXQ,MAAO,QAPI,2BAURR,EAAW,eAVH,IAWXQ,MAAO,QAXI,2BAcRR,EAAW,WAdH,IAeXQ,MAAO,QAfI,2BAkBRR,EAAW,WAlBH,IAmBXS,eAAgB,SAAChB,GAAD,OACd,kBAAC,UAAD,iBACMA,EADN,CAEEnB,WAxBW,iBAyBXC,YAAY,aAGhBiC,MAAO,KA1BI,2BA6BRR,EAAW,aA7BH,IA8BXS,eAAgBtB,UAChBuB,OAAQ,CACNC,WAAY,CAACzB,uBAEf0B,YAAa,CAAEC,eAAgB,UAC/BC,UAAW,CAAED,eAAgB,UAC7BL,MAAO,OApCI,2BAuCRR,EAAW,kBAvCH,IAwCXQ,MAAO","file":"static/js/60.b7229217.chunk.js","sourcesContent":["import React, { useCallback } from 'react';\nimport DSToggle from '@elliemae/ds-basic/form/Toggle';\nimport PropTypes from 'prop-types';\nimport { get } from 'lodash';\n\nconst ToggleCell = ({\n  customHandlers: { onToggle = () => {} },\n  metaData: { rowData },\n  entityType = 'workflow-rule',\n  activeField = 'active',\n}) => {\n  const { id } = rowData;\n  const isChecked = get(rowData, activeField);\n  const dataProps = {\n    'data-testid': `${entityType}-${activeField}-toggle`,\n    [`data-${entityType}Id`]: id,\n    containerProps: {\n      'data-testid': `${entityType}-${activeField}-toggle-container`,\n    },\n  };\n  const onChange = useCallback(\n    (event) => {\n      event.stopPropagation();\n      onToggle(rowData);\n    },\n    [onToggle, rowData],\n  );\n  return (\n    <DSToggle\n      {...dataProps}\n      checked={isChecked}\n      onChange={onChange}\n    />\n  );\n};\nToggleCell.propTypes = {\n  customHandlers: PropTypes.shape({\n    onToggle: PropTypes.func,\n  }),\n  metaData: PropTypes.shape({\n    rowData: PropTypes.object,\n  }),\n  entityType: PropTypes.string.isRequired,\n  activeField: PropTypes.string,\n  theme: PropTypes.object,\n};\n\nexport default ToggleCell;\n","import React, { useCallback } from 'react';\nimport DSButton from '@elliemae/ds-basic/Button';\nimport Comments from '@elliemae/ds-icons/Comments';\nimport PropTypes from 'prop-types';\nimport { get } from 'lodash';\n\nexport const CommentsCellHeader = () => <Comments />;\n\nconst CommentsCell = ({\n  customHandlers: { onCommentsClick = () => {} },\n  metaData: { rowData },\n  entityType = 'workflow-rule',\n  countField = 'totalComments',\n}) => {\n  const { id } = rowData;\n  const totalComments = get(rowData, countField, '0');\n  const dataProps = {\n    'data-testid': `${entityType}-${countField}-toggle`,\n    [`data-${entityType}Id`]: id,\n    containerProps: {\n      'data-testid': `${entityType}-${countField}-toggle-container`,\n    },\n  };\n  const onClick = useCallback(\n    (event) => {\n      event.stopPropagation();\n      onCommentsClick(rowData);\n    },\n    [onCommentsClick, rowData],\n  );\n  return (\n    <DSButton\n      {...dataProps}\n      color={(props) => props.theme.colors.brand['500']}\n      buttonType=\"text\"\n      labelText={totalComments}\n      onClick={onClick}\n      disabled={totalComments === '0'}\n    />\n  );\n};\nCommentsCell.propTypes = {\n  customHandlers: PropTypes.shape({\n    onCommentsClick: PropTypes.func,\n  }),\n  metaData: PropTypes.shape({\n    rowData: PropTypes.object,\n  }),\n  entityType: PropTypes.string.isRequired,\n  countField: PropTypes.string,\n  theme: PropTypes.object,\n};\n\nexport default CommentsCell;\n","import React from 'react';\nimport CommentsCell, {\n  CommentsCellHeader,\n} from './customRenderers/CommentsCell';\nimport ToggleCell from './customRenderers/ToggleCell';\nimport { camelCase } from 'lodash';\n\nconst defaultCol = (label = 'label') => ({\n  property: camelCase(label),\n  label,\n  visible: true,\n  searchable: true,\n  sortable: true,\n  resizable: true,\n});\n\nconst entityType = 'workflow-rules';\n\nexport default [\n  {\n    ...defaultCol('name'),\n    width: '19%',\n  },\n  {\n    ...defaultCol('event'),\n    width: '15%',\n  },\n  {\n    ...defaultCol('conditions'),\n    width: '19%',\n  },\n  {\n    ...defaultCol('result'),\n    width: '15%',\n  },\n  {\n    ...defaultCol('active'),\n    customRenderer: (props) => (\n      <ToggleCell\n        {...props}\n        entityType={entityType}\n        activeField=\"active\"\n      />\n    ),\n    width: 64,\n  },\n  {\n    ...defaultCol('comments'),\n    customRenderer: CommentsCell,\n    header: {\n      formatters: [CommentsCellHeader],\n    },\n    headerStyle: { justifyContent: 'center' },\n    cellStyle: { justifyContent: 'center' },\n    width: '4%',\n  },\n  {\n    ...defaultCol('modified date'),\n    width: '14%',\n  },\n];\n"],"sourceRoot":""}
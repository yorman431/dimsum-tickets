{"version":3,"sources":["../../../../src/hooks/useExecutionTimer.tsx","../../../src/usePopoverProviderState.tsx","components/styled.js","../../../src/TooltipTextProvider.tsx","../../../../src/InputGroup/AddonWrapper.tsx","../../../../src/InputGroup/props.tsx","../../../../src/InputGroup/defaultProps.tsx","../../../src/DSTruncatedTooltipText.tsx","../../../../src/InputGroup/DSInputGroup.tsx"],"names":["startFn","cleanFn","delayTime","startTimer","useRef","closeTimer","args","clearTimeout","setTimeout","initialState","reference","visible","value","options","delay","triggerRef","useState","tooltipState","setTooltipState","useExecutionTimer","state","showTooltip","hideTooltip","handleHideTooltip","useEffect","window","throttle","show","e","target","hide","StyledFormItemLayout","styled","DSFormItemLayout","TruncatedTooltipContext","React","Provider","TooltipTextProvider","children","tooltipDelay","placement","tooltipOptions","usePopoverProviderState","zIndex","setZIndex","useMemo","boundaries","showArrow","content","referenceEl","style","pointerEvents","Container","aggregatedClasses","InputAddon","AddonWrapper","this","leftAddon","rightAddon","inputComponent","className","containerProps","childType","Component","props","PropTypes","innerRef","current","any","defaultProps","Text","DSTruncatedTooltipText","otherTextProps","tooltipContext","useContext","handlers","onMouseEnter","onMouseLeave","truncatedTooltipTextProps","tooltipPlacement","positions","undefined","describe","TruncatedTooltipTextWithSchema","DSInputGroup","InputComponents","ref","DSInputGroupWithSchema"],"mappings":"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","file":"static/js/54.fbb53011.chunk.js","sourcesContent":["import { useRef } from 'react';\n\nexport default function useExecutionDelay(startFn, cleanFn, delayTime) {\n  const startTimer = useRef();\n  const closeTimer = useRef();\n\n  const startFunction = (...args) => {\n    clearTimeout(closeTimer.current);\n    startTimer.current = setTimeout(() => startFn(...args), delayTime);\n  };\n\n  const cleanFunction = (...args) => {\n    clearTimeout(startTimer.current);\n    closeTimer.current = setTimeout(() => cleanFn(...args), 30);\n  };\n  return [startFunction, cleanFunction];\n}\n","import { useState, useEffect, useRef } from 'react';\nimport { throttle } from 'lodash';\nimport { useExecutionTimer } from '@elliemae/ds-utilities/hooks';\n\nfunction usePopoverProviderState({\n  initialState = {\n    reference: null,\n    visible: false,\n    value: '',\n    options: {},\n  },\n  delay,\n}) {\n  const triggerRef = useRef();\n  const [tooltipState, setTooltipState] = useState(initialState);\n\n  const show = (state) => {\n    setTooltipState((prevState) => ({\n      ...prevState,\n      ...state,\n      visible: true,\n    }));\n  };\n  const hide = (state) => {\n    setTooltipState((prevState) => ({\n      ...prevState,\n      ...state,\n      visible: false,\n    }));\n  };\n\n  const [showTooltip, hideTooltip] = useExecutionTimer(show, hide, delay);\n\n  const handleShowTooltip = (state, e) => {\n    triggerRef.current = e.target;\n    showTooltip({ ...state, reference: e.target });\n  };\n\n  const handleHideTooltip = (state) => {\n    hideTooltip(state);\n  };\n\n  useEffect(() => {\n    window.addEventListener('scroll', throttle(handleHideTooltip, 300), true);\n    window.addEventListener('click', handleHideTooltip, true);\n    return () => {\n      window.removeEventListener(\n        'scroll',\n        throttle(handleHideTooltip, 300),\n        true,\n      );\n      window.addEventListener('click', handleHideTooltip, true);\n    };\n  }, [tooltipState.reference]);\n\n  return {\n    show: handleShowTooltip,\n    hide: handleHideTooltip,\n    state: tooltipState,\n  };\n}\n\nexport default usePopoverProviderState;\n","import styled from \"styled-components\";\nimport DSFormItemLayout from \"@elliemae/ds-basic/form/FormItem\";\n\nexport const StyledFormItemLayout = styled(DSFormItemLayout)`\n  max-width: 200px;\n`;\n","/* eslint-disable react/prop-types */\nimport React, { useMemo, useState } from 'react';\nimport DSPopover, { usePopoverProviderState } from '@elliemae/ds-popover';\n\nconst TruncatedTooltipContext = React.createContext();\n\nconst { Provider } = TruncatedTooltipContext;\n\nfunction TooltipTextProvider({\n  children,\n  tooltipDelay = 200,\n  placement = 'top',\n  ...tooltipOptions\n}) {\n  const {\n    show: showTooltip,\n    hide: hideTooltip,\n    state: tooltipState,\n  } = usePopoverProviderState({ delay: tooltipDelay });\n  const [zIndex, setZIndex] = useState(110);\n\n  const value = useMemo(\n    () => ({\n      showTooltip,\n      hideTooltip,\n      setZIndex,\n    }),\n    [],\n  );\n\n  return (\n    <Provider value={value}>\n      {children}\n      {tooltipState.visible ? (\n        <DSPopover\n          boundaries=\"window\"\n          placement={placement}\n          showArrow\n          {...tooltipOptions}\n          {...(tooltipState.options || {})}\n          content={tooltipState.value}\n          referenceEl={tooltipState.reference}\n          style={{ pointerEvents: 'none', zIndex }}\n          visible={tooltipState.visible}\n        />\n      ) : null}\n    </Provider>\n  );\n}\n\nTooltipTextProvider.propTypes = {};\nTooltipTextProvider.defaultProps = {};\n\nexport { TooltipTextProvider, TruncatedTooltipContext };\nexport default TooltipTextProvider;\n","import React, { Component } from 'react';\nimport { aggregatedClasses } from '@elliemae/ds-classnames';\n\nconst blockName = 'input-addon-group';\n\nconst Container = aggregatedClasses('div')(blockName);\nconst InputAddon = aggregatedClasses('span')(blockName, 'addon');\n\nexport default class AddonWrapper extends Component {\n  static defaultProps = {};\n\n  state = {};\n\n  render() {\n    const {\n      leftAddon,\n      rightAddon,\n      children: inputComponent,\n      className,\n      containerProps,\n    } = this.props;\n    const childType =\n      inputComponent && inputComponent.type && inputComponent.type.name\n        ? inputComponent.type.name.toLowerCase()\n        : 'default';\n    return (\n      <Container\n        className={`${className} ${blockName}--${childType}`}\n        {...containerProps}\n      >\n        {leftAddon && <InputAddon>{leftAddon}</InputAddon>}\n        {inputComponent}\n        {rightAddon && <InputAddon>{rightAddon}</InputAddon>}\n      </Container>\n    );\n  }\n}\n","import { PropTypes } from 'react-desc';\n\nexport const props = {\n  /** props injected to wrapper of page header */\n  containerProps: PropTypes.shape({}).description(\n    'props injected to wrapper of page header',\n  ),\n  /** inner ref for input group wrapper */\n  innerRef: PropTypes.oneOfType([\n    PropTypes.func,\n    PropTypes.shape({ current: PropTypes.any }),\n  ]).description('inner ref for input group wrapper'),\n  /** class for input group wrapper */\n  className: PropTypes.string.description('class for input group wrapper'),\n  /**\n   * Set style for the input group\n   */\n  style: PropTypes.object.description('Set style for the input group'),\n  /**\n   * Component to be added at the left side of the input\n   */\n  leftAddon: PropTypes.element.description(\n    'Component to be added at the left side of the input',\n  ),\n  /**\n   * Component to be added at the right side of the input\n   */\n  rightAddon: PropTypes.element.description(\n    'Component to be added at the right side of the input',\n  ),\n  /**\n   * Input components to show\n   */\n  children: PropTypes.element.description('Input components to show'),\n};\n","export const defaultProps = {\n  containerProps: {},\n  innerRef: null,\n  className: '',\n  style: {},\n  leftAddon: null,\n  rightAddon: null,\n};\n","import React, { useContext, useEffect } from 'react';\nimport { describe, PropTypes } from 'react-desc';\nimport styled from 'styled-components';\nimport { PopperPositions as positions } from '@elliemae/ds-popper';\nimport { TruncatedTooltipContext } from './TooltipTextProvider';\n\nconst isEllipsisActive = ({ offsetWidth, scrollWidth }) =>\n  offsetWidth < scrollWidth;\n\n// reduce the possibility of error showing the tooltip (text-overflow: ellipsis) https://jira.elliemae.io/browse/PUI-1755\nconst Text = styled.span`\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  overflow: hidden;\n  display: inline-block;\n  max-width: 100%;\n`;\n\nconst DSTruncatedTooltipText = ({\n  containerProps = {},\n  value = '',\n  zIndex = 110, // https://jira.elliemae.io/browse/PUI-1755\n  ...otherTextProps\n}) => {\n  const tooltipContext = useContext(TruncatedTooltipContext);\n  useEffect(() => {\n    if (zIndex && tooltipContext) tooltipContext.setZIndex(zIndex);\n  }, [zIndex]);\n\n  if (!tooltipContext) return value;\n\n  const { showTooltip, hideTooltip } = tooltipContext;\n\n  const handleMouseEnter = (e) => {\n    const { target } = e;\n    if (target && isEllipsisActive(target, target.getBoundingClientRect())) {\n      showTooltip(\n        {\n          value,\n          reference: target,\n        },\n        e,\n      );\n    }\n  };\n\n  const handleMouseLeave = (e) => {\n    hideTooltip({ reference: e.target });\n  };\n\n  const handlers = showTooltip\n    ? { onMouseEnter: handleMouseEnter, onMouseLeave: handleMouseLeave }\n    : {};\n  return (\n    <Text {...containerProps} {...otherTextProps} {...handlers}>\n      {value}\n    </Text>\n  );\n};\n\nDSTruncatedTooltipText.defaultProps = {\n  value: '',\n  zIndex: 110,\n};\n\nconst truncatedTooltipTextProps = {\n  containerProps: PropTypes.object.description(\n    'Set of Properties attached to the main container',\n  ),\n  value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).description(\n    'Text that when truncated will trigger the tooltip interaction',\n  ),\n  tooltipPlacement: PropTypes.oneOf([\n    positions.AUTO_START,\n    positions.AUTO_END,\n    positions.AUTO,\n    positions.TOP_START,\n    positions.TOP,\n    positions.TOP_END,\n    positions.RIGHT_START,\n    positions.RIGHT,\n    positions.RIGHT_END,\n    positions.BOTTOM_START,\n    positions.BOTTOM,\n    positions.BOTTOM_END,\n    positions.LEFT_START,\n    positions.LEFT,\n    positions.LEFT_END,\n  ]).description('Position of the tooltip'),\n  tooltipDelay: PropTypes.number.description('Delay to show the tooltip'),\n  zIndex: PropTypes.number\n    .description('override default zIndex')\n    .defaultValue(110),\n};\n\nDSTruncatedTooltipText.defaultProps = {\n  containerProps: {},\n  value: '',\n  tooltipPlacement: undefined,\n  tooltipDelay: undefined,\n};\n\nDSTruncatedTooltipText.propTypes = truncatedTooltipTextProps;\n\nconst TruncatedTooltipTextWithSchema = describe(DSTruncatedTooltipText);\nTruncatedTooltipTextWithSchema.propTypes = truncatedTooltipTextProps;\n\nexport { DSTruncatedTooltipText, TruncatedTooltipTextWithSchema };\nexport default DSTruncatedTooltipText;\n","import React from 'react';\nimport { describe } from 'react-desc';\nimport AddonWrapper from './AddonWrapper';\nimport { props } from './props';\nimport { defaultProps } from './defaultProps';\n\nconst DSInputGroup = ({\n  containerProps,\n  innerRef,\n  className,\n  style,\n  leftAddon,\n  rightAddon,\n  children: InputComponents, // as InputComponents,\n}) => (\n  <AddonWrapper\n    ref={innerRef}\n    className={className}\n    containerProps={containerProps}\n    leftAddon={leftAddon}\n    rightAddon={rightAddon}\n    style={style}\n  >\n    {InputComponents}\n  </AddonWrapper>\n);\n\nDSInputGroup.propTypes = props;\nDSInputGroup.defaultProps = defaultProps;\nconst DSInputGroupWithSchema = describe(DSInputGroup);\n\nDSInputGroupWithSchema.propTypes = props;\n\nexport default DSInputGroup;\nexport { DSInputGroupWithSchema };\n"],"sourceRoot":""}